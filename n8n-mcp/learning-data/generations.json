[
  {
    "id": "38cf4ce0-c4b7-4708-8a6f-136412fa5a02",
    "prompt": "To create a comprehensive n8n workflow for an IoT-based hospital bed and equipment tracking system, we'll follow the mandatory architecture specified and ensure all features are properly orchestrated and connected. Below is a detailed plan for implementing this system:\n\n### 1. Main Entry Point\n\n- **Trigger Node**: `n8n-nodes-base.cron`  \n  - **Purpose**: Trigger periodic tasks such as reporting and monitoring.\n  - **Configuration**: Set to trigger every 30 minutes for emergency room occupancy reporting, and daily for occupancy statistics.\n\n### 2. Central Router\n\n- **Router Node**: `n8n-nodes-base.switch`  \n  - **Purpose**: Route data to different feature branches based on task type.\n  - **Conditions**: Check task types like 'bed occupancy', 'equipment tracking', 'environmental control', etc.\n\n### 3. Feature Branches\n\n#### Bed Occupancy Rate Tracking with RFID\n\n- **Node**: `n8n-nodes-base.httpRequest`  \n  - **Function**: Fetch RFID data for bed occupancy.\n- **Node**: `n8n-nodes-base.code`  \n  - **Function**: Process and analyze occupancy data.\n- **Node**: `n8n-nodes-base.emailSend`  \n  - **Function**: Send occupancy statistics to the dashboard.\n\n#### Critical Equipment Location Tracking (MQTT Beacon)\n\n- **Node**: `n8n-nodes-base.mqtt`  \n  - **Function**: Receive location data from beacons.\n- **Node**: `n8n-nodes-base.code`  \n  - **Function**: Analyze and visualize equipment location.\n\n#### Room Temperature/Humidity Control with Raspberry Pi\n\n- **Node**: `n8n-nodes-raspberry.raspberryPi`  \n  - **Function**: Monitor and adjust room temperature/humidity.\n- **Node**: `n8n-nodes-base.httpRequest`  \n  - **Function**: Send control commands.\n\n#### Emergency Room Occupancy Rate SMS Report\n\n- **Node**: `n8n-nodes-base.twilio`  \n  - **Function**: Send SMS reports on occupancy rates every 30 minutes.\n\n#### Automatic Task Assignment for Cleaning Team\n\n- **Node**: `n8n-nodes-base.code`  \n  - **Function**: Analyze room occupancy and cleanliness data.\n- **Node**: `n8n-nodes-base.executeCommand`  \n  - **Function**: Assign tasks to cleaning teams.\n\n#### Equipment Maintenance Notification\n\n- **Node**: `n8n-nodes-base.twilio`  \n  - **Function**: Notify when equipment maintenance is due.\n\n#### Special Alerts for Rooms at Risk of Infection\n\n- **Node**: `n8n-nodes-base.code`  \n  - **Function**: Analyze infection risk based on data.\n- **Node**: `n8n-nodes-base.twilio`  \n  - **Function**: Send alerts for rooms at risk.\n\n#### Visitor Density Analysis and Security Notification\n\n- **Node**: `n8n-nodes-base.httpRequest`  \n  - **Function**: Fetch and analyze visitor density data.\n- **Node**: `n8n-nodes-base.twilio`  \n  - **Function**: Notify security if density exceeds a threshold.\n\n#### Monthly Resource Usage Optimization Report\n\n- **Node**: `n8n-nodes-base.code`  \n  - **Function**: Aggregate data for monthly reports.\n- **Node**: `n8n-nodes-base.emailSend`  \n  - **Function**: Send reports to relevant stakeholders.\n\n### 4. Central Merge Node\n\n- **Merge Node**: `n8n-nodes-base.merge`  \n  - **Purpose**: Combine results from all feature branches for final processing.\n\n### 5. Final Processing/Response\n\n- **Node**: `n8n-nodes-base.code`  \n  - **Function**: Final data processing and logging.\n- **Node**: `n8n-nodes-base.emailSend`  \n  - **Function**: Send final summary report.\n\n### Comprehensive Error Handling\n\n- **Error Trigger Node**: `n8n-nodes-base.errorTrigger`  \n  - **Purpose**: Catch and handle errors globally.\n- **Node**: `n8n-nodes-base.emailSend`  \n  - **Function**: Send error notifications to administrators.\n\n### Validation Checklist\n\n- ☑ All nodes are properly connected.\n- ☑ Error handling is comprehensive with dedicated error nodes.\n- ☑ All feature branches merge back to the central flow.\n- ☑ Data flows logically and efficiently through the workflow.\n- ☑ All notification channels are tested and operational.\n- ☑ Reports are correctly formatted and scheduled.\n- ☑ All critical operations have conditional checks and appropriate error handling.\n\nThis structured workflow plan ensures that all features of the hospital bed and equipment tracking system are implemented cohesively and efficiently, with robust error handling and reporting mechanisms in place.",
    "workflow": {
      "name": "IoT-based Hospital Bed and Equipment Tracking System",
      "nodes": [
        {
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "minutes",
                  "minutesInterval": 30
                }
              ]
            }
          },
          "name": "Periodic Monitoring Trigger",
          "type": "n8n-nodes-base.cron",
          "typeVersion": 1,
          "position": [
            100,
            300
          ],
          "id": "1"
        },
        {
          "parameters": {
            "topic": "hospital/beds/+/status",
            "options": {
              "qos": 0,
              "retain": false
            }
          },
          "name": "Bed Status MQTT Trigger",
          "type": "n8n-nodes-base.mqtt",
          "typeVersion": 1,
          "position": [
            100,
            100
          ],
          "id": "2"
        },
        {
          "parameters": {
            "topic": "hospital/equipment/+/location",
            "options": {
              "qos": 0,
              "retain": false
            }
          },
          "name": "Equipment Location MQTT Trigger",
          "type": "n8n-nodes-base.mqtt",
          "typeVersion": 1,
          "position": [
            100,
            500
          ],
          "id": "3"
        },
        {
          "parameters": {
            "topic": "hospital/environment/+/sensors",
            "options": {
              "qos": 0,
              "retain": false
            }
          },
          "name": "Environmental Sensors MQTT Trigger",
          "type": "n8n-nodes-base.mqtt",
          "typeVersion": 1,
          "position": [
            100,
            700
          ],
          "id": "4"
        },
        {
          "parameters": {
            "functionCode": "// Determine data type and set routing parameter\nconst topic = $input.item.json.topic || '';\nlet dataType = '';\n\nif (topic.includes('beds')) {\n  dataType = 'bed_occupancy';\n} else if (topic.includes('equipment')) {\n  dataType = 'equipment_tracking';\n} else if (topic.includes('environment')) {\n  dataType = 'environmental_control';\n} else if ($input.item.json.triggerSource === 'cron') {\n  dataType = 'scheduled_task';\n}\n\nreturn {\n  json: {\n    ...$input.item.json,\n    dataType,\n    timestamp: new Date().toISOString(),\n    processingId: Math.random().toString(36).substring(2, 15)\n  }\n};"
          },
          "name": "Classify Incoming Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            300
          ],
          "id": "5"
        },
        {
          "parameters": {
            "dataPropertyName": "dataType",
            "rules": {
              "rules": [
                {
                  "value": "bed_occupancy",
                  "output": 0
                },
                {
                  "value": "equipment_tracking",
                  "output": 1
                },
                {
                  "value": "environmental_control",
                  "output": 2
                },
                {
                  "value": "scheduled_task",
                  "output": 3
                }
              ]
            },
            "fallbackOutput": 4
          },
          "name": "Route by Data Type",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            500,
            300
          ],
          "id": "6"
        },
        {
          "parameters": {
            "keepOnlySet": true,
            "values": {
              "string": [
                {
                  "name": "triggerSource",
                  "value": "cron"
                }
              ]
            },
            "options": {}
          },
          "name": "Set Cron Source",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            300,
            100
          ],
          "id": "7"
        },
        {
          "parameters": {
            "functionCode": "// Process bed occupancy data from RFID sensors\nconst payload = $input.item.json.payload ? JSON.parse($input.item.json.payload) : $input.item.json;\n\n// Extract bed ID and status\nconst bedId = payload.bedId || payload.id || 'unknown';\nconst roomId = payload.roomId || 'unknown';\nconst floor = payload.floor || 'unknown';\nconst department = payload.department || 'unknown';\nconst occupied = payload.occupied === true || payload.status === 'occupied';\nconst patientId = payload.patientId || null;\nconst timestamp = payload.timestamp || new Date().toISOString();\n\n// Determine if this is an emergency room\nconst isEmergencyRoom = department.toLowerCase().includes('emergency') || department.toLowerCase().includes('er');\n\n// Structure the data for further processing\nreturn {\n  json: {\n    bedId,\n    roomId,\n    floor,\n    department,\n    occupied,\n    patientId,\n    timestamp,\n    isEmergencyRoom,\n    needsCleaning: payload.needsCleaning || false,\n    lastCleaned: payload.lastCleaned || null,\n    metadata: payload.metadata || {}\n  }\n};"
          },
          "name": "Process Bed Occupancy Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            100
          ],
          "id": "8"
        },
        {
          "parameters": {
            "method": "POST",
            "url": "=https://hospital-api.example.com/api/beds/{{$json.bedId}}/status",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpBasicAuth",
            "sendBody": true,
            "bodyParameters": {
              "parameters": [
                {
                  "name": "occupied",
                  "value": "={{$json.occupied}}"
                },
                {
                  "name": "patientId",
                  "value": "={{$json.patientId}}"
                },
                {
                  "name": "timestamp",
                  "value": "={{$json.timestamp}}"
                },
                {
                  "name": "needsCleaning",
                  "value": "={{$json.needsCleaning}}"
                }
              ]
            },
            "options": {
              "response": {
                "response": {
                  "fullResponse": true,
                  "responseFormat": "json"
                }
              }
            }
          },
          "name": "Update Bed Status in Database",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            900,
            100
          ],
          "id": "9",
          "credentials": {
            "httpBasicAuth": {
              "id": "1",
              "name": "Hospital API Credentials"
            }
          }
        },
        {
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{$json.isEmergencyRoom}}",
                  "value2": true
                }
              ]
            }
          },
          "name": "Is Emergency Room?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1100,
            100
          ],
          "id": "10"
        },
        {
          "parameters": {
            "functionCode": "// Add this bed data to emergency room tracking\nconst currentTime = new Date();\nconst formattedTime = currentTime.toLocaleTimeString();\n\n// Store in a format suitable for aggregation\nreturn {\n  json: {\n    ...($input.item.json),\n    trackingType: 'emergency_room',\n    trackingTime: formattedTime,\n    trackingDate: currentTime.toISOString().split('T')[0]\n  }\n};"
          },
          "name": "Tag for ER Reporting",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            0
          ],
          "id": "11"
        },
        {
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{$json.needsCleaning}}",
                  "value2": true
                }
              ]
            }
          },
          "name": "Needs Cleaning?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1300,
            200
          ],
          "id": "12"
        },
        {
          "parameters": {
            "functionCode": "// Generate cleaning task assignment\nconst roomData = $input.item.json;\n\n// Determine priority based on department and status\nlet priority = 'normal';\nif (roomData.isEmergencyRoom) {\n  priority = 'high';\n}\n\n// Create cleaning task\nreturn {\n  json: {\n    taskType: 'cleaning',\n    bedId: roomData.bedId,\n    roomId: roomData.roomId,\n    floor: roomData.floor,\n    department: roomData.department,\n    priority: priority,\n    assignedTime: new Date().toISOString(),\n    status: 'pending',\n    estimatedDuration: 20, // minutes\n    notes: `Room needs cleaning after patient discharge. Last cleaned: ${roomData.lastCleaned || 'unknown'}`\n  }\n};"
          },
          "name": "Create Cleaning Task",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            200
          ],
          "id": "13"
        },
        {
          "parameters": {
            "method": "POST",
            "url": "=https://hospital-api.example.com/api/tasks/cleaning",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpBasicAuth",
            "sendBody": true,
            "bodyParameters": {
              "parameters": [
                {
                  "name": "taskData",
                  "value": "={{$json}}"
                }
              ]
            }
          },
          "name": "Assign to Cleaning Team",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1700,
            200
          ],
          "id": "14",
          "credentials": {
            "httpBasicAuth": {
              "id": "1",
              "name": "Hospital API Credentials"
            }
          }
        },
        {
          "parameters": {
            "functionCode": "// Process equipment location data from MQTT beacons\nconst payload = $input.item.json.payload ? JSON.parse($input.item.json.payload) : $input.item.json;\n\n// Extract equipment data\nconst equipmentId = payload.equipmentId || payload.id || 'unknown';\nconst equipmentType = payload.type || 'unknown';\nconst locationX = payload.x || payload.locationX || 0;\nconst locationY = payload.y || payload.locationY || 0;\nconst floor = payload.floor || 'unknown';\nconst roomId = payload.roomId || 'unknown';\nconst department = payload.department || 'unknown';\nconst batteryLevel = payload.battery || payload.batteryLevel || 100;\nconst timestamp = payload.timestamp || new Date().toISOString();\nconst lastMaintenance = payload.lastMaintenance || null;\nconst maintenanceDue = payload.maintenanceDue || null;\n\n// Determine if equipment is critical\nconst isCritical = payload.critical === true || \n                  ['ventilator', 'defibrillator', 'ecmo', 'dialysis'].includes(equipmentType.toLowerCase());\n\n// Structure the data for further processing\nreturn {\n  json: {\n    equipmentId,\n    equipmentType,\n    location: {\n      x: locationX,\n      y: locationY,\n      floor,\n      roomId,\n      department\n    },\n    status: {\n      batteryLevel,\n      lastMaintenance,\n      maintenanceDue,\n      needsMaintenance: payload.needsMaintenance || false\n    },\n    isCritical,\n    inUse: payload.inUse || false,\n    timestamp,\n    metadata: payload.metadata || {}\n  }\n};"
          },
          "name": "Process Equipment Location Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            300
          ],
          "id": "15"
        },
        {
          "parameters": {
            "method": "POST",
            "url": "=https://hospital-api.example.com/api/equipment/{{$json.equipmentId}}/location",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpBasicAuth",
            "sendBody": true,
            "bodyParameters": {
              "parameters": [
                {
                  "name": "location",
                  "value": "={{$json.location}}"
                },
                {
                  "name": "timestamp",
                  "value": "={{$json.timestamp}}"
                },
                {
                  "name": "status",
                  "value": "={{$json.status}}"
                }
              ]
            }
          },
          "name": "Update Equipment Location in Database",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            900,
            300
          ],
          "id": "16",
          "credentials": {
            "httpBasicAuth": {
              "id": "1",
              "name": "Hospital API Credentials"
            }
          }
        },
        {
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{$json.isCritical}}",
                  "value2": true
                }
              ]
            }
          },
          "name": "Is Critical Equipment?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1100,
            300
          ],
          "id": "17"
        },
        {
          "parameters": {
            "functionCode": "// Track critical equipment for specialized monitoring\nconst equipment = $input.item.json;\n\n// Format for critical equipment tracking\nreturn {\n  json: {\n    ...equipment,\n    trackingType: 'critical_equipment',\n    lastUpdated: new Date().toISOString(),\n    alertLevel: equipment.status.batteryLevel < 20 ? 'warning' : 'normal',\n    locationDescription: `Floor ${equipment.location.floor}, Room ${equipment.location.roomId}, ${equipment.location.department}`\n  }\n};"
          },
          "name": "Tag for Critical Equipment Tracking",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            300
          ],
          "id": "18"
        },
        {
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{$json.status.needsMaintenance}}",
                  "value2": true
                }
              ]
            }
          },
          "name": "Needs Maintenance?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1100,
            400
          ],
          "id": "19"
        },
        {
          "parameters": {
            "functionCode": "// Generate maintenance notification\nconst equipment = $input.item.json;\n\n// Format notification message\nconst message = `MAINTENANCE REQUIRED: ${equipment.equipmentType} (ID: ${equipment.equipmentId}) needs maintenance. ` +\n              `Current location: Floor ${equipment.location.floor}, Room ${equipment.location.roomId}, ${equipment.location.department}. ` +\n              `Last maintenance: ${equipment.status.lastMaintenance || 'Unknown'}. ` +\n              `Battery level: ${equipment.status.batteryLevel}%.`;\n\n// Determine priority\nlet priority = 'normal';\nif (equipment.isCritical) {\n  priority = 'high';\n}\nif (equipment.status.batteryLevel < 20) {\n  priority = 'urgent';\n}\n\nreturn {\n  json: {\n    notificationType: 'maintenance',\n    equipmentId: equipment.equipmentId,\n    equipmentType: equipment.equipmentType,\n    message: message,\n    priority: priority,\n    timestamp: new Date().toISOString(),\n    recipients: ['maintenance_team', 'department_manager'],\n    location: equipment.location\n  }\n};"
          },
          "name": "Create Maintenance Notification",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            400
          ],
          "id": "20"
        },
        {
          "parameters": {
            "fromPhoneNumber": "{{ $node[\"Set SMS Parameters\"].json.fromNumber }}",
            "toPhoneNumber": "{{ $node[\"Set SMS Parameters\"].json.maintenanceTeamNumber }}",
            "message": "={{ $json.message }}",
            "options": {}
          },
          "name": "Send Maintenance SMS",
          "type": "n8n-nodes-base.twilio",
          "typeVersion": 1,
          "position": [
            1700,
            400
          ],
          "id": "21",
          "credentials": {
            "twilioApi": {
              "id": "2",
              "name": "Twilio Account"
            }
          }
        },
        {
          "parameters": {
            "keepOnlySet": true,
            "values": {
              "string": [
                {
                  "name": "fromNumber",
                  "value": "+15551234567"
                },
                {
                  "name": "emergencyDeptNumber",
                  "value": "+15552345678"
                },
                {
                  "name": "maintenanceTeamNumber",
                  "value": "+15553456789"
                },
                {
                  "name": "securityTeamNumber",
                  "value": "+15554567890"
                },
                {
                  "name": "infectionControlNumber",
                  "value": "+15555678901"
                }
              ]
            },
            "options": {}
          },
          "name": "Set SMS Parameters",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            1500,
            400
          ],
          "id": "22"
        },
        {
          "parameters": {
            "functionCode": "// Process environmental sensor data\nconst payload = $input.item.json.payload ? JSON.parse($input.item.json.payload) : $input.item.json;\n\n// Extract environmental data\nconst roomId = payload.roomId || 'unknown';\nconst floor = payload.floor || 'unknown';\nconst department = payload.department || 'unknown';\nconst temperature = payload.temperature || payload.temp || null;\nconst humidity = payload.humidity || null;\nconst co2Level = payload.co2 || payload.co2Level || null;\nconst particleCount = payload.particleCount || null;\nconst timestamp = payload.timestamp || new Date().toISOString();\n\n// Check for environmental issues\nlet environmentalIssues = [];\nif (temperature && (temperature < 20 || temperature > 24)) {\n  environmentalIssues.push('temperature');\n}\nif (humidity && (humidity < 30 || humidity > 60)) {\n  environmentalIssues.push('humidity');\n}\nif (co2Level && co2Level > 1000) {\n  environmentalIssues.push('co2');\n}\nif (particleCount && particleCount > 500) {\n  environmentalIssues.push('particulate');\n}\n\n// Determine infection risk based on environmental factors\nlet infectionRisk = 'low';\nif (environmentalIssues.length >= 2) {\n  infectionRisk = 'medium';\n}\nif (environmentalIssues.includes('particulate') && environmentalIssues.length >= 2) {\n  infectionRisk = 'high';\n}\n\n// Structure the data for further processing\nreturn {\n  json: {\n    roomId,\n    floor,\n    department,\n    readings: {\n      temperature,\n      humidity,\n      co2Level,\n      particleCount\n    },\n    timestamp,\n    environmentalIssues,\n    hasIssues: environmentalIssues.length > 0,\n    infectionRisk,\n    metadata: payload.metadata || {}\n  }\n};"
          },
          "name": "Process Environmental Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            500
          ],
          "id": "23"
        },
        {
          "parameters": {
            "method": "POST",
            "url": "=https://hospital-api.example.com/api/environment/rooms/{{$json.roomId}}",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpBasicAuth",
            "sendBody": true,
            "bodyParameters": {
              "parameters": [
                {
                  "name": "readings",
                  "value": "={{$json.readings}}"
                },
                {
                  "name": "timestamp",
                  "value": "={{$json.timestamp}}"
                },
                {
                  "name": "infectionRisk",
                  "value": "={{$json.infectionRisk}}"
                }
              ]
            }
          },
          "name": "Update Environmental Data in Database",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            900,
            500
          ],
          "id": "24",
          "credentials": {
            "httpBasicAuth": {
              "id": "1",
              "name": "Hospital API Credentials"
            }
          }
        },
        {
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{$json.hasIssues}}",
                  "value2": true
                }
              ]
            }
          },
          "name": "Has Environmental Issues?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1100,
            500
          ],
          "id": "25"
        },
        {
          "parameters": {
            "method": "POST",
            "url": "=https://hospital-api.example.com/api/environment/control",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpBasicAuth",
            "sendBody": true,
            "bodyParameters": {
              "parameters": [
                {
                  "name": "roomId",
                  "value": "={{$json.roomId}}"
                },
                {
                  "name": "adjustments",
                  "value": "={{JSON.stringify($json.environmentalIssues)}}"
                },
                {
                  "name": "readings",
                  "value": "={{JSON.stringify($json.readings)}}"
                }
              ]
            }
          },
          "name": "Send Environmental Control Commands",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1300,
            500
          ],
          "id": "26",
          "credentials": {
            "httpBasicAuth": {
              "id": "1",
              "name": "Hospital API Credentials"
            }
          }
        },
        {
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{$json.infectionRisk}}",
                  "value2": "high"
                }
              ]
            }
          },
          "name": "High Infection Risk?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1100,
            600
          ],
          "id": "27"
        },
        {
          "parameters": {
            "functionCode": "// Create infection risk alert\nconst roomData = $input.item.json;\n\n// Format alert message\nconst message = `HIGH INFECTION RISK ALERT: Room ${roomData.roomId} on Floor ${roomData.floor} (${roomData.department}) ` +\n              `has environmental conditions that indicate high infection risk. ` +\n              `Temperature: ${roomData.readings.temperature}°C, Humidity: ${roomData.readings.humidity}%, ` +\n              `CO2: ${roomData.readings.co2Level} ppm, Particle Count: ${roomData.readings.particleCount}.`;\n\nreturn {\n  json: {\n    notificationType: 'infection_risk',\n    roomId: roomData.roomId,\n    floor: roomData.floor,\n    department: roomData.department,\n    message: message,\n    priority: 'high',\n    timestamp: new Date().toISOString(),\n    recipients: ['infection_control', 'department_manager'],\n    readings: roomData.readings\n  }\n};"
          },
          "name": "Create Infection Risk Alert",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            600
          ],
          "id": "28"
        },
        {
          "parameters": {
            "fromPhoneNumber": "{{ $node[\"Set SMS Parameters\"].json.fromNumber }}",
            "toPhoneNumber": "{{ $node[\"Set SMS Parameters\"].json.infectionControlNumber }}",
            "message": "={{ $json.message }}",
            "options": {}
          },
          "name": "Send Infection Risk SMS",
          "type": "n8n-nodes-base.twilio",
          "typeVersion": 1,
          "position": [
            1500,
            600
          ],
          "id": "29",
          "credentials": {
            "twilioApi": {
              "id": "2",
              "name": "Twilio Account"
            }
          }
        },
        {
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "minutes",
                  "minutesInterval": 30
                }
              ]
            }
          },
          "name": "ER Report Trigger",
          "type": "n8n-nodes-base.cron",
          "typeVersion": 1,
          "position": [
            100,
            900
          ],
          "id": "30"
        },
        {
          "parameters": {
            "functionCode": "// Determine which scheduled task to run\nconst currentHour = new Date().getHours();\nconst currentMinute = new Date().getMinutes();\nconst currentDay = new Date().getDay(); // 0 = Sunday, 6 = Saturday\n\n// Determine task type based on time\nlet taskType = '';\n\n// Every 30 minutes - ER occupancy report\nif (currentMinute % 30 === 0) {\n  taskType = 'er_occupancy_report';\n}\n\n// Daily at 8 AM - daily occupancy statistics\nif (currentHour === 8 && currentMinute === 0) {\n  taskType = 'daily_occupancy_statistics';\n}\n\n// Monthly on the 1st at 6 AM - resource usage optimization report\nif (new Date().getDate() === 1 && currentHour === 6 && currentMinute === 0) {\n  taskType = 'monthly_resource_report';\n}\n\n// Every 2 hours during day - visitor density check\nif (currentHour >= 8 && currentHour <= 20 && currentMinute === 0 && currentHour % 2 === 0) {\n  taskType = 'visitor_density_check';\n}\n\nreturn {\n  json: {\n    taskType,\n    scheduledTime: new Date().toISOString(),\n    isWorkingHours: currentHour >= 8 && currentHour <= 18,\n    isWeekend: currentDay === 0 || currentDay === 6\n  }\n};"
          },
          "name": "Determine Scheduled Task",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            900
          ],
          "id": "31"
        },
        {
          "parameters": {
            "dataPropertyName": "taskType",
            "rules": {
              "rules": [
                {
                  "value": "er_occupancy_report",
                  "output": 0
                },
                {
                  "value": "daily_occupancy_statistics",
                  "output": 1
                },
                {
                  "value": "monthly_resource_report",
                  "output": 2
                },
                {
                  "value": "visitor_density_check",
                  "output": 3
                }
              ]
            }
          },
          "name": "Route Scheduled Task",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            500,
            900
          ],
          "id": "32"
        },
        {
          "parameters": {
            "method": "GET",
            "url": "https://hospital-api.example.com/api/beds/emergency/status",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpBasicAuth",
            "options": {}
          },
          "name": "Fetch ER Occupancy Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            700,
            700
          ],
          "id": "33",
          "credentials": {
            "httpBasicAuth": {
              "id": "1",
              "name": "Hospital API Credentials"
            }
          }
        },
        {
          "parameters": {
            "functionCode": "// Generate ER occupancy report\nconst erData = $input.item.json.data || $input.item.json;\n\n// Calculate occupancy statistics\nconst totalBeds = erData.length;\nconst occupiedBeds = erData.filter(bed => bed.occupied).length;\nconst occupancyRate = (occupiedBeds / totalBeds * 100).toFixed(1);\n\n// Generate report message\nconst timestamp = new Date().toLocaleTimeString();\nconst message = `EMERGENCY ROOM OCCUPANCY REPORT (${timestamp}):\\n` +\n              `Total Beds: ${totalBeds}\\n` +\n              `Occupied Beds: ${occupiedBeds}\\n` +\n              `Occupancy Rate: ${occupancyRate}%\\n\\n` +\n              `Status by Area:\\n`;\n\n// Group by area\nconst areaGroups = {};\nerData.forEach(bed => {\n  const area = bed.area || 'Main';\n  if (!areaGroups[area]) {\n    areaGroups[area] = { total: 0, occupied: 0 };\n  }\n  areaGroups[area].total++;\n  if (bed.occupied) {\n    areaGroups[area].occupied++;\n  }\n});\n\n// Add area details to message\nlet areaDetails = '';\nfor (const area in areaGroups) {\n  const areaRate = (areaGroups[area].occupied / areaGroups[area].total * 100).toFixed(1);\n  areaDetails += `${area}: ${areaGroups[area].occupied}/${areaGroups[area].total} (${areaRate}%)\\n`;\n}\n\nconst fullMessage = message + areaDetails;\n\nreturn {\n  json: {\n    reportType: 'er_occupancy',\n    timestamp: new Date().toISOString(),\n    message: fullMessage,\n    statistics: {\n      totalBeds,\n      occupiedBeds,\n      occupancyRate: parseFloat(occupancyRate),\n      areaBreakdown: areaGroups\n    }\n  }\n};"
          },
          "name": "Generate ER Occupancy Report",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            700
          ],
          "id": "34"
        },
        {
          "parameters": {
            "fromPhoneNumber": "{{ $node[\"Set SMS Parameters\"].json.fromNumber }}",
            "toPhoneNumber": "{{ $node[\"Set SMS Parameters\"].json.emergencyDeptNumber }}",
            "message": "={{ $json.message }}",
            "options": {}
          },
          "name": "Send ER Occupancy SMS",
          "type": "n8n-nodes-base.twilio",
          "typeVersion": 1,
          "position": [
            1100,
            700
          ],
          "id": "35",
          "credentials": {
            "twilioApi": {
              "id": "2",
              "name": "Twilio Account"
            }
          }
        },
        {
          "parameters": {
            "method": "GET",
            "url": "https://hospital-api.example.com/api/beds/status/daily",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpBasicAuth",
            "options": {}
          },
          "name": "Fetch Daily Occupancy Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            700,
            900
          ],
          "id": "36",
          "credentials": {
            "httpBasicAuth": {
              "id": "1",
              "name": "Hospital API Credentials"
            }
          }
        },
        {
          "parameters": {
            "functionCode": "// Generate daily occupancy statistics report\nconst occupancyData = $input.item.json.data || $input.item.json;\n\n// Calculate hospital-wide statistics\nconst totalBeds = occupancyData.totalBeds || 0;\nconst occupiedBeds = occupancyData.occupiedBeds || 0;\nconst occupancyRate = (occupiedBeds / totalBeds * 100).toFixed(1);\n\n// Format date for report\nconst today = new Date().toLocaleDateString('en-US', {\n  weekday: 'long',\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric'\n});\n\n// Generate email subject and body\nconst subject = `Hospital Occupancy Report - ${today}`;\n\nlet body = `<h2>Hospital Occupancy Report - ${today}</h2>`;\nbody += `<p><strong>Overall Statistics:</strong></p>`;\nbody += `<ul>`;\nbody += `<li>Total Beds: ${totalBeds}</li>`;\nbody += `<li>Occupied Beds: ${occupiedBeds}</li>`;\nbody += `<li>Occupancy Rate: ${occupancyRate}%</li>`;\nbody += `</ul>`;\n\n// Add department breakdown\nbody += `<p><strong>Department Breakdown:</strong></p>`;\nbody += `<table border=\"1\" cellpadding=\"5\" style=\"border-collapse: collapse;\">`;\nbody += `<tr><th>Department</th><th>Total Beds</th><th>Occupied</th><th>Rate</th></tr>`;\n\nconst departments = occupancyData.departments || [];\ndepartments.forEach(dept => {\n  const deptRate = (dept.occupiedBeds / dept.totalBeds * 100).toFixed(1);\n  body += `<tr><td>${dept.name}</td><td>${dept.totalBeds}</td><td>${dept.occupiedBeds}</td><td>${deptRate}%</td></tr>`;\n});\n\nbody += `</table>`;\n\n// Add trends\nbody += `<p><strong>7-Day Trend:</strong></p>`;\nbody += `<p>Average Occupancy: ${occupancyData.weeklyAverage || 'N/A'}%</p>`;\n\n// Add notes or alerts\nif (occupancyData.alerts && occupancyData.alerts.length > 0) {\n  body += `<p><strong>Alerts:</strong></p>`;\n  body += `<ul>`;\n  occupancyData.alerts.forEach(alert => {\n    body += `<li>${alert}</li>`;\n  });\n  body += `</ul>`;\n}\n\nbody += `<p><em>This report was automatically generated by the Hospital IoT System.</em></p>`;\n\nreturn {\n  json: {\n    reportType: 'daily_occupancy',\n    timestamp: new Date().toISOString(),\n    subject: subject,\n    body: body,\n    statistics: {\n      date: today,\n      totalBeds,\n      occupiedBeds,\n      occupancyRate: parseFloat(occupancyRate),\n      departmentBreakdown: departments\n    }\n  }\n};"
          },
          "name": "Generate Daily Occupancy Report",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            900
          ],
          "id": "37"
        },
        {
          "parameters": {
            "fromEmail": "hospital-system@example.com",
            "toEmail": "hospital-management@example.com",
            "subject": "={{ $json.subject }}",
            "html": "={{ $json.body }}",
            "options": {
              "ccEmail": "department-heads@example.com"
            }
          },
          "name": "Send Daily Occupancy Email",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            1100,
            900
          ],
          "id": "38",
          "credentials": {
            "smtp": {
              "id": "3",
              "name": "Email Account"
            }
          }
        },
        {
          "parameters": {
            "method": "GET",
            "url": "https://hospital-api.example.com/api/analytics/monthly",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpBasicAuth",
            "options": {}
          },
          "name": "Fetch Monthly Resource Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            700,
            1100
          ],
          "id": "39",
          "credentials": {
            "httpBasicAuth": {
              "id": "1",
              "name": "Hospital API Credentials"
            }
          }
        },
        {
          "parameters": {
            "functionCode": "// Generate monthly resource optimization report\nconst resourceData = $input.item.json.data || $input.item.json;\n\n// Format date for report\nconst date = new Date();\nconst monthName = date.toLocaleString('default', { month: 'long' });\nconst year = date.getFullYear();\n\n// Generate email subject and body\nconst subject = `Monthly Resource Optimization Report - ${monthName} ${year}`;\n\nlet body = `<h2>Resource Optimization Report - ${monthName} ${year}</h2>`;\n\n// Bed utilization section\nbody += `<h3>Bed Utilization</h3>`;\nbody += `<p>Average Occupancy Rate: ${resourceData.bedUtilization.averageOccupancy || 'N/A'}%</p>`;\nbody += `<p>Peak Occupancy: ${resourceData.bedUtilization.peakOccupancy || 'N/A'}% (${resourceData.bedUtilization.peakDate || 'N/A'})</p>`;\nbody += `<p>Low Occupancy: ${resourceData.bedUtilization.lowOccupancy || 'N/A'}% (${resourceData.bedUtilization.lowDate || 'N/A'})</p>`;\n\n// Equipment utilization section\nbody += `<h3>Equipment Utilization</h3>`;\nbody += `<table border=\"1\" cellpadding=\"5\" style=\"border-collapse: collapse;\">`;\nbody += `<tr><th>Equipment Type</th><th>Total Units</th><th>Avg. Daily Usage</th><th>Utilization Rate</th><th>Maintenance Events</th></tr>`;\n\nconst equipmentTypes = resourceData.equipmentUtilization || [];\nequipmentTypes.forEach(equip => {\n  body += `<tr><td>${equip.type}</td><td>${equip.totalUnits}</td><td>${equip.avgDailyUsage}</td><td>${equip.utilizationRate}%</td><td>${equip.maintenanceEvents}</td></tr>`;\n});\n\nbody += `</table>`;\n\n// Optimization recommendations\nbody += `<h3>Optimization Recommendations</h3>`;\nbody += `<ul>`;\n\nconst recommendations = resourceData.recommendations || [];\nrecommendations.forEach(rec => {\n  body += `<li><strong>${rec.category}:</strong> ${rec.description} (Potential Savings: ${rec.potentialSavings})</li>`;\n});\n\nbody += `</ul>`;\n\n// Environmental metrics\nbody += `<h3>Environmental Metrics</h3>`;\nbody += `<p>Average Temperature: ${resourceData.environmental.avgTemperature || 'N/A'}°C</p>`;\nbody += `<p>Average Humidity: ${resourceData.environmental.avgHumidity || 'N/A'}%</p>`;\nbody += `<p>Energy Usage: ${resourceData.environmental.energyUsage || 'N/A'} kWh</p>`;\n\n// Summary\nbody += `<h3>Summary</h3>`;\nbody += `<p>${resourceData.summary || 'No summary available.'}</p>`;\n\nbody += `<p><em>This report was automatically generated by the Hospital IoT System.</em></p>`;\n\nreturn {\n  json: {\n    reportType: 'monthly_resource_optimization',\n    timestamp: new Date().toISOString(),\n    subject: subject,\n    body: body,\n    monthYear: `${monthName} ${year}`,\n    data: resourceData\n  }\n};"
          },
          "name": "Generate Monthly Resource Report",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            1100
          ],
          "id": "40"
        },
        {
          "parameters": {
            "fromEmail": "hospital-system@example.com",
            "toEmail": "hospital-management@example.com",
            "subject": "={{ $json.subject }}",
            "html": "={{ $json.body }}",
            "options": {
              "ccEmail": "finance@example.com,operations@example.com"
            }
          },
          "name": "Send Monthly Resource Email",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            1100,
            1100
          ],
          "id": "41",
          "credentials": {
            "smtp": {
              "id": "3",
              "name": "Email Account"
            }
          }
        },
        {
          "parameters": {
            "method": "GET",
            "url": "https://hospital-api.example.com/api/security/visitor-density",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpBasicAuth",
            "options": {}
          },
          "name": "Fetch Visitor Density Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            700,
            1300
          ],
          "id": "42",
          "credentials": {
            "httpBasicAuth": {
              "id": "1",
              "name": "Hospital API Credentials"
            }
          }
        },
        {
          "parameters": {
            "functionCode": "// Analyze visitor density data\nconst visitorData = $input.item.json.data || $input.item.json;\n\n// Set thresholds for different areas\nconst thresholds = {\n  lobby: 50,\n  cafeteria: 100,\n  generalWards: 30,\n  icu: 10,\n  emergency: 25,\n  corridors: 40\n};\n\n// Check each area against thresholds\nconst areas = visitorData.areas || [];\nconst areasOverThreshold = [];\n\nareas.forEach(area => {\n  const threshold = thresholds[area.type] || 30; // default threshold\n  if (area.visitorCount > threshold) {\n    areasOverThreshold.push({\n      name: area.name,\n      type: area.type,\n      visitorCount: area.visitorCount,\n      threshold: threshold,\n      percentOverThreshold: Math.round((area.visitorCount - threshold) / threshold * 100)\n    });\n  }\n});\n\n// Generate alert if any areas are over threshold\nconst hasAlert = areasOverThreshold.length > 0;\nlet alertMessage = '';\n\nif (hasAlert) {\n  alertMessage = `VISITOR DENSITY ALERT: ${areasOverThreshold.length} areas exceed safe visitor density thresholds:\\n\\n`;\n  \n  areasOverThreshold.forEach(area => {\n    alertMessage += `${area.name} (${area.type}): ${area.visitorCount} visitors (${area.percentOverThreshold}% over threshold)\\n`;\n  });\n  \n  alertMessage += `\\nPlease dispatch security personnel to manage crowd levels.`;\n}\n\nreturn {\n  json: {\n    timestamp: new Date().toISOString(),\n    hasAlert: hasAlert,\n    alertMessage: alertMessage,\n    areasOverThreshold: areasOverThreshold,\n    totalVisitors: visitorData.totalVisitors || 0,\n    allAreas: areas\n  }\n};"
          },
          "name": "Analyze Visitor Density",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            1300
          ],
          "id": "43"
        },
        {
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{$json.hasAlert}}",
                  "value2": true
                }
              ]
            }
          },
          "name": "Visitor Density Alert?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1100,
            1300
          ],
          "id": "44"
        },
        {
          "parameters": {
            "fromPhoneNumber": "{{ $node[\"Set SMS Parameters\"].json.fromNumber }}",
            "toPhoneNumber": "{{ $node[\"Set SMS Parameters\"].json.securityTeamNumber }}",
            "message": "={{ $json.alertMessage }}",
            "options": {}
          },
          "name": "Send Visitor Density Alert SMS",
          "type": "n8n-nodes-base.twilio",
          "typeVersion": 1,
          "position": [
            1300,
            1300
          ],
          "id": "45",
          "credentials": {
            "twilioApi": {
              "id": "2",
              "name": "Twilio Account"
            }
          }
        },
        {
          "parameters": {
            "batchSize": 10,
            "options": {}
          },
          "name": "Merge All Features",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            1900,
            700
          ],
          "id": "46"
        },
        {
          "parameters": {
            "functionCode": "// Log all system activity\nconst data = $input.item.json;\nconst timestamp = new Date().toISOString();\nconst logType = data.trackingType || data.reportType || data.notificationType || 'system_activity';\n\n// Create structured log entry\nconst logEntry = {\n  timestamp,\n  logType,\n  data: data,\n  source: data.source || 'iot_system',\n  success: true\n};\n\n// Return log entry for storage\nreturn {\n  json: {\n    logEntry,\n    timestamp,\n    summary: `Logged ${logType} activity at ${timestamp}`\n  }\n};"
          },
          "name": "Create System Log Entry",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            2100,
            700
          ],
          "id": "47"
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://hospital-api.example.com/api/system/logs",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpBasicAuth",
            "sendBody": true,
            "bodyParameters": {
              "parameters": [
                {
                  "name": "logEntry",
                  "value": "={{$json.logEntry}}"
                }
              ]
            }
          },
          "name": "Store Log in Database",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            2300,
            700
          ],
          "id": "48",
          "credentials": {
            "httpBasicAuth": {
              "id": "1",
              "name": "Hospital API Credentials"
            }
          }
        },
        {
          "parameters": {},
          "name": "Error Trigger",
          "type": "n8n-nodes-base.errorTrigger",
          "typeVersion": 1,
          "position": [
            100,
            1500
          ],
          "id": "49"
        },
        {
          "parameters": {
            "functionCode": "// Process workflow error\nconst error = $input.item.json.error;\n\n// Create error message\nconst errorMessage = `ERROR in Hospital IoT System: ${error.message || 'Unknown error'}\\n` +\n                   `Workflow: ${error.workflow.name || 'Unknown workflow'}\\n` +\n                   `Node: ${error.node.name || 'Unknown node'}\\n` +\n                   `Timestamp: ${new Date().toISOString()}\\n\\n` +\n                   `Error Details: ${error.description || error.message || 'No details available'}\\n\\n` +\n                   `This error requires immediate attention.`;\n\n// Determine error severity\nlet severity = 'medium';\nif (error.node.name.toLowerCase().includes('critical') || \n    error.message.toLowerCase().includes('critical') ||\n    error.workflow.name.toLowerCase().includes('emergency')) {\n  severity = 'high';\n}\n\nreturn {\n  json: {\n    errorMessage,\n    errorDetails: error,\n    severity,\n    timestamp: new Date().toISOString()\n  }\n};"
          },
          "name": "Process Error",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            1500
          ],
          "id": "50"
        },
        {
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{$json.severity}}",
                  "value2": "high"
                }
              ]
            }
          },
          "name": "Is Critical Error?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            500,
            1500
          ],
          "id": "51"
        },
        {
          "parameters": {
            "fromPhoneNumber": "{{ $node[\"Set SMS Parameters\"].json.fromNumber }}",
            "toPhoneNumber": "+15551234567",
            "message": "={{ $json.errorMessage }}",
            "options": {}
          },
          "name": "Send Critical Error SMS",
          "type": "n8n-nodes-base.twilio",
          "typeVersion": 1,
          "position": [
            700,
            1400
          ],
          "id": "52",
          "credentials": {
            "twilioApi": {
              "id": "2",
              "name": "Twilio Account"
            }
          }
        },
        {
          "parameters": {
            "fromEmail": "hospital-system@example.com",
            "toEmail": "it-support@example.com",
            "subject": "=Hospital IoT System Error - {{$json.severity}} Severity",
            "text": "={{ $json.errorMessage }}",
            "options": {}
          },
          "name": "Send Error Email",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            700,
            1600
          ],
          "id": "53",
          "credentials": {
            "smtp": {
              "id": "3",
              "name": "Email Account"
            }
          }
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://hospital-api.example.com/api/system/errors",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpBasicAuth",
            "sendBody": true,
            "bodyParameters": {
              "parameters": [
                {
                  "name": "error",
                  "value": "={{$json.errorDetails}}"
                },
                {
                  "name": "severity",
                  "value": "={{$json.severity}}"
                },
                {
                  "name": "timestamp",
                  "value": "={{$json.timestamp}}"
                }
              ]
            }
          },
          "name": "Log Error in Database",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            900,
            1500
          ],
          "id": "54",
          "credentials": {
            "httpBasicAuth": {
              "id": "1",
              "name": "Hospital API Credentials"
            }
          }
        }
      ],
      "connections": {
        "Periodic Monitoring Trigger": {
          "main": [
            [
              {
                "node": "Set Cron Source",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Bed Status MQTT Trigger": {
          "main": [
            [
              {
                "node": "Classify Incoming Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Equipment Location MQTT Trigger": {
          "main": [
            [
              {
                "node": "Classify Incoming Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Environmental Sensors MQTT Trigger": {
          "main": [
            [
              {
                "node": "Classify Incoming Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Classify Incoming Data": {
          "main": [
            [
              {
                "node": "Route by Data Type",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Route by Data Type": {
          "main": [
            [
              {
                "node": "Process Bed Occupancy Data",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Process Equipment Location Data",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Process Environmental Data",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Determine Scheduled Task",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Set Cron Source": {
          "main": [
            [
              {
                "node": "Classify Incoming Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Bed Occupancy Data": {
          "main": [
            [
              {
                "node": "Update Bed Status in Database",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Update Bed Status in Database": {
          "main": [
            [
              {
                "node": "Is Emergency Room?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Emergency Room?": {
          "main": [
            [
              {
                "node": "Tag for ER Reporting",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Needs Cleaning?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Tag for ER Reporting": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Needs Cleaning?": {
          "main": [
            [
              {
                "node": "Create Cleaning Task",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 1
              }
            ]
          ]
        },
        "Create Cleaning Task": {
          "main": [
            [
              {
                "node": "Assign to Cleaning Team",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Assign to Cleaning Team": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 2
              }
            ]
          ]
        },
        "Process Equipment Location Data": {
          "main": [
            [
              {
                "node": "Update Equipment Location in Database",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Update Equipment Location in Database": {
          "main": [
            [
              {
                "node": "Is Critical Equipment?",
                "type": "main",
                "index": 0
              },
              {
                "node": "Needs Maintenance?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Critical Equipment?": {
          "main": [
            [
              {
                "node": "Tag for Critical Equipment Tracking",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 3
              }
            ]
          ]
        },
        "Tag for Critical Equipment Tracking": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 4
              }
            ]
          ]
        },
        "Needs Maintenance?": {
          "main": [
            [
              {
                "node": "Create Maintenance Notification",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 5
              }
            ]
          ]
        },
        "Create Maintenance Notification": {
          "main": [
            [
              {
                "node": "Set SMS Parameters",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Maintenance SMS": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 6
              }
            ]
          ]
        },
        "Set SMS Parameters": {
          "main": [
            [
              {
                "node": "Send Maintenance SMS",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Environmental Data": {
          "main": [
            [
              {
                "node": "Update Environmental Data in Database",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Update Environmental Data in Database": {
          "main": [
            [
              {
                "node": "Has Environmental Issues?",
                "type": "main",
                "index": 0
              },
              {
                "node": "High Infection Risk?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Has Environmental Issues?": {
          "main": [
            [
              {
                "node": "Send Environmental Control Commands",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 7
              }
            ]
          ]
        },
        "Send Environmental Control Commands": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 8
              }
            ]
          ]
        },
        "High Infection Risk?": {
          "main": [
            [
              {
                "node": "Create Infection Risk Alert",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 9
              }
            ]
          ]
        },
        "Create Infection Risk Alert": {
          "main": [
            [
              {
                "node": "Send Infection Risk SMS",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Infection Risk SMS": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 10
              }
            ]
          ]
        },
        "ER Report Trigger": {
          "main": [
            [
              {
                "node": "Fetch ER Occupancy Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Determine Scheduled Task": {
          "main": [
            [
              {
                "node": "Route Scheduled Task",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Route Scheduled Task": {
          "main": [
            [
              {
                "node": "Fetch ER Occupancy Data",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Fetch Daily Occupancy Data",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Fetch Monthly Resource Data",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Fetch Visitor Density Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch ER Occupancy Data": {
          "main": [
            [
              {
                "node": "Generate ER Occupancy Report",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Generate ER Occupancy Report": {
          "main": [
            [
              {
                "node": "Send ER Occupancy SMS",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send ER Occupancy SMS": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 11
              }
            ]
          ]
        },
        "Fetch Daily Occupancy Data": {
          "main": [
            [
              {
                "node": "Generate Daily Occupancy Report",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Generate Daily Occupancy Report": {
          "main": [
            [
              {
                "node": "Send Daily Occupancy Email",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Daily Occupancy Email": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 12
              }
            ]
          ]
        },
        "Fetch Monthly Resource Data": {
          "main": [
            [
              {
                "node": "Generate Monthly Resource Report",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Generate Monthly Resource Report": {
          "main": [
            [
              {
                "node": "Send Monthly Resource Email",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Monthly Resource Email": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 13
              }
            ]
          ]
        },
        "Fetch Visitor Density Data": {
          "main": [
            [
              {
                "node": "Analyze Visitor Density",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Analyze Visitor Density": {
          "main": [
            [
              {
                "node": "Visitor Density Alert?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Visitor Density Alert?": {
          "main": [
            [
              {
                "node": "Send Visitor Density Alert SMS",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 14
              }
            ]
          ]
        },
        "Send Visitor Density Alert SMS": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 15
              }
            ]
          ]
        },
        "Merge All Features": {
          "main": [
            [
              {
                "node": "Create System Log Entry",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create System Log Entry": {
          "main": [
            [
              {
                "node": "Store Log in Database",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Error Trigger": {
          "main": [
            [
              {
                "node": "Process Error",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Error": {
          "main": [
            [
              {
                "node": "Is Critical Error?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Critical Error?": {
          "main": [
            [
              {
                "node": "Send Critical Error SMS",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Send Error Email",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Critical Error SMS": {
          "main": [
            [
              {
                "node": "Log Error in Database",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Error Email": {
          "main": [
            [
              {
                "node": "Log Error in Database",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      }
    },
    "provider": "anthropic",
    "model": "claude-3-7-sonnet-20250219",
    "timestamp": "2025-07-20T07:27:44.617Z",
    "nodeCount": 54,
    "connectionCount": 52
  },
  {
    "id": "173a2d18-321a-4488-bcac-c8c8b036f50d",
    "prompt": "To create a comprehensive n8n workflow for managing an agricultural spraying drone fleet, we need to ensure that all features are interconnected through a central orchestration system. Here's a detailed node-by-node plan with specified connections, conditional logic, and error handling:\n\n### 1. **Set up Workflow Trigger**\n- **Node:** n8n-nodes-base.cron\n  - **Purpose:** Initiates the workflow on a scheduled basis (e.g., daily at a specific time).\n\n### 2. **Drone Telemetry Data Collection**\n- **Node:** n8n-nodes-base.mqtt\n  - **Purpose:** Collects telemetry data from drones via an MQTT broker for real-time monitoring.\n\n### 3. **Central Router for Task Automation**\n- **Node:** n8n-nodes-base.switch\n  - **Purpose:** Routes data to specific branches based on task requirements (e.g., telemetry processing, weather data handling).\n\n### 4. **Automatic Route Data Based on GPS Coordinates**\n- **Node:** n8n-nodes-base.function\n  - **Purpose:** Processes GPS data to determine optimal routes.\n  - **Connection:** Switch Node -> Function Node (for GPS processing)\n\n### 5. **Weather Station Sensor Reading**\n- **Node:** n8n-nodes-raspberry.raspberryPi\n  - **Purpose:** Reads data from weather station sensors to monitor conditions.\n  - **Connection:** Switch Node -> Raspberry Pi Node\n\n### 6. **Automatic Landing Protocol**\n- **Node:** n8n-nodes-base.function\n  - **Purpose:** Checks wind speed and triggers automatic landing if it exceeds safe thresholds.\n  - **Connection:** Raspberry Pi Node -> Function Node (for wind speed check)\n\n### 7. **SMS Alerts for Low Battery**\n- **Node:** n8n-nodes-base.twilio\n  - **Purpose:** Sends SMS alerts when drones report low battery levels.\n  - **Connection:** MQTT Node -> Twilio Node\n  - **Conditional Logic:** IF battery level < threshold, THEN send SMS\n\n### 8. **Save Flight Records**\n- **Node:** n8n-nodes-base.postgres\n  - **Purpose:** Saves flight data for each drone in a PostgreSQL database.\n  - **Connection:** MQTT Node -> PostgreSQL Node\n\n### 9. **Generate Daily Spraying Maps and Send Emails**\n- **Node:** n8n-nodes-base.googleDrive\n  - **Purpose:** Generates and stores daily spraying maps.\n  - **Node:** n8n-nodes-base.emailSend\n  - **Purpose:** Sends the maps via email.\n  - **Connection:** Function Node (GPS) -> Google Drive Node -> Email Send Node\n\n### 10. **Drone Maintenance Schedule**\n- **Node:** n8n-nodes-base.cron\n  - **Purpose:** Triggers maintenance checks on a regular schedule.\n- **Node:** n8n-nodes-base.whatsappBusiness\n  - **Purpose:** Notifies technicians of upcoming maintenance.\n  - **Connection:** Cron Node (maintenance) -> WhatsApp Business Node\n\n### 11. **Emergency Protocol for Signal Loss**\n- **Node:** n8n-nodes-base.errorTrigger\n  - **Purpose:** Captures signal loss errors and triggers emergency protocols.\n  - **Connection:** Any critical node -> Error Trigger Node\n\n### 12. **Weekly Productivity Performance via WhatsApp**\n- **Node:** n8n-nodes-base.whatsappBusiness\n  - **Purpose:** Sends a summary of productivity performance weekly.\n  - **Connection:** Cron Node (weekly) -> WhatsApp Business Node\n\n### 13. **Merge Node for Parallel Branches**\n- **Node:** n8n-nodes-base.merge\n  - **Purpose:** Combines results from parallel branches (e.g., telemetry, weather, route data).\n  - **Connection:** Function Node (for GPS) + Twilio Node + PostgreSQL Node + Email Send Node + WhatsApp Business Node -> Merge Node\n\n### 14. **Final Processing and Response**\n- **Node:** n8n-nodes-base.function\n  - **Purpose:** Finalizes the workflow and logs the overall status.\n  - **Connection:** Merge Node -> Function Node (Final Processing)\n\n### Error Handling\n- Ensure every external API call includes error handling with retries and notifications.\n- Use the Error Trigger node to catch and handle unexpected failures gracefully.\n\n### Validation Checklist\n☑ All nodes are connected (no orphaned nodes)\n☑ Merge nodes follow all parallel branches\n☑ IF nodes have both true/false paths connected\n☑ Proper error handling exists for all critical operations\n☑ Data flows logically between nodes\n☑ Notification channels are tested\n☑ Timing and conditions are appropriately considered\n\nThis workflow ensures all critical features are orchestrated together, providing a robust solution for drone fleet management and task automation.",
    "workflow": {
      "name": "Agricultural Spraying Drone Fleet Management",
      "nodes": [
        {
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "hours",
                  "hour": 6
                }
              ]
            }
          },
          "name": "Daily Operations Trigger",
          "type": "n8n-nodes-base.cron",
          "typeVersion": 1,
          "position": [
            100,
            300
          ],
          "id": "1"
        },
        {
          "parameters": {
            "topics": [
              {
                "topic": "drones/+/telemetry"
              }
            ],
            "options": {
              "clientId": "n8n-drone-fleet-manager",
              "username": "={{ $env.MQTT_USERNAME }}",
              "password": "={{ $env.MQTT_PASSWORD }}",
              "keepalive": 30
            },
            "url": "={{ $env.MQTT_BROKER_URL }}"
          },
          "name": "Collect Drone Telemetry",
          "type": "n8n-nodes-base.mqtt",
          "typeVersion": 1,
          "position": [
            300,
            300
          ],
          "id": "2"
        },
        {
          "parameters": {
            "dataType": "string",
            "value1": "={{ $json.messageType }}",
            "rules": {
              "rules": [
                {
                  "value2": "telemetry",
                  "output": 0
                },
                {
                  "value2": "gps",
                  "output": 1
                },
                {
                  "value2": "battery",
                  "output": 2
                },
                {
                  "value2": "error",
                  "output": 3
                }
              ]
            },
            "fallbackOutput": 4
          },
          "name": "Route Drone Data",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            500,
            300
          ],
          "id": "3"
        },
        {
          "parameters": {
            "jsCode": "// Process telemetry data\nconst telemetry = $input.item.json;\n\n// Extract key metrics\nconst droneId = telemetry.droneId;\nconst altitude = telemetry.altitude;\nconst speed = telemetry.speed;\nconst heading = telemetry.heading;\nconst batteryLevel = telemetry.batteryLevel;\nconst signalStrength = telemetry.signalStrength;\nconst timestamp = telemetry.timestamp || new Date().toISOString();\n\n// Add derived metrics\ntelemetry.processingTime = new Date().toISOString();\ntelemetry.isLowBattery = batteryLevel < 20;\ntelemetry.isLowSignal = signalStrength < 30;\n\nreturn {json: telemetry};"
          },
          "name": "Process Telemetry Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            200
          ],
          "id": "4"
        },
        {
          "parameters": {
            "jsCode": "// Process GPS coordinates for route optimization\nconst gpsData = $input.item.json;\n\n// Extract coordinates\nconst droneId = gpsData.droneId;\nconst latitude = gpsData.latitude;\nconst longitude = gpsData.longitude;\nconst timestamp = gpsData.timestamp || new Date().toISOString();\n\n// Calculate field coverage based on current position\nconst fieldBoundaries = {\n  north: 34.052235,\n  south: 34.048765,\n  east: -118.242683,\n  west: -118.245323\n};\n\n// Check if drone is within field boundaries\nconst isInField = \n  latitude <= fieldBoundaries.north && \n  latitude >= fieldBoundaries.south && \n  longitude <= fieldBoundaries.east && \n  longitude >= fieldBoundaries.west;\n\n// Calculate optimal next waypoint based on current position\n// This is a simplified example - in production, you'd use more sophisticated algorithms\nconst nextWaypoint = {\n  latitude: latitude + 0.0001,\n  longitude: longitude + 0.0001\n};\n\nreturn {\n  json: {\n    droneId,\n    currentPosition: { latitude, longitude },\n    timestamp,\n    isInField,\n    nextWaypoint,\n    routeComplete: !isInField,\n    routeOptimization: \"standard\",\n    estimatedTimeToComplete: 15 // minutes\n  }\n};"
          },
          "name": "Process GPS & Generate Routes",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            300
          ],
          "id": "5"
        },
        {
          "parameters": {
            "jsCode": "// Process battery data and determine if alert is needed\nconst batteryData = $input.item.json;\n\n// Extract battery info\nconst droneId = batteryData.droneId;\nconst batteryLevel = batteryData.batteryLevel;\nconst batteryTemp = batteryData.batteryTemp;\nconst timestamp = batteryData.timestamp || new Date().toISOString();\n\n// Battery status assessment\nconst isCritical = batteryLevel < 10;\nconst isLow = batteryLevel < 20;\nconst isHighTemp = batteryTemp > 40; // Celsius\n\n// Calculate estimated remaining flight time\nconst estimatedMinutesRemaining = batteryLevel * 0.3; // Simplified calculation\n\n// Determine if we need to send an alert\nconst needsAlert = isCritical || (isLow && isHighTemp);\n\n// Determine if we need to trigger landing\nconst needsLanding = batteryLevel < 8;\n\nreturn {\n  json: {\n    droneId,\n    batteryLevel,\n    batteryTemp,\n    timestamp,\n    isCritical,\n    isLow,\n    isHighTemp,\n    estimatedMinutesRemaining,\n    needsAlert,\n    needsLanding,\n    alertMessage: needsAlert ? `ALERT: Drone ${droneId} battery at ${batteryLevel}% - Est. ${Math.round(estimatedMinutesRemaining)} minutes remaining` : \"\"\n  }\n};"
          },
          "name": "Process Battery Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            400
          ],
          "id": "6"
        },
        {
          "parameters": {
            "jsCode": "// Process error data from drones\nconst errorData = $input.item.json;\n\n// Extract error info\nconst droneId = errorData.droneId;\nconst errorCode = errorData.errorCode;\nconst errorMessage = errorData.errorMessage;\nconst timestamp = errorData.timestamp || new Date().toISOString();\n\n// Error severity classification\nlet severity;\nlet requiresImmediate = false;\nlet actionRequired = \"\";\n\nswitch(errorCode) {\n  case \"E001\": // Signal loss\n    severity = \"CRITICAL\";\n    requiresImmediate = true;\n    actionRequired = \"Initiate emergency landing protocol\";\n    break;\n  case \"E002\": // GPS malfunction\n    severity = \"HIGH\";\n    requiresImmediate = true;\n    actionRequired = \"Return to home\";\n    break;\n  case \"E003\": // Sprayer malfunction\n    severity = \"MEDIUM\";\n    requiresImmediate = false;\n    actionRequired = \"Complete current section and return for maintenance\";\n    break;\n  case \"E004\": // Camera malfunction\n    severity = \"LOW\";\n    requiresImmediate = false;\n    actionRequired = \"Schedule maintenance after mission\";\n    break;\n  default:\n    severity = \"UNKNOWN\";\n    requiresImmediate = true;\n    actionRequired = \"Operator review required\";\n}\n\n// Format alert message\nconst alertMessage = `ERROR [${severity}]: Drone ${droneId} - ${errorMessage} (${errorCode}). ${actionRequired}`;\n\nreturn {\n  json: {\n    droneId,\n    errorCode,\n    errorMessage,\n    timestamp,\n    severity,\n    requiresImmediate,\n    actionRequired,\n    alertMessage\n  }\n};"
          },
          "name": "Process Error Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            500
          ],
          "id": "7"
        },
        {
          "parameters": {
            "jsCode": "// Process other message types or handle unknown formats\nconst data = $input.item.json;\n\n// Add processing timestamp\ndata.processingTime = new Date().toISOString();\ndata.processingNote = \"Unrecognized message format\";\n\nreturn {json: data};"
          },
          "name": "Process Other Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            600
          ],
          "id": "8"
        },
        {
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $json.needsAlert }}",
                  "value2": true
                }
              ]
            }
          },
          "name": "Check If Battery Alert Needed",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            900,
            400
          ],
          "id": "9"
        },
        {
          "parameters": {
            "accountSid": "={{ $env.TWILIO_ACCOUNT_SID }}",
            "authToken": "={{ $env.TWILIO_AUTH_TOKEN }}",
            "from": "={{ $env.TWILIO_FROM_NUMBER }}",
            "to": "={{ $env.DRONE_OPERATOR_PHONE }}",
            "message": "={{ $json.alertMessage }}"
          },
          "name": "Send Battery Alert SMS",
          "type": "n8n-nodes-base.twilio",
          "typeVersion": 1,
          "position": [
            1100,
            350
          ],
          "id": "10"
        },
        {
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $json.needsLanding }}",
                  "value2": true
                }
              ]
            }
          },
          "name": "Check If Emergency Landing Needed",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1100,
            450
          ],
          "id": "11"
        },
        {
          "parameters": {
            "url": "={{ $env.DRONE_CONTROL_API }}/emergency-landing",
            "options": {
              "method": "POST",
              "body": {
                "droneId": "={{ $json.droneId }}",
                "reason": "Low battery emergency landing",
                "timestamp": "={{ $json.timestamp }}",
                "batteryLevel": "={{ $json.batteryLevel }}",
                "requestedBy": "Fleet Management System"
              },
              "headers": {
                "Content-Type": "application/json",
                "Authorization": "Bearer {{ $env.DRONE_API_KEY }}"
              }
            }
          },
          "name": "Trigger Emergency Landing",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            1300,
            450
          ],
          "id": "12"
        },
        {
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $json.requiresImmediate }}",
                  "value2": true
                }
              ]
            }
          },
          "name": "Check If Immediate Action Required",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            900,
            500
          ],
          "id": "13"
        },
        {
          "parameters": {
            "accountSid": "={{ $env.TWILIO_ACCOUNT_SID }}",
            "authToken": "={{ $env.TWILIO_AUTH_TOKEN }}",
            "from": "={{ $env.TWILIO_FROM_NUMBER }}",
            "to": "={{ $env.DRONE_TECHNICIAN_PHONE }}",
            "message": "={{ $json.alertMessage }}"
          },
          "name": "Send Error Alert SMS",
          "type": "n8n-nodes-base.twilio",
          "typeVersion": 1,
          "position": [
            1100,
            500
          ],
          "id": "14"
        },
        {
          "parameters": {
            "url": "={{ $env.DRONE_CONTROL_API }}/emergency-protocol",
            "options": {
              "method": "POST",
              "body": {
                "droneId": "={{ $json.droneId }}",
                "errorCode": "={{ $json.errorCode }}",
                "errorMessage": "={{ $json.errorMessage }}",
                "actionRequired": "={{ $json.actionRequired }}",
                "timestamp": "={{ $json.timestamp }}"
              },
              "headers": {
                "Content-Type": "application/json",
                "Authorization": "Bearer {{ $env.DRONE_API_KEY }}"
              }
            }
          },
          "name": "Trigger Emergency Protocol",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            1300,
            500
          ],
          "id": "15"
        },
        {
          "parameters": {
            "operation": "insert",
            "schema": "drone_operations",
            "table": "telemetry_logs",
            "columns": "droneId, altitude, speed, heading, batteryLevel, signalStrength, timestamp, isLowBattery, isLowSignal",
            "additionalFields": {
              "mode": "raw",
              "value": "={{ \n  {\n    droneId: $json.droneId,\n    altitude: $json.altitude,\n    speed: $json.speed,\n    heading: $json.heading,\n    batteryLevel: $json.batteryLevel,\n    signalStrength: $json.signalStrength,\n    timestamp: $json.timestamp,\n    isLowBattery: $json.isLowBattery,\n    isLowSignal: $json.isLowSignal\n  }\n }}"
            }
          },
          "name": "Save Telemetry to Database",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [
            900,
            200
          ],
          "id": "16",
          "credentials": {
            "postgres": {
              "id": "postgres-credentials",
              "name": "Postgres Account"
            }
          }
        },
        {
          "parameters": {
            "operation": "insert",
            "schema": "drone_operations",
            "table": "gps_logs",
            "columns": "droneId, latitude, longitude, timestamp, isInField, routeComplete",
            "additionalFields": {
              "mode": "raw",
              "value": "={{ \n  {\n    droneId: $json.droneId,\n    latitude: $json.currentPosition.latitude,\n    longitude: $json.currentPosition.longitude,\n    timestamp: $json.timestamp,\n    isInField: $json.isInField,\n    routeComplete: $json.routeComplete\n  }\n }}"
            }
          },
          "name": "Save GPS Data to Database",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [
            900,
            300
          ],
          "id": "17",
          "credentials": {
            "postgres": {
              "id": "postgres-credentials",
              "name": "Postgres Account"
            }
          }
        },
        {
          "parameters": {
            "operation": "insert",
            "schema": "drone_operations",
            "table": "battery_logs",
            "columns": "droneId, batteryLevel, batteryTemp, timestamp, alertSent, landingTriggered",
            "additionalFields": {
              "mode": "raw",
              "value": "={{ \n  {\n    droneId: $json.droneId,\n    batteryLevel: $json.batteryLevel,\n    batteryTemp: $json.batteryTemp,\n    timestamp: $json.timestamp,\n    alertSent: $json.needsAlert,\n    landingTriggered: $json.needsLanding\n  }\n }}"
            }
          },
          "name": "Save Battery Data to Database",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [
            1300,
            400
          ],
          "id": "18",
          "credentials": {
            "postgres": {
              "id": "postgres-credentials",
              "name": "Postgres Account"
            }
          }
        },
        {
          "parameters": {
            "operation": "insert",
            "schema": "drone_operations",
            "table": "error_logs",
            "columns": "droneId, errorCode, errorMessage, severity, actionRequired, timestamp",
            "additionalFields": {
              "mode": "raw",
              "value": "={{ \n  {\n    droneId: $json.droneId,\n    errorCode: $json.errorCode,\n    errorMessage: $json.errorMessage,\n    severity: $json.severity,\n    actionRequired: $json.actionRequired,\n    timestamp: $json.timestamp\n  }\n }}"
            }
          },
          "name": "Save Error Data to Database",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [
            1500,
            500
          ],
          "id": "19",
          "credentials": {
            "postgres": {
              "id": "postgres-credentials",
              "name": "Postgres Account"
            }
          }
        },
        {
          "parameters": {
            "operation": "insert",
            "schema": "drone_operations",
            "table": "unknown_message_logs",
            "columns": "message, processingTime, processingNote",
            "additionalFields": {
              "mode": "raw",
              "value": "={{ \n  {\n    message: JSON.stringify($json),\n    processingTime: $json.processingTime,\n    processingNote: $json.processingNote\n  }\n }}"
            }
          },
          "name": "Save Unknown Data to Database",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [
            900,
            600
          ],
          "id": "20",
          "credentials": {
            "postgres": {
              "id": "postgres-credentials",
              "name": "Postgres Account"
            }
          }
        },
        {
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "hours",
                  "hour": 18
                }
              ]
            }
          },
          "name": "Daily Report Trigger",
          "type": "n8n-nodes-base.cron",
          "typeVersion": 1,
          "position": [
            100,
            800
          ],
          "id": "21"
        },
        {
          "parameters": {
            "operation": "executeQuery",
            "query": "SELECT \n  COUNT(DISTINCT droneId) as active_drones,\n  SUM(CASE WHEN batteryLevel < 20 THEN 1 ELSE 0 END) as low_battery_incidents,\n  AVG(batteryLevel) as avg_battery_level,\n  MIN(timestamp) as period_start,\n  MAX(timestamp) as period_end\nFROM drone_operations.battery_logs\nWHERE timestamp >= NOW() - INTERVAL '24 HOURS'"
          },
          "name": "Query Battery Stats",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [
            300,
            750
          ],
          "id": "22",
          "credentials": {
            "postgres": {
              "id": "postgres-credentials",
              "name": "Postgres Account"
            }
          }
        },
        {
          "parameters": {
            "operation": "executeQuery",
            "query": "SELECT \n  COUNT(*) as total_flights,\n  SUM(CASE WHEN routeComplete = true THEN 1 ELSE 0 END) as completed_routes,\n  COUNT(DISTINCT droneId) as active_drones\nFROM drone_operations.gps_logs\nWHERE timestamp >= NOW() - INTERVAL '24 HOURS'"
          },
          "name": "Query Flight Stats",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [
            300,
            850
          ],
          "id": "23",
          "credentials": {
            "postgres": {
              "id": "postgres-credentials",
              "name": "Postgres Account"
            }
          }
        },
        {
          "parameters": {
            "operation": "executeQuery",
            "query": "SELECT \n  COUNT(*) as total_errors,\n  COUNT(CASE WHEN severity = 'CRITICAL' THEN 1 END) as critical_errors,\n  COUNT(CASE WHEN severity = 'HIGH' THEN 1 END) as high_errors,\n  COUNT(CASE WHEN severity = 'MEDIUM' THEN 1 END) as medium_errors,\n  COUNT(CASE WHEN severity = 'LOW' THEN 1 END) as low_errors,\n  COUNT(DISTINCT droneId) as drones_with_errors\nFROM drone_operations.error_logs\nWHERE timestamp >= NOW() - INTERVAL '24 HOURS'"
          },
          "name": "Query Error Stats",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [
            300,
            950
          ],
          "id": "24",
          "credentials": {
            "postgres": {
              "id": "postgres-credentials",
              "name": "Postgres Account"
            }
          }
        },
        {
          "parameters": {
            "mode": "mergeByIndex"
          },
          "name": "Merge Daily Stats",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            500,
            850
          ],
          "id": "25"
        },
        {
          "parameters": {
            "jsCode": "// Create daily report from collected stats\nconst batteryStats = $input.item.json[0];\nconst flightStats = $input.item.json[1];\nconst errorStats = $input.item.json[2];\n\n// Format date for report\nconst today = new Date();\nconst dateStr = today.toLocaleDateString('en-US', { \n  weekday: 'long', \n  year: 'numeric', \n  month: 'long', \n  day: 'numeric' \n});\n\n// Calculate completion rate\nconst completionRate = flightStats.completed_routes / flightStats.total_flights * 100;\n\n// Generate HTML report\nconst htmlReport = `\n<!DOCTYPE html>\n<html>\n<head>\n  <style>\n    body { font-family: Arial, sans-serif; margin: 20px; }\n    h1 { color: #2c3e50; }\n    .stats-container { display: flex; flex-wrap: wrap; }\n    .stat-box { \n      background-color: #f8f9fa; \n      border-radius: 5px; \n      padding: 15px; \n      margin: 10px; \n      min-width: 200px; \n      box-shadow: 0 2px 4px rgba(0,0,0,0.1); \n    }\n    .stat-title { font-weight: bold; color: #7f8c8d; }\n    .stat-value { font-size: 24px; color: #2c3e50; margin: 10px 0; }\n    .good { color: #27ae60; }\n    .warning { color: #f39c12; }\n    .danger { color: #e74c3c; }\n  </style>\n</head>\n<body>\n  <h1>Agricultural Drone Fleet Daily Report - ${dateStr}</h1>\n  \n  <h2>Fleet Summary</h2>\n  <div class=\"stats-container\">\n    <div class=\"stat-box\">\n      <div class=\"stat-title\">Active Drones</div>\n      <div class=\"stat-value\">${flightStats.active_drones}</div>\n    </div>\n    <div class=\"stat-box\">\n      <div class=\"stat-title\">Total Flights</div>\n      <div class=\"stat-value\">${flightStats.total_flights}</div>\n    </div>\n    <div class=\"stat-box\">\n      <div class=\"stat-title\">Completed Routes</div>\n      <div class=\"stat-value\">${flightStats.completed_routes}</div>\n    </div>\n    <div class=\"stat-box\">\n      <div class=\"stat-title\">Completion Rate</div>\n      <div class=\"stat-value ${completionRate > 90 ? 'good' : completionRate > 70 ? 'warning' : 'danger'}\">\n        ${completionRate.toFixed(1)}%\n      </div>\n    </div>\n  </div>\n  \n  <h2>Battery Performance</h2>\n  <div class=\"stats-container\">\n    <div class=\"stat-box\">\n      <div class=\"stat-title\">Average Battery Level</div>\n      <div class=\"stat-value ${batteryStats.avg_battery_level > 50 ? 'good' : batteryStats.avg_battery_level > 30 ? 'warning' : 'danger'}\">\n        ${parseFloat(batteryStats.avg_battery_level).toFixed(1)}%\n      </div>\n    </div>\n    <div class=\"stat-box\">\n      <div class=\"stat-title\">Low Battery Incidents</div>\n      <div class=\"stat-value ${batteryStats.low_battery_incidents == 0 ? 'good' : batteryStats.low_battery_incidents < 3 ? 'warning' : 'danger'}\">\n        ${batteryStats.low_battery_incidents}\n      </div>\n    </div>\n  </div>\n  \n  <h2>Error Summary</h2>\n  <div class=\"stats-container\">\n    <div class=\"stat-box\">\n      <div class=\"stat-title\">Total Errors</div>\n      <div class=\"stat-value ${errorStats.total_errors == 0 ? 'good' : errorStats.total_errors < 5 ? 'warning' : 'danger'}\">\n        ${errorStats.total_errors}\n      </div>\n    </div>\n    <div class=\"stat-box\">\n      <div class=\"stat-title\">Critical Errors</div>\n      <div class=\"stat-value ${errorStats.critical_errors == 0 ? 'good' : 'danger'}\">\n        ${errorStats.critical_errors}\n      </div>\n    </div>\n    <div class=\"stat-box\">\n      <div class=\"stat-title\">High Priority Errors</div>\n      <div class=\"stat-value ${errorStats.high_errors == 0 ? 'good' : errorStats.high_errors < 3 ? 'warning' : 'danger'}\">\n        ${errorStats.high_errors}\n      </div>\n    </div>\n    <div class=\"stat-box\">\n      <div class=\"stat-title\">Drones With Errors</div>\n      <div class=\"stat-value\">${errorStats.drones_with_errors}</div>\n    </div>\n  </div>\n  \n  <p>This report was automatically generated by the Agricultural Drone Fleet Management System.</p>\n</body>\n</html>\n`;\n\n// Plain text summary for WhatsApp\nconst textSummary = `🚁 DRONE FLEET DAILY SUMMARY - ${dateStr}\\n\\n` +\n  `📊 OPERATIONS:\\n` +\n  `• Active Drones: ${flightStats.active_drones}\\n` +\n  `• Flights: ${flightStats.total_flights}\\n` +\n  `• Completed: ${flightStats.completed_routes} (${completionRate.toFixed(1)}%)\\n\\n` +\n  `🔋 BATTERY:\\n` +\n  `• Avg Level: ${parseFloat(batteryStats.avg_battery_level).toFixed(1)}%\\n` +\n  `• Low Battery Incidents: ${batteryStats.low_battery_incidents}\\n\\n` +\n  `⚠️ ERRORS:\\n` +\n  `• Total: ${errorStats.total_errors}\\n` +\n  `• Critical: ${errorStats.critical_errors}\\n` +\n  `• High Priority: ${errorStats.high_errors}\\n` +\n  `• Affected Drones: ${errorStats.drones_with_errors}`;\n\nreturn {\n  json: {\n    dateStr,\n    reportDate: today.toISOString(),\n    batteryStats,\n    flightStats,\n    errorStats,\n    completionRate,\n    htmlReport,\n    textSummary\n  }\n};"
          },
          "name": "Generate Daily Report",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            850
          ],
          "id": "26"
        },
        {
          "parameters": {
            "operation": "upload",
            "name": "={{ 'Drone_Fleet_Report_' + $json.dateStr.replace(/,\\s/g, '_').replace(/\\s/g, '_') + '.html' }}",
            "drive": "mydrive",
            "options": {
              "parents": [
                "{{ $env.GOOGLE_DRIVE_REPORTS_FOLDER }}"
              ]
            }
          },
          "name": "Save Report to Google Drive",
          "type": "n8n-nodes-base.googleDrive",
          "typeVersion": 1,
          "position": [
            900,
            800
          ],
          "id": "27",
          "credentials": {
            "googleDriveOAuth2Api": {
              "id": "google-drive-credentials",
              "name": "Google Drive Account"
            }
          }
        },
        {
          "parameters": {
            "fromEmail": "={{ $env.REPORT_EMAIL_FROM }}",
            "toEmail": "={{ $env.FARM_MANAGER_EMAIL }}",
            "subject": "={{ 'Drone Fleet Daily Report - ' + $json.dateStr }}",
            "html": "={{ $json.htmlReport }}",
            "options": {
              "ccEmail": "={{ $env.FARM_TECHNICIAN_EMAIL }}"
            }
          },
          "name": "Email Daily Report",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            900,
            900
          ],
          "id": "28",
          "credentials": {
            "smtp": {
              "id": "smtp-credentials",
              "name": "SMTP Account"
            }
          }
        },
        {
          "parameters": {
            "businessId": "={{ $env.WHATSAPP_BUSINESS_ID }}",
            "phoneNumberId": "={{ $env.WHATSAPP_PHONE_NUMBER_ID }}",
            "to": "={{ $env.FARM_MANAGER_WHATSAPP }}",
            "messageType": "text",
            "text": "={{ $json.textSummary }}"
          },
          "name": "Send WhatsApp Summary",
          "type": "n8n-nodes-base.whatsappBusiness",
          "typeVersion": 1,
          "position": [
            900,
            1000
          ],
          "id": "29",
          "credentials": {
            "whatsappBusinessCloudApi": {
              "id": "whatsapp-credentials",
              "name": "WhatsApp Account"
            }
          }
        },
        {
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "days",
                  "day": 1
                }
              ]
            }
          },
          "name": "Weekly Maintenance Trigger",
          "type": "n8n-nodes-base.cron",
          "typeVersion": 1,
          "position": [
            100,
            1200
          ],
          "id": "30"
        },
        {
          "parameters": {
            "operation": "executeQuery",
            "query": "SELECT \n  droneId,\n  COUNT(*) as flight_count,\n  SUM(EXTRACT(EPOCH FROM (MAX(timestamp) - MIN(timestamp)))/3600) as flight_hours,\n  MIN(batteryLevel) as min_battery,\n  AVG(batteryLevel) as avg_battery\nFROM drone_operations.battery_logs\nWHERE timestamp >= NOW() - INTERVAL '7 DAYS'\nGROUP BY droneId\nORDER BY flight_hours DESC"
          },
          "name": "Query Drone Usage Stats",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [
            300,
            1200
          ],
          "id": "31",
          "credentials": {
            "postgres": {
              "id": "postgres-credentials",
              "name": "Postgres Account"
            }
          }
        },
        {
          "parameters": {
            "operation": "executeQuery",
            "query": "SELECT \n  droneId,\n  COUNT(*) as error_count,\n  STRING_AGG(DISTINCT errorCode, ', ') as error_codes,\n  MAX(CASE WHEN severity = 'CRITICAL' THEN 1 ELSE 0 END) as had_critical_error,\n  MAX(timestamp) as last_error\nFROM drone_operations.error_logs\nWHERE timestamp >= NOW() - INTERVAL '7 DAYS'\nGROUP BY droneId\nORDER BY error_count DESC"
          },
          "name": "Query Drone Error Stats",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [
            500,
            1200
          ],
          "id": "32",
          "credentials": {
            "postgres": {
              "id": "postgres-credentials",
              "name": "Postgres Account"
            }
          }
        },
        {
          "parameters": {
            "jsCode": "// Generate maintenance schedule based on usage and errors\nconst usageData = $input.first().json;\nconst errorData = $input.last().json;\n\n// Create a map of drones with their error data\nconst droneErrors = {};\nerrorData.forEach(drone => {\n  droneErrors[drone.droneid] = drone;\n});\n\n// Calculate maintenance priority for each drone\nconst maintenanceSchedule = usageData.map(drone => {\n  const droneId = drone.droneid;\n  const errors = droneErrors[droneId] || { error_count: 0, had_critical_error: 0 };\n  \n  // Calculate priority score (higher = needs maintenance sooner)\n  // Factors: flight hours, error count, critical errors, battery health\n  const flightHoursScore = parseFloat(drone.flight_hours) * 10;\n  const errorScore = errors.error_count * 20;\n  const criticalErrorScore = errors.had_critical_error ? 100 : 0;\n  const batteryHealthScore = (100 - parseFloat(drone.avg_battery)) * 2;\n  \n  const priorityScore = flightHoursScore + errorScore + criticalErrorScore + batteryHealthScore;\n  \n  // Determine maintenance urgency\n  let maintenanceUrgency;\n  let scheduledDate;\n  const today = new Date();\n  \n  if (priorityScore > 200 || errors.had_critical_error) {\n    maintenanceUrgency = 'IMMEDIATE';\n    scheduledDate = today;\n  } else if (priorityScore > 150) {\n    maintenanceUrgency = 'HIGH';\n    const tomorrow = new Date(today);\n    tomorrow.setDate(today.getDate() + 1);\n    scheduledDate = tomorrow;\n  } else if (priorityScore > 100) {\n    maintenanceUrgency = 'MEDIUM';\n    const nextWeek = new Date(today);\n    nextWeek.setDate(today.getDate() + 7);\n    scheduledDate = nextWeek;\n  } else {\n    maintenanceUrgency = 'LOW';\n    const nextMonth = new Date(today);\n    nextMonth.setDate(today.getDate() + 30);\n    scheduledDate = nextMonth;\n  }\n  \n  // Format scheduled date\n  const formattedDate = scheduledDate.toLocaleDateString('en-US', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n  \n  // Determine maintenance tasks based on data\n  const maintenanceTasks = [];\n  \n  if (parseFloat(drone.flight_hours) > 20) {\n    maintenanceTasks.push('Motor inspection');\n  }\n  \n  if (parseFloat(drone.min_battery) < 30) {\n    maintenanceTasks.push('Battery replacement');\n  }\n  \n  if (errors.error_count > 0) {\n    maintenanceTasks.push('Diagnostic check');\n    \n    // Add specific tasks based on error codes\n    if (errors.error_codes && errors.error_codes.includes('E001')) {\n      maintenanceTasks.push('Signal system repair');\n    }\n    if (errors.error_codes && errors.error_codes.includes('E002')) {\n      maintenanceTasks.push('GPS module check');\n    }\n    if (errors.error_codes && errors.error_codes.includes('E003')) {\n      maintenanceTasks.push('Sprayer system maintenance');\n    }\n  }\n  \n  // Always add these basic tasks\n  maintenanceTasks.push('Propeller inspection');\n  maintenanceTasks.push('Firmware update');\n  maintenanceTasks.push('Sensor calibration');\n  \n  return {\n    droneId,\n    flightHours: parseFloat(drone.flight_hours).toFixed(1),\n    flightCount: drone.flight_count,\n    avgBattery: parseFloat(drone.avg_battery).toFixed(1),\n    errorCount: errors.error_count || 0,\n    errorCodes: errors.error_codes || 'None',\n    hadCriticalError: errors.had_critical_error == 1,\n    priorityScore: Math.round(priorityScore),\n    maintenanceUrgency,\n    scheduledDate: formattedDate,\n    scheduledDateISO: scheduledDate.toISOString(),\n    maintenanceTasks\n  };\n});\n\n// Sort by priority score (highest first)\nmaintenanceSchedule.sort((a, b) => b.priorityScore - a.priorityScore);\n\n// Generate WhatsApp message with maintenance schedule\nlet whatsAppMessage = \"🔧 DRONE MAINTENANCE SCHEDULE 🔧\\n\\n\";\n\n// Add high priority drones first\nconst highPriorityDrones = maintenanceSchedule.filter(d => \n  d.maintenanceUrgency === 'IMMEDIATE' || d.maintenanceUrgency === 'HIGH'\n);\n\nif (highPriorityDrones.length > 0) {\n  whatsAppMessage += \"⚠️ URGENT MAINTENANCE REQUIRED:\\n\";\n  highPriorityDrones.forEach(drone => {\n    whatsAppMessage += `• Drone ${drone.droneId}: ${drone.maintenanceUrgency} priority\\n`;\n    whatsAppMessage += `  - Schedule: ${drone.scheduledDate}\\n`;\n    whatsAppMessage += `  - Issues: ${drone.hadCriticalError ? 'CRITICAL ERRORS, ' : ''}${drone.errorCount} errors, ${drone.flightHours} flight hours\\n`;\n    whatsAppMessage += `  - Tasks: ${drone.maintenanceTasks.join(', ')}\\n\\n`;\n  });\n}\n\n// Add regular maintenance drones\nwhatsAppMessage += \"📅 SCHEDULED MAINTENANCE:\\n\";\nconst regularMaintenance = maintenanceSchedule.filter(d => \n  d.maintenanceUrgency !== 'IMMEDIATE' && d.maintenanceUrgency !== 'HIGH'\n);\n\nregularMaintenance.slice(0, 5).forEach(drone => {\n  whatsAppMessage += `• Drone ${drone.droneId}: ${drone.scheduledDate}\\n`;\n  whatsAppMessage += `  - Priority: ${drone.maintenanceUrgency}\\n`;\n  whatsAppMessage += `  - Flight hours: ${drone.flightHours}\\n\\n`;\n});\n\nif (regularMaintenance.length > 5) {\n  whatsAppMessage += `...and ${regularMaintenance.length - 5} more drones scheduled for regular maintenance.\\n\\n`;\n}\n\nwhatsAppMessage += \"See maintenance portal for complete details and to confirm schedules.\";\n\nreturn {\n  json: {\n    maintenanceSchedule,\n    highPriorityCount: highPriorityDrones.length,\n    regularMaintenanceCount: regularMaintenance.length,\n    totalDrones: maintenanceSchedule.length,\n    whatsAppMessage,\n    generatedDate: new Date().toISOString()\n  }\n};"
          },
          "name": "Generate Maintenance Schedule",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            1200
          ],
          "id": "33"
        },
        {
          "parameters": {
            "businessId": "={{ $env.WHATSAPP_BUSINESS_ID }}",
            "phoneNumberId": "={{ $env.WHATSAPP_PHONE_NUMBER_ID }}",
            "to": "={{ $env.DRONE_TECHNICIAN_WHATSAPP }}",
            "messageType": "text",
            "text": "={{ $json.whatsAppMessage }}"
          },
          "name": "Send Maintenance Schedule via WhatsApp",
          "type": "n8n-nodes-base.whatsappBusiness",
          "typeVersion": 1,
          "position": [
            900,
            1200
          ],
          "id": "34",
          "credentials": {
            "whatsappBusinessCloudApi": {
              "id": "whatsapp-credentials",
              "name": "WhatsApp Account"
            }
          }
        },
        {
          "parameters": {
            "operation": "insert",
            "schema": "drone_operations",
            "table": "maintenance_schedule",
            "columns": "droneId, scheduledDate, maintenanceUrgency, priorityScore, tasks, generatedDate",
            "additionalFields": {
              "mode": "raw",
              "value": "={{ \n  $json.maintenanceSchedule.map(item => ({\n    droneId: item.droneId,\n    scheduledDate: item.scheduledDateISO,\n    maintenanceUrgency: item.maintenanceUrgency,\n    priorityScore: item.priorityScore,\n    tasks: JSON.stringify(item.maintenanceTasks),\n    generatedDate: $json.generatedDate\n  }))\n }}"
            }
          },
          "name": "Save Maintenance Schedule to Database",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [
            1100,
            1200
          ],
          "id": "35",
          "credentials": {
            "postgres": {
              "id": "postgres-credentials",
              "name": "Postgres Account"
            }
          }
        },
        {
          "parameters": {
            "url": "={{ $env.WEATHER_API_URL }}",
            "options": {
              "method": "GET",
              "qs": {
                "lat": "={{ $env.FARM_LATITUDE }}",
                "lon": "={{ $env.FARM_LONGITUDE }}",
                "appid": "={{ $env.WEATHER_API_KEY }}",
                "units": "metric"
              }
            }
          },
          "name": "Get Weather Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            300,
            450
          ],
          "id": "36"
        },
        {
          "parameters": {
            "jsCode": "// Process weather data to determine if conditions are safe for flying\nconst weatherData = $input.item.json;\n\n// Extract key weather metrics\nconst windSpeed = weatherData.wind.speed; // in meters/second\nconst windGust = weatherData.wind.gust || windSpeed * 1.5; // estimate if not provided\nconst temperature = weatherData.main.temp; // in Celsius\nconst humidity = weatherData.main.humidity; // percentage\nconst visibility = weatherData.visibility; // in meters\nconst weatherCondition = weatherData.weather[0].main;\nconst weatherDescription = weatherData.weather[0].description;\nconst rainVolume = weatherData.rain ? (weatherData.rain['1h'] || 0) : 0; // mm in last hour\n\n// Define safety thresholds\nconst MAX_SAFE_WIND_SPEED = 8; // m/s (~18 mph)\nconst MAX_SAFE_GUST_SPEED = 10; // m/s (~22 mph)\nconst MIN_SAFE_VISIBILITY = 5000; // 5 km\nconst MAX_SAFE_RAIN = 1; // 1 mm/hour\n\n// Unsafe weather conditions\nconst unsafeConditions = [\n  'Thunderstorm',\n  'Tornado',\n  'Hurricane',\n  'Squall'\n];\n\n// Evaluate flying conditions\nconst windUnsafe = windSpeed > MAX_SAFE_WIND_SPEED;\nconst gustUnsafe = windGust > MAX_SAFE_GUST_SPEED;\nconst visibilityUnsafe = visibility < MIN_SAFE_VISIBILITY;\nconst rainUnsafe = rainVolume > MAX_SAFE_RAIN;\nconst conditionUnsafe = unsafeConditions.includes(weatherCondition);\n\n// Overall safety assessment\nconst isSafeToFly = !windUnsafe && !gustUnsafe && !visibilityUnsafe && !rainUnsafe && !conditionUnsafe;\n\n// Generate safety reasons if unsafe\nconst safetyReasons = [];\nif (windUnsafe) safetyReasons.push(`Wind speed too high (${windSpeed} m/s)`);\nif (gustUnsafe) safetyReasons.push(`Wind gusts too high (${windGust} m/s)`);\nif (visibilityUnsafe) safetyReasons.push(`Poor visibility (${visibility/1000} km)`);\nif (rainUnsafe) safetyReasons.push(`Heavy rain (${rainVolume} mm)`);\nif (conditionUnsafe) safetyReasons.push(`Dangerous weather condition: ${weatherCondition}`);\n\n// Format safety message\nlet safetyMessage;\nif (isSafeToFly) {\n  safetyMessage = \"Weather conditions are suitable for drone operations.\";\n} else {\n  safetyMessage = `UNSAFE FLYING CONDITIONS: ${safetyReasons.join(', ')}. Drone operations should be suspended.`;\n}\n\nreturn {\n  json: {\n    timestamp: new Date().toISOString(),\n    location: {\n      name: weatherData.name,\n      latitude: $env.FARM_LATITUDE,\n      longitude: $env.FARM_LONGITUDE\n    },\n    weather: {\n      condition: weatherCondition,\n      description: weatherDescription,\n      temperature,\n      humidity,\n      windSpeed,\n      windGust,\n      visibility: visibility / 1000, // convert to km\n      rainVolume\n    },\n    safety: {\n      isSafeToFly,\n      windUnsafe,\n      gustUnsafe,\n      visibilityUnsafe,\n      rainUnsafe,\n      conditionUnsafe,\n      safetyReasons,\n      safetyMessage\n    }\n  }\n};"
          },
          "name": "Process Weather Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            450
          ],
          "id": "37"
        },
        {
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $json.safety.isSafeToFly }}",
                  "value2": false
                }
              ]
            }
          },
          "name": "Check If Weather Is Unsafe",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            700,
            450
          ],
          "id": "38"
        },
        {
          "parameters": {
            "url": "={{ $env.DRONE_CONTROL_API }}/weather-alert",
            "options": {
              "method": "POST",
              "body": {
                "isSafeToFly": false,
                "safetyMessage": "={{ $json.safety.safetyMessage }}",
                "weatherCondition": "={{ $json.weather.condition }}",
                "windSpeed": "={{ $json.weather.windSpeed }}",
                "timestamp": "={{ $json.timestamp }}",
                "location": "={{ $json.location.name }}"
              },
              "headers": {
                "Content-Type": "application/json",
                "Authorization": "Bearer {{ $env.DRONE_API_KEY }}"
              }
            }
          },
          "name": "Send Weather Alert to Drone System",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            900,
            400
          ],
          "id": "39"
        },
        {
          "parameters": {
            "accountSid": "={{ $env.TWILIO_ACCOUNT_SID }}",
            "authToken": "={{ $env.TWILIO_AUTH_TOKEN }}",
            "from": "={{ $env.TWILIO_FROM_NUMBER }}",
            "to": "={{ $env.FARM_MANAGER_PHONE }}",
            "message": "⚠️ WEATHER ALERT: {{ $json.safety.safetyMessage }} Current conditions: {{ $json.weather.description }}, wind {{ $json.weather.windSpeed }} m/s. Drone operations suspended."
          },
          "name": "Send Weather Alert SMS",
          "type": "n8n-nodes-base.twilio",
          "typeVersion": 1,
          "position": [
            900,
            500
          ],
          "id": "40"
        },
        {
          "parameters": {
            "operation": "insert",
            "schema": "drone_operations",
            "table": "weather_logs",
            "columns": "timestamp, location, condition, wind_speed, temperature, is_safe_to_fly, safety_message",
            "additionalFields": {
              "mode": "raw",
              "value": "={{ \n  {\n    timestamp: $json.timestamp,\n    location: $json.location.name,\n    condition: $json.weather.condition,\n    wind_speed: $json.weather.windSpeed,\n    temperature: $json.weather.temperature,\n    is_safe_to_fly: $json.safety.isSafeToFly,\n    safety_message: $json.safety.safetyMessage\n  }\n }}"
            }
          },
          "name": "Save Weather Data to Database",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [
            900,
            600
          ],
          "id": "41",
          "credentials": {
            "postgres": {
              "id": "postgres-credentials",
              "name": "Postgres Account"
            }
          }
        },
        {
          "parameters": {
            "functionCode": "// This node captures any errors in the workflow\nreturn items;"
          },
          "name": "Error Handler",
          "type": "n8n-nodes-base.errorTrigger",
          "typeVersion": 1,
          "position": [
            100,
            600
          ],
          "id": "42"
        },
        {
          "parameters": {
            "jsCode": "// Process error information\nconst error = $input.item.json.error;\n\n// Format error message\nconst errorMessage = `ERROR in Drone Fleet Management: ${error.message}\\n\\nNode: ${error.node.name}\\nWorkflow: Agricultural Spraying Drone Fleet Management\\nTimestamp: ${new Date().toISOString()}`;\n\n// Add troubleshooting information\nlet troubleshooting = \"\";\nif (error.message.includes(\"MQTT\")) {\n  troubleshooting = \"\\n\\nTroubleshooting: Check MQTT broker connection and credentials.\";\n} else if (error.message.includes(\"database\") || error.message.includes(\"SQL\")) {\n  troubleshooting = \"\\n\\nTroubleshooting: Check database connection and query syntax.\";\n} else if (error.message.includes(\"API\") || error.message.includes(\"HTTP\")) {\n  troubleshooting = \"\\n\\nTroubleshooting: Verify API endpoints and authentication.\";\n}\n\nreturn {\n  json: {\n    errorTimestamp: new Date().toISOString(),\n    errorNodeName: error.node.name,\n    errorMessage: error.message,\n    formattedErrorMessage: errorMessage + troubleshooting,\n    errorDescription: `Error occurred in node '${error.node.name}' during drone fleet management operations.`\n  }\n};"
          },
          "name": "Format Error Message",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            600
          ],
          "id": "43"
        },
        {
          "parameters": {
            "fromEmail": "={{ $env.ERROR_EMAIL_FROM }}",
            "toEmail": "={{ $env.SYSTEM_ADMIN_EMAIL }}",
            "subject": "ERROR: Drone Fleet Management System",
            "text": "={{ $json.formattedErrorMessage }}",
            "options": {
              "priority": "high"
            }
          },
          "name": "Send Error Email",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            500,
            600
          ],
          "id": "44",
          "credentials": {
            "smtp": {
              "id": "smtp-credentials",
              "name": "SMTP Account"
            }
          }
        },
        {
          "parameters": {
            "operation": "insert",
            "schema": "drone_operations",
            "table": "system_errors",
            "columns": "timestamp, node_name, error_message, description",
            "additionalFields": {
              "mode": "raw",
              "value": "={{ \n  {\n    timestamp: $json.errorTimestamp,\n    node_name: $json.errorNodeName,\n    error_message: $json.errorMessage,\n    description: $json.errorDescription\n  }\n }}"
            }
          },
          "name": "Log Error to Database",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [
            700,
            600
          ],
          "id": "45",
          "credentials": {
            "postgres": {
              "id": "postgres-credentials",
              "name": "Postgres Account"
            }
          }
        }
      ],
      "connections": {
        "Daily Operations Trigger": {
          "main": [
            [
              {
                "node": "Collect Drone Telemetry",
                "type": "main",
                "index": 0
              },
              {
                "node": "Get Weather Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Collect Drone Telemetry": {
          "main": [
            [
              {
                "node": "Route Drone Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Route Drone Data": {
          "main": [
            [
              {
                "node": "Process Telemetry Data",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Process GPS & Generate Routes",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Process Battery Data",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Process Error Data",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Process Other Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Telemetry Data": {
          "main": [
            [
              {
                "node": "Save Telemetry to Database",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process GPS & Generate Routes": {
          "main": [
            [
              {
                "node": "Save GPS Data to Database",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Battery Data": {
          "main": [
            [
              {
                "node": "Check If Battery Alert Needed",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Error Data": {
          "main": [
            [
              {
                "node": "Check If Immediate Action Required",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Other Data": {
          "main": [
            [
              {
                "node": "Save Unknown Data to Database",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check If Battery Alert Needed": {
          "main": [
            [
              {
                "node": "Send Battery Alert SMS",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Check If Emergency Landing Needed",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Battery Alert SMS": {
          "main": [
            [
              {
                "node": "Save Battery Data to Database",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check If Emergency Landing Needed": {
          "main": [
            [
              {
                "node": "Trigger Emergency Landing",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Save Battery Data to Database",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Trigger Emergency Landing": {
          "main": [
            [
              {
                "node": "Save Battery Data to Database",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check If Immediate Action Required": {
          "main": [
            [
              {
                "node": "Send Error Alert SMS",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Save Error Data to Database",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Error Alert SMS": {
          "main": [
            [
              {
                "node": "Trigger Emergency Protocol",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Trigger Emergency Protocol": {
          "main": [
            [
              {
                "node": "Save Error Data to Database",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Daily Report Trigger": {
          "main": [
            [
              {
                "node": "Query Battery Stats",
                "type": "main",
                "index": 0
              },
              {
                "node": "Query Flight Stats",
                "type": "main",
                "index": 0
              },
              {
                "node": "Query Error Stats",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Query Battery Stats": {
          "main": [
            [
              {
                "node": "Merge Daily Stats",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Query Flight Stats": {
          "main": [
            [
              {
                "node": "Merge Daily Stats",
                "type": "main",
                "index": 1
              }
            ]
          ]
        },
        "Query Error Stats": {
          "main": [
            [
              {
                "node": "Merge Daily Stats",
                "type": "main",
                "index": 2
              }
            ]
          ]
        },
        "Merge Daily Stats": {
          "main": [
            [
              {
                "node": "Generate Daily Report",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Generate Daily Report": {
          "main": [
            [
              {
                "node": "Save Report to Google Drive",
                "type": "main",
                "index": 0
              },
              {
                "node": "Email Daily Report",
                "type": "main",
                "index": 0
              },
              {
                "node": "Send WhatsApp Summary",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Weekly Maintenance Trigger": {
          "main": [
            [
              {
                "node": "Query Drone Usage Stats",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Query Drone Usage Stats": {
          "main": [
            [
              {
                "node": "Query Drone Error Stats",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Query Drone Error Stats": {
          "main": [
            [
              {
                "node": "Generate Maintenance Schedule",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Generate Maintenance Schedule": {
          "main": [
            [
              {
                "node": "Send Maintenance Schedule via WhatsApp",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Maintenance Schedule via WhatsApp": {
          "main": [
            [
              {
                "node": "Save Maintenance Schedule to Database",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Weather Data": {
          "main": [
            [
              {
                "node": "Process Weather Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Weather Data": {
          "main": [
            [
              {
                "node": "Check If Weather Is Unsafe",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check If Weather Is Unsafe": {
          "main": [
            [
              {
                "node": "Send Weather Alert to Drone System",
                "type": "main",
                "index": 0
              },
              {
                "node": "Send Weather Alert SMS",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Save Weather Data to Database",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Weather Alert to Drone System": {
          "main": [
            [
              {
                "node": "Save Weather Data to Database",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Weather Alert SMS": {
          "main": [
            [
              {
                "node": "Save Weather Data to Database",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Error Handler": {
          "main": [
            [
              {
                "node": "Format Error Message",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Error Message": {
          "main": [
            [
              {
                "node": "Send Error Email",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Error Email": {
          "main": [
            [
              {
                "node": "Log Error to Database",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      }
    },
    "provider": "anthropic",
    "model": "claude-3-7-sonnet-20250219",
    "timestamp": "2025-07-20T08:21:39.176Z",
    "nodeCount": 45,
    "connectionCount": 34
  },
  {
    "id": "84e6768d-3a30-41db-8702-cafaafffd270",
    "prompt": "To implement a comprehensive Smart Factory Quality Control System using n8n, we will create a workflow that encompasses all the specified requirements. Below is a detailed plan, following the mandatory architecture:\n\n### Node Structure and Connections\n\n#### 1. **Main Entry Point** (Webhook/Trigger)\n- **Node:** n8n-nodes-base.webhook (Trigger node for real-time processing)\n- **Connection:** Webhook -> Central Router\n\n#### 2. **Central Router** (Switch/IF node)\n- **Node:** n8n-nodes-base.switch\n- **Purpose:** Route between different features like error detection, reporting, and notifications.\n- **Connection:** \n  - Webhook -> Switch\n\n#### 3. **Feature Branches**\n\n**A. IoT/Sensor Management**\n\n- **Raspberry Pi Image Capture:**\n  - **Node:** n8n-nodes-raspberry.raspberryPi\n  - **Connection:** Switch (condition: \"Image Capture\") -> Raspberry Pi\n\n- **Error Detection and Classification:**\n  - **Node:** n8n-nodes-base.executeCommand (Execute OpenCV scripts)\n  - **Connection:** Raspberry Pi -> Execute Command\n\n- **Conveyor Control:**\n  - **Node:** n8n-nodes-raspberry.raspberryPi\n  - **Connection:** Execute Command (condition: \"Defective Product Detected\") -> Raspberry Pi GPIO Control\n\n- **Data Transmission via MQTT:**\n  - **Node:** n8n-nodes-base.mqtt\n  - **Connection:** Execute Command -> MQTT\n\n**B. Reporting and Data Storage**\n\n- **Production Statistics Report:**\n  - **Node:** n8n-nodes-base.cron (every 15 minutes)\n  - **Connection:** Switch (condition: \"Reporting\") -> Cron\n\n- **Quality Metrics Recording:**\n  - **Node:** n8n-nodes-base.httpRequest (to InfluxDB)\n  - **Connection:** MQTT -> HTTP Request\n\n- **Weekly Trend Analysis and Email Reports:**\n  - **Node:** n8n-nodes-base.cron (weekly trigger)\n  - **Node:** n8n-nodes-base.emailSend\n  - **Connection:** Cron (Weekly) -> HTTP Request (Trend Analysis) -> Email Send\n\n**C. Notifications**\n\n- **WhatsApp Notifications:**\n  - **Node:** n8n-nodes-base.whatsappBusiness\n  - **Connection:** Execute Command (condition: \"Quality Deterioration Detected\") -> WhatsApp Business\n\n**D. Error Pattern Detection and Shift-based Analysis**\n\n- **Machine Learning Error Pattern Detection:**\n  - **Node:** n8n-nodes-base.executeCommand (Run ML model)\n  - **Connection:** HTTP Request (InfluxDB) -> Execute Command\n\n- **Shift-based Performance Comparison:**\n  - **Node:** n8n-nodes-base.function (Data analysis)\n  - **Connection:** Execute Command (ML) -> Function\n\n#### 4. **Central Merge Node**\n- **Node:** n8n-nodes-base.merge\n- **Connection:** \n  - Raspberry Pi, Execute Command, HTTP Request, WhatsApp Business, and Function -> Merge\n\n#### 5. **Final Processing/Response**\n- **Node:** n8n-nodes-base.respondToWebhook\n- **Connection:** Merge -> Respond to Webhook\n\n### Error Handling\n\n- **Global Error Handling:**\n  - **Node:** n8n-nodes-base.errorTrigger\n  - **Connection:** Error Trigger -> Email Send (Notify errors)\n\n### Validation Checklist\n\n☑ All nodes are connected, no isolated nodes  \n☑ Error handling nodes included globally  \n☑ Merge node consolidates parallel processes  \n☑ Conditions in Switch node are comprehensive  \n☑ Appropriate timing with Cron nodes  \n☑ Delay nodes used where necessary for API rate limits  \n☑ Data transformation nodes ensure compatibility between APIs  \n☑ Reporting and notifications tested and verified  \n\nBy following this detailed node-by-node plan, the workflow will integrate all necessary features while ensuring seamless orchestration, with robust error handling and efficient data flow.",
    "workflow": {
      "name": "Smart Factory Quality Control System5",
      "nodes": [
        {
          "id": "1",
          "name": "Factory Data Webhook",
          "type": "n8n-nodes-base.webhook",
          "typeVersion": 1,
          "position": [
            100,
            300
          ],
          "parameters": {
            "httpMethod": "POST",
            "options": {},
            "path": "quality-control-webhook",
            "responseMode": "lastNode"
          },
          "webhookId": "quality-control-webhook-trigger"
        },
        {
          "id": "2",
          "name": "Validate Incoming Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            280,
            300
          ],
          "parameters": {
            "functionCode": "// Validate incoming data\nconst data = $input.item.json;\n\n// Check if required fields exist\nif (!data.sensorId || !data.timestamp || !data.productId) {\n  throw new Error('Missing required fields: sensorId, timestamp, or productId');\n}\n\n// Normalize timestamp if needed\nif (typeof data.timestamp === 'string') {\n  data.timestamp = new Date(data.timestamp).toISOString();\n}\n\n// Add processing metadata\ndata.processingStarted = new Date().toISOString();\ndata.source = 'quality-control-system';\n\nreturn {json: data};",
            "mode": "runOnceForEachItem"
          }
        },
        {
          "id": "3",
          "name": "Is Image Capture?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            460,
            300
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{$json[\"operation\"]}}",
                  "value2": "image_capture"
                }
              ]
            }
          }
        },
        {
          "id": "4",
          "name": "Route Operation Type",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            660,
            420
          ],
          "parameters": {
            "conditions": {
              "boolean": [],
              "string": [
                {
                  "value1": "={{ $json.value }}",
                  "operation": "equals",
                  "value2": "data_recording"
                }
              ],
              "number": []
            },
            "fallbackOutput": "5"
          }
        },
        {
          "id": "5",
          "name": "Capture Image via Raspberry Pi",
          "type": "n8n-nodes-base.executeCommand",
          "typeVersion": 1,
          "position": [
            660,
            180
          ],
          "parameters": {
            "command": "python3 /path/to/scripts/capture_image.py --device {{$json[\"deviceId\"]}} --output /tmp/images/{{$json[\"productId\"]}}.jpg"
          }
        },
        {
          "id": "6",
          "name": "Detect Errors with OpenCV",
          "type": "n8n-nodes-base.executeCommand",
          "typeVersion": 1,
          "position": [
            840,
            180
          ],
          "parameters": {
            "command": "python3 /path/to/scripts/detect_errors.py --image /tmp/images/{{$json[\"productId\"]}}.jpg --model /path/to/models/quality_model.h5"
          }
        },
        {
          "id": "7",
          "name": "Defect Detected?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1020,
            180
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{$json[\"defect_detected\"]}}",
                  "value2": "true"
                }
              ]
            }
          }
        },
        {
          "id": "8",
          "name": "Stop Conveyor",
          "type": "n8n-nodes-base.executeCommand",
          "typeVersion": 1,
          "position": [
            1200,
            80
          ],
          "parameters": {
            "command": "python3 /path/to/scripts/control_conveyor.py --action stop --position {{$json[\"conveyor_position\"]}}"
          }
        },
        {
          "id": "9",
          "name": "Record Defect to InfluxDB",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1380,
            80
          ],
          "parameters": {
            "method": "POST",
            "options": {
              "redirect": {
                "redirect": {
                  "followRedirects": true
                }
              }
            },
            "authentication": "basicAuth",
            "url": "=https://influxdb.factory.local/write?db=quality_metrics",
            "bodyParametersUi": {
              "parameter": [
                {
                  "name": "",
                  "value": "=product_quality,product_id={{$json[\"productId\"]}},sensor_id={{$json[\"sensorId\"]}} defect_type=\"{{$json[\"defect_type\"]}}\",defect_score={{$json[\"defect_score\"]}},position_x={{$json[\"defect_position_x\"]}},position_y={{$json[\"defect_position_y\"]}} {{Date.now()}}"
                }
              ]
            },
            "credentials": {
              "influxDb": "InfluxDB Credentials"
            }
          }
        },
        {
          "id": "10",
          "name": "Publish Defect to MQTT",
          "type": "n8n-nodes-base.mqtt",
          "typeVersion": 1,
          "position": [
            1560,
            80
          ],
          "parameters": {
            "qos": 1,
            "retain": false,
            "topic": "factory/quality/defects",
            "message": "={{JSON.stringify($json)}}",
            "options": {
              "qos": 1,
              "retain": true
            },
            "credentials": {
              "mqtt": "MQTT Broker"
            }
          }
        },
        {
          "id": "11",
          "name": "Continue Conveyor",
          "type": "n8n-nodes-base.executeCommand",
          "typeVersion": 1,
          "position": [
            1200,
            260
          ],
          "parameters": {
            "command": "python3 /path/to/scripts/control_conveyor.py --action resume --position {{$json[\"conveyor_position\"]}}"
          }
        },
        {
          "id": "12",
          "name": "Record Quality to InfluxDB",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1380,
            260
          ],
          "parameters": {
            "method": "POST",
            "options": {
              "redirect": {
                "redirect": {
                  "followRedirects": true
                }
              }
            },
            "authentication": "basicAuth",
            "url": "=https://influxdb.factory.local/write?db=quality_metrics",
            "bodyParametersUi": {
              "parameter": [
                {
                  "name": "",
                  "value": "=product_quality,product_id={{$json[\"productId\"]}},sensor_id={{$json[\"sensorId\"]}} quality_score={{$json[\"quality_score\"]}},processing_time={{$json[\"processing_time\"]}} {{Date.now()}}"
                }
              ]
            },
            "credentials": {
              "influxDb": "InfluxDB Credentials"
            }
          }
        },
        {
          "id": "13",
          "name": "Publish Quality to MQTT",
          "type": "n8n-nodes-base.mqtt",
          "typeVersion": 1,
          "position": [
            1560,
            260
          ],
          "parameters": {
            "qos": 1,
            "retain": false,
            "topic": "factory/quality/pass",
            "message": "={{JSON.stringify($json)}}",
            "options": {
              "qos": 1,
              "retain": false
            },
            "credentials": {
              "mqtt": "MQTT Broker"
            }
          }
        },
        {
          "id": "14",
          "name": "Get 15min Production Stats",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            840,
            420
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "authentication": "basicAuth",
            "url": "=https://influxdb.factory.local/query?db=quality_metrics",
            "bodyParametersUi": {
              "parameter": [
                {
                  "name": "q",
                  "value": "=SELECT count(\"defect_score\") AS defect_count, mean(\"defect_score\") AS avg_defect_score FROM product_quality WHERE time > now() - 15m GROUP BY sensor_id"
                }
              ]
            },
            "credentials": {
              "influxDb": "InfluxDB Credentials"
            }
          }
        },
        {
          "id": "15",
          "name": "Process Production Stats",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1020,
            420
          ],
          "parameters": {
            "functionCode": "// Process InfluxDB response for quality metrics\nconst response = $input.item.json;\nlet stats = {};\n\nif (response.results && response.results[0].series) {\n  const series = response.results[0].series;\n  \n  // Process each sensor group\n  stats.sensors = series.map(s => {\n    const columns = s.columns;\n    const values = s.values[0];\n    \n    // Create an object with column names as keys\n    const sensorData = {};\n    columns.forEach((col, index) => {\n      sensorData[col] = values[index];\n    });\n    \n    // Add sensor tags\n    sensorData.sensor_id = s.tags.sensor_id;\n    \n    return sensorData;\n  });\n  \n  // Calculate overall metrics\n  stats.total_defects = stats.sensors.reduce((sum, sensor) => sum + sensor.defect_count, 0);\n  stats.avg_defect_score = stats.sensors.reduce((sum, sensor) => sum + sensor.avg_defect_score, 0) / stats.sensors.length;\n  stats.timestamp = new Date().toISOString();\n  stats.report_type = \"15-minute\";\n}\n\nreturn {json: stats};",
            "mode": "runOnceForEachItem"
          }
        },
        {
          "id": "16",
          "name": "High Defect Rate?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1200,
            420
          ],
          "parameters": {
            "conditions": {
              "number": [
                {
                  "value1": "={{$json[\"total_defects\"]}}",
                  "operation": "larger",
                  "value2": 5
                }
              ]
            }
          }
        },
        {
          "id": "17",
          "name": "Send WhatsApp Alert",
          "type": "n8n-nodes-base.whatsApp",
          "typeVersion": 1,
          "position": [
            1380,
            340
          ],
          "parameters": {
            "toPhoneNumber": "{{$node[\"Get Factory Manager\"].json[\"phone\"]}}",
            "message": "🚨 ALERT: High defect rate detected in last 15 minutes!\nTotal defects: {{$json[\"total_defects\"]}}\nAvg defect score: {{$json[\"avg_defect_score\"]}}\nTimestamp: {{$json[\"timestamp\"]}}",
            "options": {},
            "credentials": {
              "whatsAppOAuth2Api": "WhatsApp Business"
            }
          }
        },
        {
          "id": "18",
          "name": "Get Factory Manager",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1200,
            340
          ],
          "parameters": {
            "method": "GET",
            "options": {},
            "authentication": "basicAuth",
            "url": "https://factory-api.local/api/staff/manager-on-duty",
            "credentials": {
              "httpBasicAuth": "Factory API Auth"
            }
          }
        },
        {
          "id": "19",
          "name": "Email Production Report",
          "type": "n8n-nodes-base.sendEmail",
          "typeVersion": 1,
          "position": [
            1380,
            500
          ],
          "parameters": {
            "fromEmail": "",
            "toRecipients": "",
            "ccRecipients": "",
            "subject": "Quality Control 15-Minute Report",
            "text": "=Production Statistics Report (15-minute interval)\n\nTimestamp: {{$json[\"timestamp\"]}}\nTotal products processed: {{$json[\"total_products\"]}}\nTotal defects: {{$json[\"total_defects\"]}}\nAverage defect score: {{$json[\"avg_defect_score\"]}}\n\nSensor Breakdown:\n{{#each $json[\"sensors\"]}}\n- Sensor {{this.sensor_id}}: {{this.defect_count}} defects (avg score: {{this.avg_defect_score}})\n{{/each}}\n\nThis is an automated report from the Smart Factory Quality Control System.",
            "html": "",
            "attachments": "",
            "options": {
              "attachments": "={{[\n  {\n    \"name\": \"quality_report.json\",\n    \"content\": Buffer.from(JSON.stringify($json, null, 2)).toString(\"base64\"),\n    \"contentType\": \"application/json\"\n  }\n]}}",
              "attachmentsUi": {
                "attachmentsBinary": [
                  {
                    "property": "=data"
                  }
                ]
              }
            },
            "to": "={{$json[\"email\"]}}",
            "credentials": {
              "smtp": "SMTP"
            }
          }
        },
        {
          "id": "20",
          "name": "Get Quality Team Contacts",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1200,
            500
          ],
          "parameters": {
            "method": "GET",
            "options": {},
            "authentication": "basicAuth",
            "url": "https://factory-api.local/api/staff/quality-team",
            "credentials": {
              "httpBasicAuth": "Factory API Auth"
            }
          }
        },
        {
          "id": "21",
          "name": "15min Report Trigger",
          "type": "n8n-nodes-base.cron",
          "typeVersion": 1,
          "position": [
            100,
            500
          ],
          "parameters": {
            "triggerTimes": {
              "item": [
                {
                  "mode": "everyX",
                  "value": 15,
                  "unit": "minutes"
                }
              ]
            }
          }
        },
        {
          "id": "22",
          "name": "Prepare Report Parameters",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            280,
            500
          ],
          "parameters": {
            "functionCode": "// Generate reporting parameters\nreturn {\n  json: {\n    operation: \"data_recording\",\n    timestamp: new Date().toISOString(),\n    report_type: \"15-minute\",\n    sensorId: \"all\",\n    productId: \"batch-report\"\n  }\n};",
            "mode": "runOnceForEachItem"
          }
        },
        {
          "id": "23",
          "name": "Weekly Report Trigger",
          "type": "n8n-nodes-base.cron",
          "typeVersion": 1,
          "position": [
            100,
            660
          ],
          "parameters": {
            "triggerTimes": {
              "item": [
                {
                  "mode": "custom",
                  "cronExpression": "0 0 * * 0"
                }
              ]
            }
          }
        },
        {
          "id": "24",
          "name": "Prepare Weekly Analysis",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            280,
            660
          ],
          "parameters": {
            "functionCode": "// Generate weekly report parameters\nreturn {\n  json: {\n    operation: \"pattern_detection\",\n    timestamp: new Date().toISOString(),\n    report_type: \"weekly\",\n    timeframe: \"7d\",\n    analysis_type: \"trend\"\n  }\n};",
            "mode": "runOnceForEachItem"
          }
        },
        {
          "id": "25",
          "name": "Get Weekly Trend Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            840,
            660
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "authentication": "basicAuth",
            "url": "=https://influxdb.factory.local/query?db=quality_metrics",
            "bodyParametersUi": {
              "parameter": [
                {
                  "name": "q",
                  "value": "=SELECT mean(\"defect_score\") AS avg_defect_score, count(\"defect_score\") AS defect_count FROM product_quality WHERE time > now() - 7d GROUP BY time(1d), sensor_id"
                }
              ]
            },
            "credentials": {
              "influxDb": "InfluxDB Credentials"
            }
          }
        },
        {
          "id": "26",
          "name": "Generate Weekly PDF Report",
          "type": "n8n-nodes-base.executeCommand",
          "typeVersion": 1,
          "position": [
            1020,
            660
          ],
          "parameters": {
            "command": "python3 /path/to/scripts/generate_trend_report.py --input '{{$json | stringify}}' --output /tmp/reports/weekly_{{$now}}.pdf"
          }
        },
        {
          "id": "27",
          "name": "Email Weekly Report",
          "type": "n8n-nodes-base.sendEmail",
          "typeVersion": 1,
          "position": [
            1200,
            660
          ],
          "parameters": {
            "fromEmail": "",
            "toRecipients": "",
            "ccRecipients": "",
            "subject": "Weekly Quality Control Trend Analysis",
            "text": "=Please find attached the weekly quality control trend analysis report.\n\nHighlights:\n- Total defects this week: {{$json[\"total_defects\"]}}\n- Change from previous week: {{$json[\"week_over_week_change\"]}}%\n- Top defect type: {{$json[\"top_defect_type\"]}}\n- Most problematic sensor: {{$json[\"worst_performing_sensor\"]}}\n\nThe detailed report is attached.\n\nThis is an automated report from the Smart Factory Quality Control System.",
            "html": "",
            "attachments": "",
            "options": {
              "attachments": "={{[\n  {\n    \"name\": \"Weekly_Quality_Report.pdf\",\n    \"content\": $binary.report.data,\n    \"contentType\": \"application/pdf\"\n  }\n]}}",
              "attachmentsUi": {
                "attachmentsBinary": [
                  {
                    "property": "=report"
                  }
                ]
              }
            },
            "to": "quality-team@factory.local",
            "cc": "management@factory.local",
            "credentials": {
              "smtp": "SMTP"
            }
          }
        },
        {
          "id": "28",
          "name": "Shift Change Trigger",
          "type": "n8n-nodes-base.cron",
          "typeVersion": 1,
          "position": [
            100,
            820
          ],
          "parameters": {
            "triggerTimes": {
              "item": [
                {
                  "mode": "custom",
                  "cronExpression": "0 7,15,23 * * *"
                }
              ]
            }
          }
        },
        {
          "id": "29",
          "name": "Prepare Shift Analysis",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            280,
            820
          ],
          "parameters": {
            "functionCode": "// Generate shift analysis parameters\n\n// Determine which shift is starting\nconst hour = new Date().getHours();\nlet shiftName = \"\";\n\nif (hour >= 7 && hour < 15) {\n  shiftName = \"morning\";\n} else if (hour >= 15 && hour < 23) {\n  shiftName = \"afternoon\";\n} else {\n  shiftName = \"night\";\n}\n\nreturn {\n  json: {\n    operation: \"shift_analysis\",\n    timestamp: new Date().toISOString(),\n    shift: shiftName,\n    report_type: \"shift-change\"\n  }\n};",
            "mode": "runOnceForEachItem"
          }
        },
        {
          "id": "30",
          "name": "Get Previous Shift Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            840,
            820
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "authentication": "basicAuth",
            "url": "=https://influxdb.factory.local/query?db=quality_metrics",
            "bodyParametersUi": {
              "parameter": [
                {
                  "name": "q",
                  "value": "=SELECT mean(\"defect_score\") AS avg_defect_score, count(\"defect_score\") AS defect_count FROM product_quality WHERE time > now() - 8h GROUP BY sensor_id"
                }
              ]
            },
            "credentials": {
              "influxDb": "InfluxDB Credentials"
            }
          }
        },
        {
          "id": "31",
          "name": "Process Shift Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1020,
            820
          ],
          "parameters": {
            "functionCode": "// Process shift data and prepare report\nconst data = $input.item.json;\nconst shift = $input.item.json.shift || 'current';\n\nlet processedData = {\n  shift: shift,\n  timestamp: new Date().toISOString(),\n  summary: {}\n};\n\nif (data.results && data.results[0].series) {\n  const series = data.results[0].series;\n  \n  // Process each sensor\n  processedData.sensors = series.map(s => {\n    const columns = s.columns;\n    const values = s.values[0];\n    \n    // Create an object with column names as keys\n    const sensorData = {};\n    columns.forEach((col, index) => {\n      sensorData[col] = values[index];\n    });\n    \n    // Add sensor tags\n    sensorData.sensor_id = s.tags.sensor_id;\n    \n    return sensorData;\n  });\n  \n  // Calculate overall metrics\n  processedData.summary.total_defects = processedData.sensors.reduce((sum, sensor) => sum + sensor.defect_count, 0);\n  processedData.summary.avg_defect_score = processedData.sensors.reduce((sum, sensor) => sum + sensor.avg_defect_score, 0) / processedData.sensors.length;\n  \n  // Find worst performing sensor\n  processedData.summary.worst_sensor = processedData.sensors.reduce((worst, current) => {\n    return (current.defect_count > worst.defect_count) ? current : worst;\n  }, {defect_count: 0, sensor_id: 'none'}).sensor_id;\n  \n  // Calculate defect rate\n  processedData.summary.defect_rate = processedData.summary.total_defects / (processedData.summary.total_defects + processedData.summary.total_passed) * 100;\n}\n\nreturn {json: processedData};",
            "mode": "runOnceForEachItem"
          }
        },
        {
          "id": "32",
          "name": "Get Shift Supervisors",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1200,
            820
          ],
          "parameters": {
            "method": "GET",
            "options": {},
            "authentication": "basicAuth",
            "url": "https://factory-api.local/api/staff/shift-supervisors",
            "credentials": {
              "httpBasicAuth": "Factory API Auth"
            }
          }
        },
        {
          "id": "33",
          "name": "Email Shift Report",
          "type": "n8n-nodes-base.sendEmail",
          "typeVersion": 1,
          "position": [
            1380,
            820
          ],
          "parameters": {
            "fromEmail": "",
            "toRecipients": "",
            "ccRecipients": "",
            "subject": "=Shift Change Quality Report - {{$node[\"Process Shift Data\"].json[\"shift\"]}} Shift",
            "text": "=Shift Quality Report\n\nShift: {{$node[\"Process Shift Data\"].json[\"shift\"]}}\nTimestamp: {{$node[\"Process Shift Data\"].json[\"timestamp\"]}}\n\nSummary:\n- Total defects: {{$node[\"Process Shift Data\"].json[\"summary\"][\"total_defects\"]}}\n- Average defect score: {{$node[\"Process Shift Data\"].json[\"summary\"][\"avg_defect_score\"]}}\n- Defect rate: {{$node[\"Process Shift Data\"].json[\"summary\"][\"defect_rate\"]}}%\n- Worst performing sensor: {{$node[\"Process Shift Data\"].json[\"summary\"][\"worst_sensor\"]}}\n\nRecommended actions:\n{{#if $node[\"Process Shift Data\"].json[\"summary\"][\"defect_rate\"] > 5}}\n- Investigate sensor {{$node[\"Process Shift Data\"].json[\"summary\"][\"worst_sensor\"]}} for calibration issues\n- Check material quality from recent shipments\n- Review machine settings\n{{else}}\n- Continue normal operations\n- Perform regular maintenance\n{{/if}}\n\nThis is an automated report from the Smart Factory Quality Control System.",
            "html": "",
            "attachments": "",
            "options": {},
            "to": "={{$json[\"email\"]}}",
            "credentials": {
              "smtp": "SMTP"
            }
          }
        },
        {
          "id": "34",
          "name": "Run ML Pattern Detection",
          "type": "n8n-nodes-base.executeCommand",
          "typeVersion": 1,
          "position": [
            840,
            580
          ],
          "parameters": {
            "command": "python3 /path/to/scripts/ml_pattern_detection.py --timeframe 24h --model /path/to/models/pattern_detection.pkl"
          }
        },
        {
          "id": "35",
          "name": "Pattern Detected?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1020,
            580
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{$json[\"pattern_detected\"]}}",
                  "value2": "true"
                }
              ]
            }
          }
        },
        {
          "id": "36",
          "name": "Send Pattern Alert",
          "type": "n8n-nodes-base.whatsApp",
          "typeVersion": 1,
          "position": [
            1200,
            580
          ],
          "parameters": {
            "toPhoneNumber": "{{$node[\"Get Quality Engineer\"].json[\"phone\"]}}",
            "message": "🔍 PATTERN DETECTED: {{$json[\"pattern_description\"]}}\n\nConfidence: {{$json[\"confidence\"]}}%\nAffected sensors: {{$json[\"affected_sensors\"]}}\nRecommended action: {{$json[\"recommended_action\"]}}\n\nPlease investigate.",
            "options": {},
            "credentials": {
              "whatsAppOAuth2Api": "WhatsApp Business"
            }
          }
        },
        {
          "id": "37",
          "name": "Get Quality Engineer",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1020,
            500
          ],
          "parameters": {
            "method": "GET",
            "options": {},
            "authentication": "basicAuth",
            "url": "https://factory-api.local/api/staff/quality-engineer-on-call",
            "credentials": {
              "httpBasicAuth": "Factory API Auth"
            }
          }
        },
        {
          "id": "38",
          "name": "Merge All Features",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            1740,
            400
          ],
          "parameters": {
            "mode": "mergeByPosition",
            "options": {}
          }
        },
        {
          "id": "39",
          "name": "Log Workflow Completion",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1920,
            400
          ],
          "parameters": {
            "functionCode": "// Log completion of workflow\nconst data = $input.item.json;\n\n// Determine what type of operation completed\nlet operationType = data.operation || \"unknown\";\nlet result = \"completed\";\n\nif (data.defect_detected === \"true\") {\n  result = \"defect-detected\";\n} else if (data.pattern_detected === \"true\") {\n  result = \"pattern-detected\";\n}\n\n// Create completion log\nconst completionLog = {\n  timestamp: new Date().toISOString(),\n  operation_type: operationType,\n  result: result,\n  processing_id: data.processingId || `proc-${Date.now()}`,\n  details: data\n};\n\nreturn {json: completionLog};",
            "mode": "runOnceForEachItem"
          }
        },
        {
          "id": "40",
          "name": "HTTP Response",
          "type": "n8n-nodes-base.respondToWebhook",
          "typeVersion": 1,
          "position": [
            2100,
            400
          ],
          "parameters": {
            "options": {},
            "respondWith": "json",
            "responseBody": "={{ {success: true, message: \"Operation processed successfully\", operation_type: $json.operation_type, timestamp: $json.timestamp} }}"
          }
        },
        {
          "id": "41",
          "name": "Publish System Log",
          "type": "n8n-nodes-base.mqtt",
          "typeVersion": 1,
          "position": [
            2100,
            280
          ],
          "parameters": {
            "qos": 1,
            "retain": false,
            "topic": "factory/system/logs",
            "message": "={{JSON.stringify($json)}}",
            "options": {
              "qos": 1,
              "retain": false
            },
            "credentials": {
              "mqtt": "MQTT Broker"
            }
          }
        },
        {
          "id": "42",
          "name": "Error Trigger",
          "type": "n8n-nodes-base.errorTrigger",
          "typeVersion": 1,
          "position": [
            100,
            980
          ],
          "parameters": {}
        },
        {
          "id": "43",
          "name": "Format Error Details",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            280,
            980
          ],
          "parameters": {
            "functionCode": "// Process error information\nconst error = $input.item.json.error;\nconst execution = $input.item.json.execution;\nconst workflow = $input.item.json.workflow;\nconst node = $input.item.json.node;\n\n// Create structured error report\nconst errorReport = {\n  timestamp: new Date().toISOString(),\n  error_type: error.name || \"Unknown Error\",\n  error_message: error.message,\n  workflow_name: workflow.name,\n  node_name: node.name,\n  execution_id: execution.id,\n  stack_trace: error.stack,\n  severity: \"high\",\n  requires_attention: true\n};\n\nreturn {json: errorReport};",
            "mode": "runOnceForEachItem"
          }
        },
        {
          "id": "44",
          "name": "Get System Admin",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            460,
            980
          ],
          "parameters": {
            "method": "GET",
            "options": {},
            "authentication": "basicAuth",
            "url": "https://factory-api.local/api/staff/system-admin-on-call",
            "credentials": {
              "httpBasicAuth": "Factory API Auth"
            }
          }
        },
        {
          "id": "45",
          "name": "Email Error Alert",
          "type": "n8n-nodes-base.sendEmail",
          "typeVersion": 1,
          "position": [
            640,
            980
          ],
          "parameters": {
            "fromEmail": "",
            "toRecipients": "",
            "ccRecipients": "",
            "subject": "ALERT: Quality Control System Error",
            "text": "=SYSTEM ERROR ALERT\n\nTimestamp: {{$node[\"Format Error Details\"].json[\"timestamp\"]}}\nError Type: {{$node[\"Format Error Details\"].json[\"error_type\"]}}\nMessage: {{$node[\"Format Error Details\"].json[\"error_message\"]}}\n\nWorkflow: {{$node[\"Format Error Details\"].json[\"workflow_name\"]}}\nNode: {{$node[\"Format Error Details\"].json[\"node_name\"]}}\nExecution ID: {{$node[\"Format Error Details\"].json[\"execution_id\"]}}\n\nStack Trace:\n{{$node[\"Format Error Details\"].json[\"stack_trace\"]}}\n\nPlease investigate this issue immediately.\n\nThis is an automated alert from the Smart Factory Quality Control System.",
            "html": "",
            "attachments": "",
            "options": {},
            "to": "={{$json[\"email\"]}}",
            "credentials": {
              "smtp": "SMTP"
            }
          }
        }
      ],
      "connections": {
        "Factory Data Webhook": {
          "main": [
            [
              {
                "node": "Validate Incoming Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate Incoming Data": {
          "main": [
            [
              {
                "node": "Is Image Capture?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Image Capture?": {
          "main": [
            [
              {
                "node": "Capture Image via Raspberry Pi",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Route Operation Type",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Route Operation Type": {
          "main": [
            [
              {
                "node": "Get 15min Production Stats",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Get Quality Engineer",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Run ML Pattern Detection",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Get Previous Shift Data",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Capture Image via Raspberry Pi": {
          "main": [
            [
              {
                "node": "Detect Errors with OpenCV",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Detect Errors with OpenCV": {
          "main": [
            [
              {
                "node": "Defect Detected?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Defect Detected?": {
          "main": [
            [
              {
                "node": "Stop Conveyor",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Continue Conveyor",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Stop Conveyor": {
          "main": [
            [
              {
                "node": "Record Defect to InfluxDB",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Record Defect to InfluxDB": {
          "main": [
            [
              {
                "node": "Publish Defect to MQTT",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Publish Defect to MQTT": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 1
              }
            ]
          ]
        },
        "Continue Conveyor": {
          "main": [
            [
              {
                "node": "Record Quality to InfluxDB",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Record Quality to InfluxDB": {
          "main": [
            [
              {
                "node": "Publish Quality to MQTT",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Publish Quality to MQTT": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 2
              }
            ]
          ]
        },
        "Get 15min Production Stats": {
          "main": [
            [
              {
                "node": "Process Production Stats",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Production Stats": {
          "main": [
            [
              {
                "node": "High Defect Rate?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "High Defect Rate?": {
          "main": [
            [
              {
                "node": "Get Factory Manager",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Get Quality Team Contacts",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send WhatsApp Alert": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 3
              }
            ]
          ]
        },
        "Get Factory Manager": {
          "main": [
            [
              {
                "node": "Send WhatsApp Alert",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Email Production Report": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 4
              }
            ]
          ]
        },
        "Get Quality Team Contacts": {
          "main": [
            [
              {
                "node": "Email Production Report",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "15min Report Trigger": {
          "main": [
            [
              {
                "node": "Prepare Report Parameters",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Prepare Report Parameters": {
          "main": [
            [
              {
                "node": "Validate Incoming Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Weekly Report Trigger": {
          "main": [
            [
              {
                "node": "Prepare Weekly Analysis",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Prepare Weekly Analysis": {
          "main": [
            [
              {
                "node": "Validate Incoming Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Weekly Trend Data": {
          "main": [
            [
              {
                "node": "Generate Weekly PDF Report",
                "type": "main",
                "index": 0
              },
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Generate Weekly PDF Report": {
          "main": [
            [
              {
                "node": "Email Weekly Report",
                "type": "main",
                "index": 0
              },
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Email Weekly Report": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 5
              }
            ]
          ]
        },
        "Shift Change Trigger": {
          "main": [
            [
              {
                "node": "Prepare Shift Analysis",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Prepare Shift Analysis": {
          "main": [
            [
              {
                "node": "Validate Incoming Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Previous Shift Data": {
          "main": [
            [
              {
                "node": "Process Shift Data",
                "type": "main",
                "index": 0
              },
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Shift Data": {
          "main": [
            [
              {
                "node": "Get Shift Supervisors",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Shift Supervisors": {
          "main": [
            [
              {
                "node": "Email Shift Report",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Email Shift Report": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 6
              }
            ]
          ]
        },
        "Run ML Pattern Detection": {
          "main": [
            [
              {
                "node": "Pattern Detected?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Pattern Detected?": {
          "main": [
            [
              {
                "node": "Send Pattern Alert",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 7
              }
            ]
          ]
        },
        "Send Pattern Alert": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 8
              }
            ]
          ]
        },
        "Get Quality Engineer": {
          "main": [
            [
              {
                "node": "Send Pattern Alert",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge All Features": {
          "main": [
            [
              {
                "node": "Log Workflow Completion",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Log Workflow Completion": {
          "main": [
            [
              {
                "node": "HTTP Response",
                "type": "main",
                "index": 0
              },
              {
                "node": "Publish System Log",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Error Trigger": {
          "main": [
            [
              {
                "node": "Format Error Details",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Error Details": {
          "main": [
            [
              {
                "node": "Get System Admin",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get System Admin": {
          "main": [
            [
              {
                "node": "Email Error Alert",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "active": false,
      "settings": {},
      "versionId": "1345ed69-7b6d-4151-897b-5acb54617454",
      "meta": {
        "instanceId": "7221b4279d96e7954ef75d7c02b5031844eee3ca1705c75c15ad040f91c7b140",
        "userConfigurationRequired": {
          "hasRequiredValues": true,
          "analysis": [
            {
              "nodeId": "10",
              "nodeName": "Publish Defect to MQTT",
              "nodeType": "n8n-nodes-base.mqtt",
              "missingValues": [
                {
                  "parameter": "broker",
                  "description": "MQTT broker URL (e.g., your MQTT server address)",
                  "example": "mqtt://your-mqtt-broker.com:1883",
                  "type": "endpoint"
                },
                {
                  "parameter": "username",
                  "description": "MQTT broker username (if authentication required)",
                  "type": "credential",
                  "sensitive": true
                },
                {
                  "parameter": "password",
                  "description": "MQTT broker password (if authentication required)",
                  "type": "credential",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "13",
              "nodeName": "Publish Quality to MQTT",
              "nodeType": "n8n-nodes-base.mqtt",
              "missingValues": [
                {
                  "parameter": "broker",
                  "description": "MQTT broker URL (e.g., your MQTT server address)",
                  "example": "mqtt://your-mqtt-broker.com:1883",
                  "type": "endpoint"
                },
                {
                  "parameter": "username",
                  "description": "MQTT broker username (if authentication required)",
                  "type": "credential",
                  "sensitive": true
                },
                {
                  "parameter": "password",
                  "description": "MQTT broker password (if authentication required)",
                  "type": "credential",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "41",
              "nodeName": "Publish System Log",
              "nodeType": "n8n-nodes-base.mqtt",
              "missingValues": [
                {
                  "parameter": "broker",
                  "description": "MQTT broker URL (e.g., your MQTT server address)",
                  "example": "mqtt://your-mqtt-broker.com:1883",
                  "type": "endpoint"
                },
                {
                  "parameter": "username",
                  "description": "MQTT broker username (if authentication required)",
                  "type": "credential",
                  "sensitive": true
                },
                {
                  "parameter": "password",
                  "description": "MQTT broker password (if authentication required)",
                  "type": "credential",
                  "sensitive": true
                }
              ]
            }
          ],
          "report": "## User Configuration Required\n\nThe following configurations need to be set up:\n\n### 🔐 Credentials Required\n\n#### MQTT Credentials\nUsed by: Publish Defect to MQTT, Publish Quality to MQTT, Publish System Log\n\n- **username**\n- **password**\n\n### ⚙️ Other Configurations\n\n#### Publish Defect to MQTT\n- **broker**: MQTT broker URL (e.g., your MQTT server address)\n  Example: `mqtt://your-mqtt-broker.com:1883`\n\n#### Publish Quality to MQTT\n- **broker**: MQTT broker URL (e.g., your MQTT server address)\n  Example: `mqtt://your-mqtt-broker.com:1883`\n\n#### Publish System Log\n- **broker**: MQTT broker URL (e.g., your MQTT server address)\n  Example: `mqtt://your-mqtt-broker.com:1883`\n\n\n### 📋 Next Steps:\n1. Set up credentials in n8n (Settings → Credentials)\n2. Update workflow nodes with your specific values\n3. Test each connection before running the full workflow\n"
        }
      },
      "id": "62lqs9mbtix",
      "tags": [],
      "pinData": {}
    },
    "provider": "anthropic",
    "model": "claude-3-7-sonnet-20250219",
    "timestamp": "2025-07-20T16:42:30.932Z",
    "nodeCount": 45,
    "connectionCount": 42
  },
  {
    "id": "97ea0f27-5875-451b-be2a-2a3da27e109a",
    "prompt": "To create a comprehensive n8n workflow for automating a 24/7 radio station, we must carefully orchestrate multiple features into a cohesive system. Below is a detailed plan that addresses each feature while ensuring all components are integrated and function together seamlessly.\n\n### Workflow Structure\n\n1. **Main Entry Point**:\n   - **Trigger Node**: `n8n-nodes-base.webhook`\n     - Purpose: Acts as the main entry point for the workflow, initiating processes based on incoming data/events.\n\n2. **Central Router**:\n   - **Switch Node**: `n8n-nodes-base.switch`\n     - Purpose: Routes incoming data to specific branches based on the type of operation (e.g., playlist creation, ad scheduling).\n\n3. **Feature Branches**:\n   - **Automatic Playlist Creation (Mood/Time)**:\n     - **HTTP Request**: `n8n-nodes-base.httpRequest` for fetching mood/time data.\n     - **Function Node**: `n8n-nodes-base.code` for playlist generation logic.\n   \n   - **Ad Block Scheduling and Billing**:\n     - **Cron Node**: `n8n-nodes-base.cron` to trigger ad scheduling at specific times.\n     - **Function Node**: `n8n-nodes-base.code` for scheduling logic and billing calculation.\n     - **Email Send**: `n8n-nodes-base.emailSend` for billing notifications.\n\n   - **Live Broadcast Guest Appointment System**:\n     - **HTTP Request**: `n8n-nodes-base.httpRequest` to manage appointments.\n     - **Google Calendar**: Integration for scheduling appointments.\n\n   - **Listener Request Line Integration**:\n     - **Webhook**: `n8n-nodes-base.webhook` to receive listener requests.\n     - **Function Node**: `n8n-nodes-base.code` for processing requests.\n\n   - **Automatic Weather/Traffic Announcements**:\n     - **HTTP Request**: `n8n-nodes-base.httpRequest` for fetching weather/traffic data.\n     - **Function Node**: `n8n-nodes-base.code` to format announcements for broadcast.\n   \n   - **Podcast Automatic Upload and Distribution**:\n     - **FTP Upload**: `n8n-nodes-base.ftp` for uploading podcasts.\n     - **Social Media Nodes**: For distribution (Twitter, Facebook, etc.).\n\n   - **RTÜK Compliance Logging**:\n     - **File Write**: `n8n-nodes-base.file` to log compliance data.\n     - **Error Trigger**: `n8n-nodes-base.errorTrigger` for capturing logging errors.\n   \n   - **Transmitter Remote Monitoring**:\n     - **MQTT Node**: `n8n-nodes-base.mqtt` for monitoring transmitter status.\n     - **Alert System**: Using `n8n-nodes-base.emailSend` for alerts.\n\n   - **Social Media Live Broadcast Synchronization**:\n     - **Social Media Nodes**: For synchronizing live broadcasts.\n\n   - **Monthly Listening Statistics Report**:\n     - **Cron Node**: `n8n-nodes-base.cron` for scheduling report generation.\n     - **Function Node**: `n8n-nodes-base.code` for report compilation.\n     - **Email Send**: `n8n-nodes-base.emailSend` for report distribution.\n\n4. **Central Merge Node**:\n   - **Merge Node**: `n8n-nodes-base.merge`\n     - Purpose: Combines results from all feature branches for final processing.\n\n5. **Final Processing/Response**:\n   - **Respond to Webhook**: `n8n-nodes-base.webhookResponse`\n     - Purpose: Sends a final response back to the triggering system.\n\n### Error Handling\n\n- **Global Error Handling**:\n  - **Error Trigger Node**: `n8n-nodes-base.errorTrigger`\n    - Purpose: Catches any workflow errors and sends notifications.\n  - **Email Send**: `n8n-nodes-base.emailSend` for error alerts.\n\n### Validation Checklist\n\n☑ All nodes are connected (no orphaned nodes)  \n☑ Feature branches are correctly routed and merged  \n☑ Error handling is comprehensive for each API call  \n☑ Merge nodes follow all parallel branches  \n☑ Conditional logic is handled with Switch/IF nodes  \n☑ Scheduled tasks use Cron nodes  \n☑ Data transformations are handled between APIs  \n☑ All features are integrated through the central orchestration\n\nThis detailed plan ensures that the radio station's automation workflow is robust, scalable, and efficient, covering all aspects of broadcast automation while maintaining compliance and operational integrity.",
    "workflow": {
      "name": "Automating a 24/7 Radio Station",
      "nodes": [
        {
          "id": "1",
          "name": "Main Control Webhook",
          "type": "n8n-nodes-base.webhook",
          "typeVersion": 1,
          "position": [
            200,
            300
          ],
          "parameters": {
            "httpMethod": "POST",
            "options": {
              "responseMode": "lastNode"
            },
            "path": "radio-automation"
          },
          "webhookId": "radio-automation-trigger"
        },
        {
          "id": "2",
          "name": "Is Playlist Creation?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            400,
            300
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.operation }}",
                  "operation": "equal",
                  "value2": "playlist"
                }
              ]
            }
          }
        },
        {
          "id": "3",
          "name": "Is Ad Scheduling?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            400,
            450
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.operation }}",
                  "operation": "equal",
                  "value2": "ad"
                }
              ]
            }
          }
        },
        {
          "id": "4",
          "name": "Is Guest Appointment?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            400,
            600
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.operation }}",
                  "operation": "equal",
                  "value2": "guest"
                }
              ]
            }
          }
        },
        {
          "id": "5",
          "name": "Is Listener Request?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            400,
            750
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.operation }}",
                  "operation": "equal",
                  "value2": "request"
                }
              ]
            }
          }
        },
        {
          "id": "6",
          "name": "Is Weather/Traffic?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            400,
            900
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.operation }}",
                  "operation": "equal",
                  "value2": "weather"
                }
              ]
            }
          }
        },
        {
          "id": "7",
          "name": "Is Podcast Upload?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            400,
            1050
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.operation }}",
                  "operation": "equal",
                  "value2": "podcast"
                }
              ]
            }
          }
        },
        {
          "id": "8",
          "name": "Is Compliance Logging?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            400,
            1200
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.operation }}",
                  "operation": "equal",
                  "value2": "compliance"
                }
              ]
            }
          }
        },
        {
          "id": "9",
          "name": "Is Transmitter Monitoring?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            400,
            1350
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.operation }}",
                  "operation": "equal",
                  "value2": "transmitter"
                }
              ]
            }
          }
        },
        {
          "id": "10",
          "name": "Is Social Media Sync?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            400,
            1500
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.operation }}",
                  "operation": "equal",
                  "value2": "social"
                }
              ]
            }
          }
        },
        {
          "id": "11",
          "name": "Is Statistics Report?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            400,
            1650
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.operation }}",
                  "operation": "equal",
                  "value2": "stats"
                }
              ]
            }
          }
        },
        {
          "id": "12",
          "name": "Fetch Weather Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            600,
            900
          ],
          "parameters": {
            "method": "GET",
            "options": {
              "queryParameters": {
                "parameters": [
                  {
                    "name": "location",
                    "value": "={{ $json.location || 'Istanbul' }}"
                  }
                ]
              }
            },
            "url": "https://api.weather.com/v1/forecast",
            "authentication": "genericCredentialType",
            "genericCredentialType": "weatherApiCredential"
          }
        },
        {
          "id": "13",
          "name": "Fetch Traffic Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            600,
            950
          ],
          "parameters": {
            "method": "GET",
            "options": {
              "queryParameters": {
                "parameters": [
                  {
                    "name": "location",
                    "value": "={{ $json.location || 'Istanbul' }}"
                  }
                ]
              }
            },
            "url": "https://api.traffic.com/v1/conditions",
            "authentication": "genericCredentialType",
            "genericCredentialType": "trafficApiCredential"
          }
        },
        {
          "id": "14",
          "name": "Format Weather & Traffic Announcement",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            800,
            920
          ],
          "parameters": {
            "functionCode": "// Format weather and traffic data into announcement script\nconst weather = $input.item(0).json;\nconst traffic = $input.item(1).json;\n\n// Create weather announcement\nlet weatherAnnouncement = `Good ${getTimeOfDay()}! Here's your weather update. `;\nif (weather.current) {\n  weatherAnnouncement += `Currently it's ${weather.current.temperature}°C with ${weather.current.conditions}. `;\n  weatherAnnouncement += `Today's forecast: High of ${weather.forecast.high}°C and low of ${weather.forecast.low}°C. `;\n}\n\n// Create traffic announcement\nlet trafficAnnouncement = \"Now for traffic updates. \";\nif (traffic.incidents && traffic.incidents.length > 0) {\n  trafficAnnouncement += \"We're seeing delays on: \";\n  traffic.incidents.forEach((incident, index) => {\n    if (index < 3) { // Limit to 3 incidents to keep announcement brief\n      trafficAnnouncement += `${incident.road} near ${incident.location}, `;\n    }\n  });\n  trafficAnnouncement += \"Please allow extra time for your journey.\";\n} else {\n  trafficAnnouncement += \"Traffic is flowing smoothly across major routes.\";\n}\n\n// Combine announcements\nconst combinedAnnouncement = weatherAnnouncement + trafficAnnouncement;\n\n// Helper function to determine time of day\nfunction getTimeOfDay() {\n  const hour = new Date().getHours();\n  if (hour < 12) return \"morning\";\n  if (hour < 18) return \"afternoon\";\n  return \"evening\";\n}\n\nreturn {\n  weatherAnnouncement,\n  trafficAnnouncement,\n  combinedAnnouncement,\n  timestamp: new Date().toISOString(),\n  automationSource: \"Radio Automation System\"\n};"
          }
        },
        {
          "id": "15",
          "name": "Save Announcement Script",
          "type": "n8n-nodes-base.writeBinaryFile",
          "typeVersion": 1,
          "position": [
            1000,
            920
          ],
          "parameters": {
            "filePath": "/var/radio/announcements/weather-traffic.txt",
            "options": {
              "append": true
            }
          }
        },
        {
          "id": "16",
          "name": "Queue Announcement in Playout System",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            1200,
            920
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "http://radio-playout-system.local/api/queue-announcement",
            "authentication": "genericCredentialType",
            "genericCredentialType": "radioSystemCredential",
            "jsonParameters": true,
            "bodyParametersJson": "={\n  \"type\": \"announcement\",\n  \"content\": \"{{ $json.combinedAnnouncement }}\",\n  \"priority\": \"medium\",\n  \"duration\": \"{{ Math.ceil($json.combinedAnnouncement.length / 15) }}\",\n  \"insertAfter\": \"current\"\n}"
          }
        },
        {
          "id": "17",
          "name": "Fetch Songs by Mood",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            600,
            300
          ],
          "parameters": {
            "method": "GET",
            "options": {
              "queryParameters": {
                "parameters": [
                  {
                    "name": "mood",
                    "value": "={{ $json.mood || 'energetic' }}"
                  },
                  {
                    "name": "limit",
                    "value": "50"
                  }
                ]
              }
            },
            "url": "https://api.musiclibrary.com/v1/songs",
            "authentication": "genericCredentialType",
            "genericCredentialType": "musicApiCredential"
          }
        },
        {
          "id": "18",
          "name": "Generate Time-Based Playlist",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            800,
            300
          ],
          "parameters": {
            "functionCode": "// Generate a playlist based on time of day and mood\nconst songs = $input.json.data;\nconst timeNow = new Date();\nconst hour = timeNow.getHours();\n\n// Define time-based parameters\nlet energyLevel, varietyFactor, recentReleaseRatio;\n\n// Morning show (6-10 AM): High energy, moderate variety, more recent releases\nif (hour >= 6 && hour < 10) {\n  energyLevel = 'high';\n  varietyFactor = 0.6; // 60% variety (some repeats of popular songs)\n  recentReleaseRatio = 0.7; // 70% recent releases\n}\n// Midday (10 AM-2 PM): Medium energy, high variety, balanced releases\nelse if (hour >= 10 && hour < 14) {\n  energyLevel = 'medium';\n  varietyFactor = 0.8; // 80% variety\n  recentReleaseRatio = 0.5; // 50% recent releases\n}\n// Afternoon (2-6 PM): Medium-high energy, moderate variety, more recent releases\nelse if (hour >= 14 && hour < 18) {\n  energyLevel = 'medium-high';\n  varietyFactor = 0.7; // 70% variety\n  recentReleaseRatio = 0.6; // 60% recent releases\n}\n// Evening (6-10 PM): Variable energy, high variety, balanced releases\nelse if (hour >= 18 && hour < 22) {\n  energyLevel = 'variable';\n  varietyFactor = 0.9; // 90% variety\n  recentReleaseRatio = 0.5; // 50% recent releases\n}\n// Late night (10 PM-6 AM): Lower energy, very high variety, more classics\nelse {\n  energyLevel = 'low';\n  varietyFactor = 0.95; // 95% variety\n  recentReleaseRatio = 0.3; // 30% recent releases\n}\n\n// Filter and sort songs based on parameters\nlet filteredSongs = songs;\n\n// Filter by energy level if applicable\nif (energyLevel !== 'variable') {\n  filteredSongs = filteredSongs.filter(song => {\n    if (energyLevel === 'high' && song.energy > 0.7) return true;\n    if (energyLevel === 'medium-high' && song.energy > 0.6) return true;\n    if (energyLevel === 'medium' && song.energy > 0.4 && song.energy < 0.7) return true;\n    if (energyLevel === 'low' && song.energy < 0.5) return true;\n    return false;\n  });\n}\n\n// Sort by release date to separate recent and older songs\nfilteredSongs.sort((a, b) => new Date(b.releaseDate) - new Date(a.releaseDate));\n\n// Determine how many recent songs to include\nconst recentSongsCount = Math.floor(filteredSongs.length * recentReleaseRatio);\nconst recentSongs = filteredSongs.slice(0, recentSongsCount);\nconst olderSongs = filteredSongs.slice(recentSongsCount);\n\n// Shuffle both arrays for variety\nconst shuffleArray = arr => {\n  for (let i = arr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n  }\n  return arr;\n};\n\nconst shuffledRecent = shuffleArray(recentSongs);\nconst shuffledOlder = shuffleArray(olderSongs);\n\n// Create final playlist by alternating between recent and older songs\nconst finalPlaylist = [];\nconst playlistLength = Math.min(24, filteredSongs.length); // 2-hour playlist (assuming ~5 min per song)\n\nfor (let i = 0; i < playlistLength; i++) {\n  if (i % 3 < 2 && shuffledRecent.length > 0) { // 2 out of 3 songs are recent\n    finalPlaylist.push(shuffledRecent.pop());\n  } else if (shuffledOlder.length > 0) {\n    finalPlaylist.push(shuffledOlder.pop());\n  } else if (shuffledRecent.length > 0) {\n    finalPlaylist.push(shuffledRecent.pop());\n  }\n}\n\nreturn {\n  playlist: finalPlaylist,\n  playlistName: `Auto-${energyLevel}-${timeNow.toISOString().split('T')[0]}`,\n  duration: finalPlaylist.reduce((total, song) => total + (song.duration || 180), 0),\n  songCount: finalPlaylist.length,\n  generatedAt: timeNow.toISOString(),\n  timeSlot: hour >= 6 && hour < 10 ? 'Morning Show' :\n            hour >= 10 && hour < 14 ? 'Midday' :\n            hour >= 14 && hour < 18 ? 'Afternoon' :\n            hour >= 18 && hour < 22 ? 'Evening' : 'Late Night'\n};"
          }
        },
        {
          "id": "19",
          "name": "Save Playlist to Playout System",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            1000,
            300
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "http://radio-playout-system.local/api/playlists",
            "authentication": "genericCredentialType",
            "genericCredentialType": "radioSystemCredential",
            "jsonParameters": true,
            "bodyParametersJson": "={\n  \"name\": \"{{ $json.playlistName }}\",\n  \"songs\": {{ $json.playlist | json }},\n  \"timeSlot\": \"{{ $json.timeSlot }}\",\n  \"duration\": {{ $json.duration }},\n  \"automated\": true\n}"
          }
        },
        {
          "id": "20",
          "name": "Fetch Active Ad Campaigns",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            600,
            450
          ],
          "parameters": {
            "method": "GET",
            "options": {
              "queryParameters": {
                "parameters": [
                  {
                    "name": "status",
                    "value": "active"
                  },
                  {
                    "name": "date",
                    "value": "={{ $today }}"
                  }
                ]
              }
            },
            "url": "https://api.adsystem.com/v1/ads",
            "authentication": "genericCredentialType",
            "genericCredentialType": "adSystemCredential"
          }
        },
        {
          "id": "21",
          "name": "Schedule Ad Blocks",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            800,
            450
          ],
          "parameters": {
            "functionCode": "// Schedule ad blocks based on time slots and campaign parameters\nconst campaigns = $input.json.data || [];\nconst timeSlots = [\n  { name: 'Morning Drive', start: '06:00', end: '10:00', rate: 1.5, slots: 4 },\n  { name: 'Midday', start: '10:00', end: '15:00', rate: 1.0, slots: 3 },\n  { name: 'Afternoon Drive', start: '15:00', end: '19:00', rate: 1.4, slots: 4 },\n  { name: 'Evening', start: '19:00', end: '23:00', rate: 0.9, slots: 3 },\n  { name: 'Overnight', start: '23:00', end: '06:00', rate: 0.5, slots: 2 }\n];\n\n// Sort campaigns by priority and budget\ncampaigns.sort((a, b) => {\n  // First sort by priority (higher first)\n  if (b.priority !== a.priority) return b.priority - a.priority;\n  // Then by budget (higher first)\n  return b.budget - a.budget;\n});\n\n// Create schedule for the day\nconst schedule = [];\nconst billing = [];\n\n// Assign ads to time slots\ntimeSlots.forEach(slot => {\n  // For each slot, create multiple ad blocks\n  for (let i = 0; i < slot.slots; i++) {\n    // Calculate a time within this slot for the ad block\n    const [startHour, startMin] = slot.start.split(':').map(Number);\n    const [endHour, endMin] = slot.end.split(':').map(Number);\n    \n    // Convert to minutes since midnight for easier calculation\n    const startMinutes = startHour * 60 + startMin;\n    const endMinutes = endHour * 60 + endMin;\n    let slotDuration = endMinutes - startMinutes;\n    \n    // Handle overnight slots\n    if (slotDuration < 0) slotDuration += 24 * 60;\n    \n    // Distribute ad blocks evenly throughout the slot\n    const blockTime = startMinutes + Math.floor(slotDuration * (i + 0.5) / slot.slots);\n    const blockHour = Math.floor(blockTime / 60) % 24;\n    const blockMin = blockTime % 60;\n    \n    // Format time as HH:MM\n    const blockTimeFormatted = `${blockHour.toString().padStart(2, '0')}:${blockMin.toString().padStart(2, '0')}`;\n    \n    // Create ad block with up to 4 ads\n    const adBlock = {\n      time: blockTimeFormatted,\n      timeSlot: slot.name,\n      rate: slot.rate,\n      ads: []\n    };\n    \n    // Add up to 4 ads to this block\n    let totalDuration = 0;\n    const maxBlockDuration = 180; // 3 minutes max\n    \n    for (let j = 0; j < campaigns.length && adBlock.ads.length < 4; j++) {\n      const campaign = campaigns[j];\n      \n      // Skip if campaign has time restrictions that don't include this slot\n      if (campaign.restrictedTimes && \n          campaign.restrictedTimes.some(rt => \n            rt.avoid === slot.name || \n            (rt.avoidHours && rt.avoidHours.includes(blockHour))\n          )) {\n        continue;\n      }\n      \n      // Skip if ad would make block too long\n      if (totalDuration + campaign.duration > maxBlockDuration) {\n        continue;\n      }\n      \n      // Skip if we've already used this campaign too many times today\n      const campaignOccurrences = schedule.flatMap(block => \n        block.ads.filter(ad => ad.campaignId === campaign.id)\n      ).length;\n      \n      if (campaignOccurrences >= campaign.maxPlaysPerDay) {\n        continue;\n      }\n      \n      // Add ad to block\n      adBlock.ads.push({\n        campaignId: campaign.id,\n        name: campaign.name,\n        duration: campaign.duration,\n        client: campaign.client,\n        audioFile: campaign.audioFile\n      });\n      \n      totalDuration += campaign.duration;\n      \n      // Calculate billing\n      const adCost = campaign.baseRate * slot.rate;\n      billing.push({\n        campaignId: campaign.id,\n        client: campaign.client,\n        time: blockTimeFormatted,\n        timeSlot: slot.name,\n        rate: slot.rate,\n        baseRate: campaign.baseRate,\n        cost: adCost,\n        date: new Date().toISOString().split('T')[0]\n      });\n    }\n    \n    // Only add block if it has ads\n    if (adBlock.ads.length > 0) {\n      adBlock.totalDuration = totalDuration;\n      schedule.push(adBlock);\n    }\n  }\n});\n\n// Calculate billing summaries by client\nconst clientBilling = {};\nbilling.forEach(item => {\n  if (!clientBilling[item.client]) {\n    clientBilling[item.client] = {\n      client: item.client,\n      totalCost: 0,\n      adCount: 0,\n      campaigns: {}\n    };\n  }\n  \n  clientBilling[item.client].totalCost += item.cost;\n  clientBilling[item.client].adCount += 1;\n  \n  if (!clientBilling[item.client].campaigns[item.campaignId]) {\n    clientBilling[item.client].campaigns[item.campaignId] = {\n      campaignId: item.campaignId,\n      plays: 0,\n      cost: 0\n    };\n  }\n  \n  clientBilling[item.client].campaigns[item.campaignId].plays += 1;\n  clientBilling[item.client].campaigns[item.campaignId].cost += item.cost;\n});\n\n// Convert client billing object to array\nconst clientBillingArray = Object.values(clientBilling);\n\nreturn {\n  schedule: schedule,\n  detailedBilling: billing,\n  clientBilling: clientBillingArray,\n  totalAds: billing.length,\n  totalRevenue: billing.reduce((sum, item) => sum + item.cost, 0),\n  date: new Date().toISOString().split('T')[0]\n};"
          }
        },
        {
          "id": "22",
          "name": "Upload Ad Schedule to Playout System",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            1000,
            450
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "http://radio-playout-system.local/api/ad-schedule",
            "authentication": "genericCredentialType",
            "genericCredentialType": "radioSystemCredential",
            "jsonParameters": true,
            "bodyParametersJson": "={\n  \"schedule\": {{ $json.schedule | json }},\n  \"date\": \"{{ $json.date }}\",\n  \"automated\": true\n}"
          }
        },
        {
          "id": "23",
          "name": "Generate Ad Billing",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            1200,
            450
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "https://api.billing.com/v1/invoices",
            "authentication": "genericCredentialType",
            "genericCredentialType": "billingSystemCredential",
            "jsonParameters": true,
            "bodyParametersJson": "={\n  \"clients\": {{ $json.clientBilling | json }},\n  \"billingPeriod\": \"{{ $json.date }}\",\n  \"totalRevenue\": {{ $json.totalRevenue }},\n  \"generateInvoices\": true\n}"
          }
        },
        {
          "id": "24",
          "name": "Send Billing Report Email",
          "type": "n8n-nodes-base.sendEmail",
          "typeVersion": 1,
          "position": [
            1400,
            450
          ],
          "parameters": {
            "fromEmail": "billing@radiostation.com",
            "toRecipients": "=finance@radiostation.com",
            "ccRecipients": "",
            "subject": "=Daily Ad Revenue Report - {{ $json.date }}",
            "text": "=Daily Ad Revenue Summary for {{ $json.date }}\n\nTotal Ads Played: {{ $json.totalAds }}\nTotal Revenue: ${{ $json.totalRevenue.toFixed(2) }}\n\nClient Breakdown:\n{% for client in $json.clientBilling %}\n- {{ client.client }}: ${{ client.totalCost.toFixed(2) }} ({{ client.adCount }} ads)\n{% endfor %}\n\nFull details are attached to this email and have been sent to the billing system.\n\nThis is an automated message from the Radio Automation System.",
            "html": "",
            "attachments": "",
            "options": {
              "attachments": [
                {
                  "binary": {
                    "data": "={{ JSON.stringify($json.detailedBilling, null, 2) }}",
                    "mimeType": "application/json",
                    "fileName": "ad_billing_details_{{ $json.date }}.json"
                  }
                }
              ]
            }
          }
        },
        {
          "id": "25",
          "name": "Fetch Today's Guest Appointments",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            600,
            600
          ],
          "parameters": {
            "method": "GET",
            "options": {
              "queryParameters": {
                "parameters": [
                  {
                    "name": "startDate",
                    "value": "={{ $today }}"
                  },
                  {
                    "name": "endDate",
                    "value": "={{ $jmespath($today, 'to_string(@)') }}"
                  }
                ]
              }
            },
            "url": "https://api.calendar.com/v1/appointments",
            "authentication": "genericCredentialType",
            "genericCredentialType": "calendarApiCredential"
          }
        },
        {
          "id": "26",
          "name": "Process Guest Appointments",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            800,
            600
          ],
          "parameters": {
            "functionCode": "// Process guest appointments and prepare for broadcast\nconst appointments = $input.json.data || [];\n\n// Sort appointments by time\nappointments.sort((a, b) => new Date(a.startTime) - new Date(b.startTime));\n\n// Format appointments for broadcast system\nconst formattedAppointments = appointments.map(appointment => {\n  // Parse dates\n  const startTime = new Date(appointment.startTime);\n  const endTime = new Date(appointment.endTime);\n  \n  // Calculate duration in minutes\n  const durationMs = endTime - startTime;\n  const durationMinutes = Math.floor(durationMs / 60000);\n  \n  // Format times for display\n  const timeFormat = new Intl.DateTimeFormat('en', {\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: true\n  });\n  \n  const formattedStartTime = timeFormat.format(startTime);\n  const formattedEndTime = timeFormat.format(endTime);\n  \n  // Create pre-show notes for hosts\n  const preShowNotes = [\n    `Guest: ${appointment.guestName} (${appointment.guestTitle})`,\n    `Topic: ${appointment.topic}`,\n    `Duration: ${durationMinutes} minutes`,\n    `Contact: ${appointment.guestContact}`,\n    `Bio: ${appointment.guestBio || 'Not provided'}`,\n    `Talking Points: ${appointment.talkingPoints || 'Not provided'}`,\n    `Special Requirements: ${appointment.specialRequirements || 'None'}`\n  ].join('\\n');\n  \n  // Create on-air introduction\n  const introduction = `Coming up ${appointment.isCurrent ? 'now' : 'at ' + formattedStartTime}, ` +\n    `we're joined by ${appointment.guestName}, ${appointment.guestTitle}, ` +\n    `to discuss ${appointment.topic}.`;\n  \n  return {\n    id: appointment.id,\n    guestName: appointment.guestName,\n    guestTitle: appointment.guestTitle,\n    showName: appointment.showName,\n    startTime: appointment.startTime,\n    endTime: appointment.endTime,\n    formattedStartTime,\n    formattedEndTime,\n    duration: durationMinutes,\n    topic: appointment.topic,\n    preShowNotes,\n    introduction,\n    status: appointment.status,\n    hostName: appointment.hostName,\n    studioLocation: appointment.studioLocation || 'Main Studio',\n    isRemote: appointment.isRemote || false,\n    connectionDetails: appointment.isRemote ? appointment.connectionDetails : null\n  };\n});\n\n// Group appointments by show\nconst appointmentsByShow = {};\nformattedAppointments.forEach(appointment => {\n  if (!appointmentsByShow[appointment.showName]) {\n    appointmentsByShow[appointment.showName] = [];\n  }\n  appointmentsByShow[appointment.showName].push(appointment);\n});\n\n// Create notification emails for hosts\nconst hostEmails = [];\nObject.entries(appointmentsByShow).forEach(([showName, showAppointments]) => {\n  // Get unique hosts for this show\n  const hosts = [...new Set(showAppointments.map(a => a.hostName))];\n  \n  hosts.forEach(host => {\n    // Filter appointments for this host\n    const hostAppointments = showAppointments.filter(a => a.hostName === host);\n    \n    if (hostAppointments.length > 0) {\n      hostEmails.push({\n        hostName: host,\n        showName: showName,\n        appointments: hostAppointments,\n        emailSubject: `Guest Schedule for Today's ${showName}`,\n        emailBody: `Dear ${host},\\n\\nHere is your guest schedule for today's ${showName}:\\n\\n` +\n          hostAppointments.map(a => {\n            return `${a.formattedStartTime} - ${a.formattedEndTime}: ${a.guestName} (${a.guestTitle})\\n` +\n              `Topic: ${a.topic}\\n` +\n              `Location: ${a.isRemote ? 'Remote Interview' : a.studioLocation}\\n` +\n              `\\n${a.preShowNotes}\\n`;\n          }).join('\\n---\\n\\n') +\n          '\\nPlease review these details before your show.\\n\\nBest regards,\\nRadio Automation System'\n      });\n    }\n  });\n});\n\nreturn {\n  appointments: formattedAppointments,\n  appointmentsByShow,\n  hostEmails,\n  totalAppointments: formattedAppointments.length,\n  date: new Date().toISOString().split('T')[0]\n};"
          }
        },
        {
          "id": "27",
          "name": "Upload Guest Schedule to Playout System",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            1000,
            600
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "http://radio-playout-system.local/api/guest-schedule",
            "authentication": "genericCredentialType",
            "genericCredentialType": "radioSystemCredential",
            "jsonParameters": true,
            "bodyParametersJson": "={\n  \"appointments\": {{ $json.appointments | json }},\n  \"date\": \"{{ $json.date }}\",\n  \"automated\": true\n}"
          }
        },
        {
          "id": "28",
          "name": "Loop Through Host Emails",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            1200,
            600
          ],
          "parameters": {
            "values": {
              "string": []
            },
            "options": {},
            "operation": "iterate",
            "iterateKey": "hostEmails"
          }
        },
        {
          "id": "29",
          "name": "Send Host Notification Email",
          "type": "n8n-nodes-base.sendEmail",
          "typeVersion": 1,
          "position": [
            1400,
            600
          ],
          "parameters": {
            "fromEmail": "studio@radiostation.com",
            "toRecipients": "={{ $json.hostName.replace(' ', '.').toLowerCase() + '@radiostation.com' }}",
            "ccRecipients": "",
            "subject": "={{ $json.emailSubject }}",
            "text": "={{ $json.emailBody }}",
            "html": "",
            "attachments": "",
            "options": {}
          }
        },
        {
          "id": "30",
          "name": "Listener Request Webhook",
          "type": "n8n-nodes-base.webhook",
          "typeVersion": 1,
          "position": [
            600,
            750
          ],
          "parameters": {
            "httpMethod": "POST",
            "options": {},
            "path": "listener-request"
          },
          "webhookId": "listener-request-line"
        },
        {
          "id": "31",
          "name": "Process Listener Request",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            800,
            750
          ],
          "parameters": {
            "functionCode": "// Process listener song request\nconst request = $input.json;\n\n// Basic validation\nif (!request.songTitle) {\n  return {\n    valid: false,\n    error: 'Song title is required',\n    request\n  };\n}\n\n// Check for inappropriate content or spam\nconst spamKeywords = ['buy now', 'discount', 'offer', 'click here', 'win', 'prize'];\nconst inappropriateWords = ['explicit content words would go here'];\n\nconst message = (request.message || '').toLowerCase();\nconst containsSpam = spamKeywords.some(word => message.includes(word));\nconst containsInappropriate = inappropriateWords.some(word => message.includes(word));\n\nif (containsSpam || containsInappropriate) {\n  return {\n    valid: false,\n    error: containsSpam ? 'Message appears to be spam' : 'Message contains inappropriate content',\n    request\n  };\n}\n\n// Standardize song information\nconst songInfo = {\n  title: request.songTitle.trim(),\n  artist: (request.artist || 'Unknown Artist').trim(),\n  requestedBy: request.name ? request.name.trim() : 'Anonymous Listener',\n  message: request.message ? request.message.trim() : '',\n  location: request.location ? request.location.trim() : 'Unknown Location',\n  timestamp: new Date().toISOString(),\n  showName: request.showName || 'Current Show',\n  contactInfo: request.contactInfo || '',\n  ip: request.ip || '',\n  source: request.source || 'Web Form'\n};\n\n// Calculate priority score based on various factors\nlet priorityScore = 50; // Base score\n\n// Boost for complete information\nif (request.artist) priorityScore += 10;\nif (request.message) priorityScore += 5;\nif (request.location) priorityScore += 5;\n\n// Boost for first-time requesters (would need a database check in real implementation)\nconst isFirstTime = true; // Placeholder\nif (isFirstTime) priorityScore += 15;\n\n// Format request for radio hosts\nconst formattedRequest = {\n  songRequest: `\"${songInfo.title}\" by ${songInfo.artist}`,\n  from: songInfo.requestedBy,\n  location: songInfo.location,\n  message: songInfo.message,\n  receivedAt: new Date(songInfo.timestamp).toLocaleTimeString(),\n  priorityScore,\n  showName: songInfo.showName\n};\n\n// Create on-air announcement text\nconst onAirText = songInfo.message ? \n  `This one goes out to ${songInfo.requestedBy} from ${songInfo.location}, who says: \"${songInfo.message}\"` :\n  `This one was requested by ${songInfo.requestedBy} from ${songInfo.location}`;\n\nreturn {\n  valid: true,\n  songInfo,\n  formattedRequest,\n  onAirText,\n  priorityScore,\n  requestId: `REQ-${Date.now()}`\n};"
          }
        },
        {
          "id": "32",
          "name": "Is Valid Request?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1000,
            750
          ],
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $json.valid }}",
                  "value2": true
                }
              ]
            }
          }
        },
        {
          "id": "33",
          "name": "Add Request to Playout Queue",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            1200,
            700
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "http://radio-playout-system.local/api/song-requests",
            "authentication": "genericCredentialType",
            "genericCredentialType": "radioSystemCredential",
            "jsonParameters": true,
            "bodyParametersJson": "={\n  \"request\": {{ $json.formattedRequest | json }},\n  \"songInfo\": {{ $json.songInfo | json }},\n  \"priorityScore\": {{ $json.priorityScore }},\n  \"onAirText\": \"{{ $json.onAirText }}\",\n  \"requestId\": \"{{ $json.requestId }}\"\n}"
          }
        },
        {
          "id": "34",
          "name": "Notify DJ of Request",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            1400,
            700
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "http://radio-playout-system.local/api/dj-notification",
            "authentication": "genericCredentialType",
            "genericCredentialType": "radioSystemCredential",
            "jsonParameters": true,
            "bodyParametersJson": "={\n  \"type\": \"songRequest\",\n  \"showName\": \"{{ $json.formattedRequest.showName }}\",\n  \"message\": \"New song request: {{ $json.formattedRequest.songRequest }} from {{ $json.formattedRequest.from }}\",\n  \"details\": {{ $json.formattedRequest | json }},\n  \"priority\": {{ $json.priorityScore > 70 ? \"high\" : \"normal\" | json }}\n}"
          }
        },
        {
          "id": "35",
          "name": "Respond with Error",
          "type": "n8n-nodes-base.respondToWebhook",
          "typeVersion": 1,
          "position": [
            1200,
            800
          ],
          "parameters": {
            "options": {},
            "respondWith": "json",
            "responseBody": "={\n  \"success\": false,\n  \"error\": \"{{ $json.error }}\",\n  \"requestId\": null\n}"
          }
        },
        {
          "id": "36",
          "name": "Respond with Success",
          "type": "n8n-nodes-base.respondToWebhook",
          "typeVersion": 1,
          "position": [
            1600,
            700
          ],
          "parameters": {
            "options": {},
            "respondWith": "json",
            "responseBody": "={\n  \"success\": true,\n  \"message\": \"Your request for '{{ $json.songInfo.title }}' has been received!\",\n  \"requestId\": \"{{ $json.requestId }}\"\n}"
          }
        },
        {
          "id": "37",
          "name": "Fetch Ready Podcasts",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            600,
            1050
          ],
          "parameters": {
            "method": "GET",
            "options": {
              "queryParameters": {
                "parameters": [
                  {
                    "name": "status",
                    "value": "ready_for_upload"
                  }
                ]
              }
            },
            "url": "https://api.podcasthost.com/v1/podcasts",
            "authentication": "genericCredentialType",
            "genericCredentialType": "podcastApiCredential"
          }
        },
        {
          "id": "38",
          "name": "Loop Through Podcasts",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            800,
            1050
          ],
          "parameters": {
            "values": {
              "string": []
            },
            "options": {},
            "operation": "iterate",
            "iterateKey": "data"
          }
        },
        {
          "id": "39",
          "name": "Download Podcast Audio",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            1000,
            1050
          ],
          "parameters": {
            "method": "GET",
            "options": {
              "response": {
                "responseFormat": "file",
                "outputPropertyName": "data"
              }
            },
            "url": "={{ $json.audioFileUrl }}"
          }
        },
        {
          "id": "40",
          "name": "Process Podcast Metadata",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1200,
            1050
          ],
          "parameters": {
            "functionCode": "// Process podcast metadata and prepare for distribution\nconst podcast = $input.json;\n\n// Format publish date\nconst publishDate = new Date();\nconst formattedDate = publishDate.toISOString().split('T')[0];\n\n// Generate SEO-friendly slug\nconst slug = podcast.title\n  .toLowerCase()\n  .replace(/[^\\w\\s]/gi, '')\n  .replace(/\\s+/g, '-');\n\n// Create formatted description with timestamps if available\nlet formattedDescription = podcast.description || '';\n\nif (podcast.timestamps && podcast.timestamps.length > 0) {\n  formattedDescription += '\\n\\nTimestamps:\\n';\n  podcast.timestamps.forEach(ts => {\n    formattedDescription += `${ts.time} - ${ts.topic}\\n`;\n  });\n}\n\n// Add show notes if available\nif (podcast.showNotes) {\n  formattedDescription += '\\n\\nShow Notes:\\n' + podcast.showNotes;\n}\n\n// Generate tags\nlet tags = podcast.tags || [];\n\n// Add standard tags if not already present\nconst standardTags = ['radio', 'podcast', podcast.showName.toLowerCase().replace(/\\s+/g, '')];\nstandardTags.forEach(tag => {\n  if (!tags.includes(tag)) {\n    tags.push(tag);\n  }\n});\n\n// Prepare social media messages\nconst socialMessages = {\n  twitter: `🎙️ New Episode: \"${podcast.title}\" is now available! ${podcast.shortDescription || podcast.description.substring(0, 180)}... Listen now: #${tags.join(' #')}`,\n  facebook: `🎙️ NEW EPISODE ALERT!\\n\\n\"${podcast.title}\"\\n\\n${podcast.description}\\n\\nListen now on our website or your favorite podcast platform!`,\n  instagram: `🎙️ New Episode: \"${podcast.title}\"\\n\\n${podcast.shortDescription || podcast.description.substring(0, 150)}...\\n\\nLink in bio to listen now!\\n\\n#${tags.join(' #')}`\n};\n\nreturn {\n  ...podcast,\n  publishDate: publishDate.toISOString(),\n  formattedDate,\n  slug: `${formattedDate}-${slug}`,\n  formattedDescription,\n  tags,\n  socialMessages,\n  distributionStatus: 'processing',\n  processingTimestamp: new Date().toISOString()\n};"
          }
        },
        {
          "id": "41",
          "name": "Upload to Podcast Server",
          "type": "n8n-nodes-base.ftp",
          "typeVersion": 1,
          "position": [
            1400,
            1050
          ],
          "parameters": {
            "protocol": "sftp",
            "operation": "upload",
            "authentication": "credentials",
            "credentials": {
              "id": "12",
              "name": "SFTP account"
            },
            "resource": "file",
            "remotePath": "=/podcasts/{{ $json.formattedDate }}/{{ $json.slug }}.mp3",
            "binaryPropertyName": "data"
          }
        },
        {
          "id": "42",
          "name": "Distribute to Podcast Platforms",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            1600,
            1050
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "https://api.podcastdistribution.com/v1/publish",
            "authentication": "genericCredentialType",
            "genericCredentialType": "podcastDistributionCredential",
            "jsonParameters": true,
            "bodyParametersJson": "={\n  \"title\": \"{{ $json.title }}\",\n  \"description\": \"{{ $json.formattedDescription }}\",\n  \"audioUrl\": \"https://podcasts.radiostation.com/{{ $json.formattedDate }}/{{ $json.slug }}.mp3\",\n  \"showName\": \"{{ $json.showName }}\",\n  \"publishDate\": \"{{ $json.publishDate }}\",\n  \"author\": \"{{ $json.author || $json.showName }}\",\n  \"tags\": {{ $json.tags | json }},\n  \"episodeNumber\": {{ $json.episodeNumber || 'null' }},\n  \"season\": {{ $json.season || 'null' }},\n  \"explicit\": {{ $json.explicit || false }},\n  \"coverArtUrl\": \"{{ $json.coverArtUrl }}\",\n  \"distributionPlatforms\": [\"spotify\", \"apple_podcasts\", \"google_podcasts\", \"stitcher\"]\n}"
          }
        },
        {
          "id": "43",
          "name": "Post to Social Media?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1800,
            1050
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.postToSocial }}",
                  "operation": "equal",
                  "value2": "true"
                }
              ]
            }
          }
        },
        {
          "id": "44",
          "name": "Post to Twitter",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            2000,
            1000
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "https://api.twitter.com/2/tweets",
            "authentication": "oAuth2",
            "nodeCredentialName": "Twitter OAuth2 API",
            "jsonParameters": true,
            "bodyParametersJson": "={\n  \"text\": \"{{ $json.socialMessages.twitter }}\"\n}"
          }
        },
        {
          "id": "45",
          "name": "Post to Facebook",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            2000,
            1050
          ],
          "parameters": {
            "method": "POST",
            "options": {
              "queryParameters": {
                "parameters": [
                  {
                    "name": "message",
                    "value": "={{ $json.socialMessages.facebook }}"
                  },
                  {
                    "name": "link",
                    "value": "=https://podcasts.radiostation.com/{{ $json.formattedDate }}/{{ $json.slug }}.mp3"
                  }
                ]
              }
            },
            "url": "https://graph.facebook.com/v17.0/me/feed",
            "authentication": "genericCredentialType",
            "genericCredentialType": "facebookPageCredential"
          }
        },
        {
          "id": "46",
          "name": "Post to Instagram",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            2000,
            1100
          ],
          "parameters": {
            "method": "POST",
            "options": {
              "queryParameters": {
                "parameters": [
                  {
                    "name": "caption",
                    "value": "={{ $json.socialMessages.instagram }}"
                  },
                  {
                    "name": "image_url",
                    "value": "={{ $json.coverArtUrl }}"
                  }
                ]
              }
            },
            "url": "https://graph.instagram.com/me/media",
            "authentication": "genericCredentialType",
            "genericCredentialType": "instagramCredential"
          }
        },
        {
          "id": "47",
          "name": "Update Podcast Status",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            2200,
            1050
          ],
          "parameters": {
            "method": "PATCH",
            "options": {},
            "url": "https://api.podcasthost.com/v1/podcasts/{{ $json.id }}/status",
            "authentication": "genericCredentialType",
            "genericCredentialType": "podcastApiCredential",
            "jsonParameters": true,
            "bodyParametersJson": "={\n  \"status\": \"published\",\n  \"publishedUrl\": \"https://podcasts.radiostation.com/{{ $json.formattedDate }}/{{ $json.slug }}.mp3\",\n  \"distributionPlatforms\": {\n    \"spotify\": true,\n    \"apple_podcasts\": true,\n    \"google_podcasts\": true,\n    \"stitcher\": true\n  },\n  \"socialMediaPosted\": {{ $json.postToSocial == \"true\" }},\n  \"publishTimestamp\": \"{{ new Date().toISOString() }}\"\n}"
          }
        },
        {
          "id": "48",
          "name": "Fetch Today's Broadcasts",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            600,
            1200
          ],
          "parameters": {
            "method": "GET",
            "options": {
              "queryParameters": {
                "parameters": [
                  {
                    "name": "date",
                    "value": "={{ $today }}"
                  }
                ]
              }
            },
            "url": "https://api.rtukmonitoring.com/v1/broadcasts",
            "authentication": "genericCredentialType",
            "genericCredentialType": "rtukApiCredential"
          }
        },
        {
          "id": "49",
          "name": "Generate RTÜK Compliance Log",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            800,
            1200
          ],
          "parameters": {
            "functionCode": "// Process broadcast data for RTÜK compliance logging\nconst broadcasts = $input.json.data || [];\n\n// Create compliance log entries\nconst complianceLog = broadcasts.map(broadcast => {\n  // Calculate broadcast duration in minutes\n  const startTime = new Date(broadcast.startTime);\n  const endTime = broadcast.endTime ? new Date(broadcast.endTime) : new Date();\n  const durationMs = endTime - startTime;\n  const durationMinutes = Math.floor(durationMs / 60000);\n  \n  // Format times for log\n  const timeFormat = new Intl.DateTimeFormat('tr-TR', {\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    hour12: false\n  });\n  \n  const dateFormat = new Intl.DateTimeFormat('tr-TR', {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit'\n  });\n  \n  const formattedDate = dateFormat.format(startTime);\n  const formattedStartTime = timeFormat.format(startTime);\n  const formattedEndTime = timeFormat.format(endTime);\n  \n  // Check for potential compliance issues\n  const complianceIssues = [];\n  \n  if (broadcast.contentRating && broadcast.contentRating === 'explicit' && \n      (startTime.getHours() < 22 && startTime.getHours() > 5)) {\n    complianceIssues.push('Explicit content aired outside 22:00-05:00 window');\n  }\n  \n  if (broadcast.type === 'advertisement' && broadcast.duration > 12 * 60) { // 12 minutes\n    complianceIssues.push('Advertisement block exceeds 12-minute limit');\n  }\n  \n  if (broadcast.language && broadcast.language !== 'turkish' && !broadcast.hasTranslation) {\n    complianceIssues.push('Foreign language content without translation');\n  }\n  \n  // Create log entry\n  return {\n    broadcastId: broadcast.id,\n    date: formattedDate,\n    startTime: formattedStartTime,\n    endTime: formattedEndTime,\n    duration: durationMinutes,\n    programName: broadcast.programName,\n    contentType: broadcast.type,\n    contentRating: broadcast.contentRating || 'general',\n    presenter: broadcast.presenter || 'N/A',\n    guests: broadcast.guests || [],\n    topics: broadcast.topics || [],\n    language: broadcast.language || 'turkish',\n    hasTranslation: broadcast.hasTranslation || false,\n    complianceIssues: complianceIssues,\n    compliant: complianceIssues.length === 0,\n    archiveReference: broadcast.archiveReference || `ARCH-${broadcast.id}`,\n    loggedAt: new Date().toISOString()\n  };\n});\n\n// Create summary report\nconst totalBroadcasts = complianceLog.length;\nconst compliantBroadcasts = complianceLog.filter(log => log.compliant).length;\nconst nonCompliantBroadcasts = totalBroadcasts - compliantBroadcasts;\n\nconst complianceRate = totalBroadcasts > 0 ? \n  (compliantBroadcasts / totalBroadcasts * 100).toFixed(2) : '100.00';\n\nconst complianceSummary = {\n  date: new Date().toISOString().split('T')[0],\n  totalBroadcasts,\n  compliantBroadcasts,\n  nonCompliantBroadcasts,\n  complianceRate: `${complianceRate}%`,\n  issuesByType: {}\n};\n\n// Count issues by type\ncomplianceLog.forEach(log => {\n  if (!log.compliant) {\n    log.complianceIssues.forEach(issue => {\n      if (!complianceSummary.issuesByType[issue]) {\n        complianceSummary.issuesByType[issue] = 0;\n      }\n      complianceSummary.issuesByType[issue]++;\n    });\n  }\n});\n\nreturn {\n  complianceLog,\n  complianceSummary,\n  nonCompliantLogs: complianceLog.filter(log => !log.compliant),\n  date: new Date().toISOString().split('T')[0]\n};"
          }
        },
        {
          "id": "50",
          "name": "Save Compliance Log to File",
          "type": "n8n-nodes-base.writeBinaryFile",
          "typeVersion": 1,
          "position": [
            1000,
            1200
          ],
          "parameters": {
            "filePath": "/var/radio/compliance/{{ $json.date }}-rtuk-compliance-log.json",
            "options": {
              "jsonPretty": true
            }
          }
        },
        {
          "id": "51",
          "name": "Submit Compliance Log to RTÜK",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            1200,
            1200
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "https://api.rtukmonitoring.com/v1/compliance-logs",
            "authentication": "genericCredentialType",
            "genericCredentialType": "rtukApiCredential",
            "jsonParameters": true,
            "bodyParametersJson": "={\n  \"logs\": {{ $json.complianceLog | json }},\n  \"summary\": {{ $json.complianceSummary | json }},\n  \"date\": \"{{ $json.date }}\",\n  \"stationId\": \"RADIO-001\",\n  \"automated\": true\n}"
          }
        },
        {
          "id": "52",
          "name": "Has Compliance Issues?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1400,
            1200
          ],
          "parameters": {
            "conditions": {
              "number": [
                {
                  "value1": "={{ $json.nonCompliantLogs.length }}",
                  "operation": "larger",
                  "value2": 0
                }
              ]
            }
          }
        },
        {
          "id": "53",
          "name": "Send Compliance Alert Email",
          "type": "n8n-nodes-base.sendEmail",
          "typeVersion": 1,
          "position": [
            1600,
            1150
          ],
          "parameters": {
            "fromEmail": "compliance@radiostation.com",
            "toRecipients": "=legal@radiostation.com, management@radiostation.com",
            "ccRecipients": "",
            "subject": "=RTÜK Compliance Issues Detected - {{ $json.date }}",
            "text": "=IMPORTANT: RTÜK Compliance Issues Detected\n\nDate: {{ $json.date }}\nCompliance Rate: {{ $json.complianceSummary.complianceRate }}\nNon-Compliant Broadcasts: {{ $json.complianceSummary.nonCompliantBroadcasts }}\n\nIssues by Type:\n{% for issue, count in $json.complianceSummary.issuesByType %}\n- {{ issue }}: {{ count }} occurrence(s)\n{% endfor %}\n\nDetailed Non-Compliant Broadcasts:\n{% for log in $json.nonCompliantLogs %}\n* Program: {{ log.programName }}\n  Time: {{ log.startTime }} - {{ log.endTime }}\n  Issues: {{ log.complianceIssues | join(', ') }}\n  Archive Reference: {{ log.archiveReference }}\n{% endfor %}\n\nPlease review these issues immediately and take appropriate action.\n\nThis is an automated message from the Radio Compliance System.",
            "html": "",
            "attachments": "",
            "options": {
              "priority": "high"
            }
          }
        },
        {
          "id": "54",
          "name": "Subscribe to Transmitter Status",
          "type": "n8n-nodes-base.mqtt",
          "typeVersion": 1,
          "position": [
            600,
            1350
          ],
          "parameters": {
            "qos": 1,
            "retain": false,
            "topic": "radio/transmitter/status",
            "clientId": "=radio-automation-{{ $runIndex }}",
            "options": {
              "qos": 1
            }
          }
        },
        {
          "id": "55",
          "name": "Analyze Transmitter Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            800,
            1350
          ],
          "parameters": {
            "functionCode": "// Process transmitter status data\nconst transmitterData = $input.json;\n\n// Extract key metrics\nconst metrics = {\n  power: transmitterData.power || 0,\n  swr: transmitterData.swr || 0,\n  temperature: transmitterData.temperature || 0,\n  frequency: transmitterData.frequency || 0,\n  signalQuality: transmitterData.signalQuality || 0,\n  status: transmitterData.status || 'unknown',\n  timestamp: transmitterData.timestamp || new Date().toISOString()\n};\n\n// Define alert thresholds\nconst thresholds = {\n  power: {\n    warning: transmitterData.powerWarningThreshold || 90, // 90% of nominal\n    critical: transmitterData.powerCriticalThreshold || 80 // 80% of nominal\n  },\n  swr: {\n    warning: transmitterData.swrWarningThreshold || 1.5,\n    critical: transmitterData.swrCriticalThreshold || 2.0\n  },\n  temperature: {\n    warning: transmitterData.tempWarningThreshold || 45, // °C\n    critical: transmitterData.tempCriticalThreshold || 55 // °C\n  },\n  signalQuality: {\n    warning: transmitterData.qualityWarningThreshold || 70, // %\n    critical: transmitterData.qualityCriticalThreshold || 50 // %\n  }\n};\n\n// Check for alerts\nconst alerts = [];\n\n// Check power\nif (metrics.power < thresholds.power.critical) {\n  alerts.push({\n    type: 'power',\n    level: 'critical',\n    message: `Transmitter power critical: ${metrics.power}% of nominal`,\n    value: metrics.power,\n    threshold: thresholds.power.critical\n  });\n} else if (metrics.power < thresholds.power.warning) {\n  alerts.push({\n    type: 'power',\n    level: 'warning',\n    message: `Transmitter power low: ${metrics.power}% of nominal`,\n    value: metrics.power,\n    threshold: thresholds.power.warning\n  });\n}\n\n// Check SWR\nif (metrics.swr > thresholds.swr.critical) {\n  alerts.push({\n    type: 'swr',\n    level: 'critical',\n    message: `SWR critical: ${metrics.swr}`,\n    value: metrics.swr,\n    threshold: thresholds.swr.critical\n  });\n} else if (metrics.swr > thresholds.swr.warning) {\n  alerts.push({\n    type: 'swr',\n    level: 'warning',\n    message: `SWR high: ${metrics.swr}`,\n    value: metrics.swr,\n    threshold: thresholds.swr.warning\n  });\n}\n\n// Check temperature\nif (metrics.temperature > thresholds.temperature.critical) {\n  alerts.push({\n    type: 'temperature',\n    level: 'critical',\n    message: `Temperature critical: ${metrics.temperature}°C`,\n    value: metrics.temperature,\n    threshold: thresholds.temperature.critical\n  });\n} else if (metrics.temperature > thresholds.temperature.warning) {\n  alerts.push({\n    type: 'temperature',\n    level: 'warning',\n    message: `Temperature high: ${metrics.temperature}°C`,\n    value: metrics.temperature,\n    threshold: thresholds.temperature.warning\n  });\n}\n\n// Check signal quality\nif (metrics.signalQuality < thresholds.signalQuality.critical) {\n  alerts.push({\n    type: 'signalQuality',\n    level: 'critical',\n    message: `Signal quality critical: ${metrics.signalQuality}%`,\n    value: metrics.signalQuality,\n    threshold: thresholds.signalQuality.critical\n  });\n} else if (metrics.signalQuality < thresholds.signalQuality.warning) {\n  alerts.push({\n    type: 'signalQuality',\n    level: 'warning',\n    message: `Signal quality low: ${metrics.signalQuality}%`,\n    value: metrics.signalQuality,\n    threshold: thresholds.signalQuality.warning\n  });\n}\n\n// Check status\nif (metrics.status !== 'online' && metrics.status !== 'standby') {\n  alerts.push({\n    type: 'status',\n    level: 'critical',\n    message: `Transmitter status: ${metrics.status}`,\n    value: metrics.status,\n    threshold: 'online'\n  });\n}\n\n// Determine overall status\nlet overallStatus = 'normal';\nif (alerts.some(alert => alert.level === 'critical')) {\n  overallStatus = 'critical';\n} else if (alerts.some(alert => alert.level === 'warning')) {\n  overallStatus = 'warning';\n}\n\nreturn {\n  metrics,\n  alerts,\n  overallStatus,\n  transmitterName: transmitterData.name || 'Main Transmitter',\n  transmitterId: transmitterData.id || 'TX-001',\n  timestamp: new Date().toISOString(),\n  hasAlerts: alerts.length > 0\n};"
          }
        },
        {
          "id": "56",
          "name": "Update Monitoring Dashboard",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            1000,
            1350
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "http://monitoring-dashboard.local/api/transmitter-data",
            "authentication": "genericCredentialType",
            "genericCredentialType": "monitoringSystemCredential",
            "jsonParameters": true,
            "bodyParametersJson": "={\n  \"metrics\": {{ $json.metrics | json }},\n  \"transmitterName\": \"{{ $json.transmitterName }}\",\n  \"transmitterId\": \"{{ $json.transmitterId }}\",\n  \"status\": \"{{ $json.overallStatus }}\",\n  \"timestamp\": \"{{ $json.timestamp }}\"\n}"
          }
        },
        {
          "id": "57",
          "name": "Log Transmitter Data",
          "type": "n8n-nodes-base.writeBinaryFile",
          "typeVersion": 1,
          "position": [
            1200,
            1350
          ],
          "parameters": {
            "filePath": "/var/radio/transmitter-logs/{{ $json.transmitterId }}-{{ $json.timestamp.split('T')[0] }}.jsonl",
            "options": {
              "append": true
            }
          }
        },
        {
          "id": "58",
          "name": "Has Transmitter Alerts?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1400,
            1350
          ],
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $json.hasAlerts }}",
                  "value2": true
                }
              ]
            }
          }
        },
        {
          "id": "59",
          "name": "Is Critical Alert?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1600,
            1300
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.overallStatus }}",
                  "operation": "equal",
                  "value2": "critical"
                }
              ]
            }
          }
        },
        {
          "id": "60",
          "name": "Send Critical Alert Email",
          "type": "n8n-nodes-base.sendEmail",
          "typeVersion": 1,
          "position": [
            1800,
            1250
          ],
          "parameters": {
            "fromEmail": "monitoring@radiostation.com",
            "toRecipients": "=engineering@radiostation.com, oncall@radiostation.com",
            "ccRecipients": "",
            "subject": "=CRITICAL: Transmitter Alert - {{ $json.transmitterName }}",
            "text": "=CRITICAL TRANSMITTER ALERT\n\nTransmitter: {{ $json.transmitterName }} ({{ $json.transmitterId }})\nTime: {{ new Date($json.timestamp).toLocaleString() }}\nStatus: {{ $json.overallStatus.toUpperCase() }}\n\nCRITICAL ALERTS:\n{% for alert in $json.alerts %}\n{% if alert.level == 'critical' %}\n- {{ alert.message }}\n{% endif %}\n{% endfor %}\n\nOTHER ALERTS:\n{% for alert in $json.alerts %}\n{% if alert.level != 'critical' %}\n- {{ alert.message }}\n{% endif %}\n{% endfor %}\n\nCurrent Metrics:\n- Power: {{ $json.metrics.power }}%\n- SWR: {{ $json.metrics.swr }}\n- Temperature: {{ $json.metrics.temperature }}°C\n- Signal Quality: {{ $json.metrics.signalQuality }}%\n- Status: {{ $json.metrics.status }}\n\nIMMEDIATE ACTION REQUIRED\n\nThis is an automated message from the Radio Monitoring System.",
            "html": "",
            "attachments": "",
            "options": {
              "priority": "high"
            }
          }
        },
        {
          "id": "61",
          "name": "Send SMS Alert",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            2000,
            1250
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "https://api.sms-provider.com/send",
            "authentication": "genericCredentialType",
            "genericCredentialType": "smsProviderCredential",
            "jsonParameters": true,
            "bodyParametersJson": "={\n  \"to\": [\"+905551234567\", \"+905559876543\"],\n  \"message\": \"CRITICAL: {{ $json.transmitterName }} alert - {{ $json.alerts[0].message }}. Check email for details.\",\n  \"priority\": \"high\"\n}"
          }
        },
        {
          "id": "62",
          "name": "Send Warning Alert Email",
          "type": "n8n-nodes-base.sendEmail",
          "typeVersion": 1,
          "position": [
            1800,
            1350
          ],
          "parameters": {
            "fromEmail": "monitoring@radiostation.com",
            "toRecipients": "=engineering@radiostation.com",
            "ccRecipients": "",
            "subject": "=Warning: Transmitter Alert - {{ $json.transmitterName }}",
            "text": "=TRANSMITTER WARNING ALERT\n\nTransmitter: {{ $json.transmitterName }} ({{ $json.transmitterId }})\nTime: {{ new Date($json.timestamp).toLocaleString() }}\nStatus: {{ $json.overallStatus.toUpperCase() }}\n\nALERTS:\n{% for alert in $json.alerts %}\n- {{ alert.message }}\n{% endfor %}\n\nCurrent Metrics:\n- Power: {{ $json.metrics.power }}%\n- SWR: {{ $json.metrics.swr }}\n- Temperature: {{ $json.metrics.temperature }}°C\n- Signal Quality: {{ $json.metrics.signalQuality }}%\n- Status: {{ $json.metrics.status }}\n\nPlease investigate at your earliest convenience.\n\nThis is an automated message from the Radio Monitoring System.",
            "html": "",
            "attachments": "",
            "options": {}
          }
        },
        {
          "id": "63",
          "name": "Get Current Broadcast",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            600,
            1500
          ],
          "parameters": {
            "method": "GET",
            "options": {},
            "url": "https://api.socialmediaplatform.com/v1/broadcasts/current",
            "authentication": "genericCredentialType",
            "genericCredentialType": "socialMediaCredential"
          }
        },
        {
          "id": "64",
          "name": "Is Live Broadcast?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            800,
            1500
          ],
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $json.isLive }}",
                  "value2": true
                }
              ]
            }
          }
        },
        {
          "id": "65",
          "name": "Format Social Media Posts",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1000,
            1450
          ],
          "parameters": {
            "functionCode": "// Format social media posts for the live broadcast\nconst broadcast = $input.json;\n\n// Generate hashtags\nconst hashtags = ['#LiveRadio', '#OnAir'];\n\n// Add show-specific hashtag\nif (broadcast.showName) {\n  hashtags.push('#' + broadcast.showName.replace(/\\s+/g, ''));\n}\n\n// Add topic hashtags\nif (broadcast.topics && broadcast.topics.length > 0) {\n  broadcast.topics.forEach(topic => {\n    hashtags.push('#' + topic.replace(/\\s+/g, ''));\n  });\n}\n\n// Add guest hashtags\nif (broadcast.guests && broadcast.guests.length > 0) {\n  broadcast.guests.forEach(guest => {\n    if (guest.socialHandle) {\n      hashtags.push(guest.socialHandle);\n    } else {\n      hashtags.push('#' + guest.name.replace(/\\s+/g, ''));\n    }\n  });\n}\n\n// Format guest list for readability\nlet guestText = '';\nif (broadcast.guests && broadcast.guests.length > 0) {\n  if (broadcast.guests.length === 1) {\n    guestText = `with special guest ${broadcast.guests[0].name}`;\n  } else {\n    const lastGuest = broadcast.guests.pop();\n    guestText = `with guests ${broadcast.guests.map(g => g.name).join(', ')} and ${lastGuest.name}`;\n  }\n}\n\n// Create social media posts\nconst twitterPost = `📻 NOW LIVE: \"${broadcast.showName}\" ${guestText} ${broadcast.description ? '- ' + broadcast.description.substring(0, 100) : ''} Listen now at radiostation.com/live ${hashtags.slice(0, 5).join(' ')}`;\n\nconst facebookPost = `📻 NOW LIVE ON AIR\\n\\n\"${broadcast.showName}\" ${guestText}\\n\\n${broadcast.description || ''}\\n\\nTune in now at radiostation.com/live or through our mobile app!\\n\\n${hashtags.join(' ')}`;\n\nconst instagramPost = `📻 NOW LIVE: \"${broadcast.showName}\"\\n\\n${guestText}\\n\\n${broadcast.description ? broadcast.description.substring(0, 200) + '...' : ''}\\n\\nTune in now - link in bio!\\n\\n${hashtags.join(' ')}`;\n\nreturn {\n  ...broadcast,\n  socialPosts: {\n    twitter: twitterPost,\n    facebook: facebookPost,\n    instagram: instagramPost\n  },\n  hashtags,\n  formattedGuests: guestText,\n  timestamp: new Date().toISOString()\n};"
          }
        },
        {
          "id": "66",
          "name": "Post Live Status to Twitter",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            1200,
            1400
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "https://api.twitter.com/2/tweets",
            "authentication": "oAuth2",
            "nodeCredentialName": "Twitter OAuth2 API",
            "jsonParameters": true,
            "bodyParametersJson": "={\n  \"text\": \"{{ $json.socialPosts.twitter }}\"\n}"
          }
        },
        {
          "id": "67",
          "name": "Post Live Status to Facebook",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            1200,
            1450
          ],
          "parameters": {
            "method": "POST",
            "options": {
              "queryParameters": {
                "parameters": [
                  {
                    "name": "message",
                    "value": "={{ $json.socialPosts.facebook }}"
                  },
                  {
                    "name": "link",
                    "value": "=https://radiostation.com/live"
                  }
                ]
              }
            },
            "url": "https://graph.facebook.com/v17.0/me/feed",
            "authentication": "genericCredentialType",
            "genericCredentialType": "facebookPageCredential"
          }
        },
        {
          "id": "68",
          "name": "Post Live Status to Instagram",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            1200,
            1500
          ],
          "parameters": {
            "method": "POST",
            "options": {
              "queryParameters": {
                "parameters": [
                  {
                    "name": "caption",
                    "value": "={{ $json.socialPosts.instagram }}"
                  },
                  {
                    "name": "image_url",
                    "value": "={{ $json.showImageUrl || 'https://radiostation.com/images/default-show.jpg' }}"
                  }
                ]
              }
            },
            "url": "https://graph.instagram.com/me/media",
            "authentication": "genericCredentialType",
            "genericCredentialType": "instagramCredential"
          }
        },
        {
          "id": "69",
          "name": "Update Social Media Sync Status",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            1400,
            1450
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "https://api.socialmediaplatform.com/v1/broadcasts/{{ $json.id }}/sync-status",
            "authentication": "genericCredentialType",
            "genericCredentialType": "socialMediaCredential",
            "jsonParameters": true,
            "bodyParametersJson": "={\n  \"synced\": true,\n  \"platforms\": [\"twitter\", \"facebook\", \"instagram\"],\n  \"syncTimestamp\": \"{{ $json.timestamp }}\"\n}"
          }
        },
        {
          "id": "70",
          "name": "Monthly Report Scheduler",
          "type": "n8n-nodes-base.cron",
          "typeVersion": 1,
          "position": [
            600,
            1650
          ],
          "parameters": {
            "triggerTimes": {
              "item": [
                {
                  "mode": "everyMonth",
                  "day": 1,
                  "hour": 1,
                  "minute": 0
                }
              ]
            }
          }
        },
        {
          "id": "71",
          "name": "Calculate Report Date Range",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            800,
            1650
          ],
          "parameters": {
            "functionCode": "// Calculate date range for previous month\nconst now = new Date();\nconst lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);\nconst startDate = new Date(lastMonth.getFullYear(), lastMonth.getMonth(), 1);\nconst endDate = new Date(now.getFullYear(), now.getMonth(), 0);\n\n// Format dates for API requests\nconst formatDate = date => {\n  return date.toISOString().split('T')[0];\n};\n\nconst startDateStr = formatDate(startDate);\nconst endDateStr = formatDate(endDate);\n\n// Get month name for report title\nconst monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nconst reportMonth = monthNames[lastMonth.getMonth()];\nconst reportYear = lastMonth.getFullYear();\n\nreturn {\n  startDate: startDateStr,\n  endDate: endDateStr,\n  reportMonth,\n  reportYear,\n  reportTitle: `${reportMonth} ${reportYear} Listening Statistics Report`,\n  generatedAt: new Date().toISOString()\n};"
          }
        },
        {
          "id": "72",
          "name": "Fetch Listening Statistics",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            1000,
            1650
          ],
          "parameters": {
            "method": "GET",
            "options": {
              "queryParameters": {
                "parameters": [
                  {
                    "name": "startDate",
                    "value": "={{ $json.startDate }}"
                  },
                  {
                    "name": "endDate",
                    "value": "={{ $json.endDate }}"
                  }
                ]
              }
            },
            "url": "https://api.analytics.com/v1/radio-stats",
            "authentication": "genericCredentialType",
            "genericCredentialType": "analyticsApiCredential"
          }
        },
        {
          "id": "73",
          "name": "Generate Monthly Statistics Report",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1200,
            1650
          ],
          "parameters": {
            "functionCode": "// Process listening statistics and generate report\nconst stats = $input.json.data || {};\nconst reportInfo = $input.json;\n\n// Ensure all required data structures exist\nstats.dailyListeners = stats.dailyListeners || [];\nstats.showRatings = stats.showRatings || [];\nstats.peakHours = stats.peakHours || [];\nstats.platformBreakdown = stats.platformBreakdown || {};\nstats.demographicData = stats.demographicData || {};\n\n// Calculate key metrics\nconst averageDailyListeners = stats.dailyListeners.reduce((sum, day) => sum + day.count, 0) / stats.dailyListeners.length || 0;\n\n// Find peak listening day\nlet peakDay = { date: 'N/A', count: 0 };\nstats.dailyListeners.forEach(day => {\n  if (day.count > peakDay.count) {\n    peakDay = day;\n  }\n});\n\n// Sort shows by ratings\nstats.showRatings.sort((a, b) => b.rating - a.rating);\nconst topShows = stats.showRatings.slice(0, 5);\nconst bottomShows = [...stats.showRatings].sort((a, b) => a.rating - b.rating).slice(0, 5);\n\n// Find most popular listening hour\nstats.peakHours.sort((a, b) => b.listeners - a.listeners);\nconst peakHour = stats.peakHours[0] || { hour: 'N/A', listeners: 0 };\n\n// Calculate platform distribution percentages\nconst platforms = {};\nlet totalListeners = 0;\n\nfor (const platform in stats.platformBreakdown) {\n  totalListeners += stats.platformBreakdown[platform];\n}\n\nfor (const platform in stats.platformBreakdown) {\n  platforms[platform] = {\n    count: stats.platformBreakdown[platform],\n    percentage: totalListeners > 0 ? \n      (stats.platformBreakdown[platform] / totalListeners * 100).toFixed(1) + '%' : '0%'\n  };\n}\n\n// Format demographic data for report\nconst demographics = {};\nfor (const group in stats.demographicData) {\n  demographics[group] = {\n    count: stats.demographicData[group],\n    percentage: totalListeners > 0 ? \n      (stats.demographicData[group] / totalListeners * 100).toFixed(1) + '%' : '0%'\n  };\n}\n\n// Calculate month-over-month growth if available\nlet growth = 'N/A';\nif (stats.previousMonthAverage && stats.previousMonthAverage > 0) {\n  const growthRate = ((averageDailyListeners - stats.previousMonthAverage) / stats.previousMonthAverage * 100);\n  growth = growthRate.toFixed(1) + '%';\n}\n\n// Generate report summary\nconst reportSummary = {\n  title: reportInfo.reportTitle,\n  period: `${reportInfo.startDate} to ${reportInfo.endDate}`,\n  averageDailyListeners: Math.round(averageDailyListeners),\n  peakDay: {\n    date: peakDay.date,\n    listeners: peakDay.count\n  },\n  peakHour: {\n    hour: peakHour.hour,\n    listeners: peakHour.listeners\n  },\n  topShows,\n  bottomShows,\n  platforms,\n  demographics,\n  growth,\n  generatedAt: reportInfo.generatedAt\n};\n\n// Generate HTML report\nconst htmlReport = `\n<!DOCTYPE html>\n<html>\n<head>\n  <title>${reportSummary.title}</title>\n  <style>\n    body { font-family: Arial, sans-serif; margin: 40px; color: #333; }\n    h1 { color: #2c3e50; }\n    h2 { color: #3498db; margin-top: 30px; }\n    .section { margin-bottom: 30px; }\n    .metric { margin-bottom: 10px; }\n    .metric-title { font-weight: bold; }\n    .metric-value { margin-left: 20px; }\n    table { border-collapse: collapse; width: 100%; margin-top: 10px; }\n    th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n    th { background-color: #f2f2f2; }\n    tr:nth-child(even) { background-color: #f9f9f9; }\n    .growth-positive { color: green; }\n    .growth-negative { color: red; }\n  </style>\n</head>\n<body>\n  <h1>${reportSummary.title}</h1>\n  <p>Report period: ${reportSummary.period}</p>\n  \n  <div class=\"section\">\n    <h2>Key Metrics</h2>\n    <div class=\"metric\">\n      <span class=\"metric-title\">Average Daily Listeners:</span>\n      <span class=\"metric-value\">${reportSummary.averageDailyListeners.toLocaleString()}</span>\n    </div>\n    <div class=\"metric\">\n      <span class=\"metric-title\">Month-over-Month Growth:</span>\n      <span class=\"metric-value ${reportSummary.growth.startsWith('-') ? 'growth-negative' : 'growth-positive'}\">${reportSummary.growth}</span>\n    </div>\n    <div class=\"metric\">\n      <span class=\"metric-title\">Peak Listening Day:</span>\n      <span class=\"metric-value\">${reportSummary.peakDay.date} (${reportSummary.peakDay.listeners.toLocaleString()} listeners)</span>\n    </div>\n    <div class=\"metric\">\n      <span class=\"metric-title\">Peak Listening Hour:</span>\n      <span class=\"metric-value\">${reportSummary.peakHour.hour} (${reportSummary.peakHour.listeners.toLocaleString()} listeners)</span>\n    </div>\n  </div>\n  \n  <div class=\"section\">\n    <h2>Top Performing Shows</h2>\n    <table>\n      <tr>\n        <th>Rank</th>\n        <th>Show Name</th>\n        <th>Rating</th>\n        <th>Average Listeners</th>\n      </tr>\n      ${reportSummary.topShows.map((show, index) => `\n        <tr>\n          <td>${index + 1}</td>\n          <td>${show.name}</td>\n          <td>${show.rating.toFixed(1)}</td>\n          <td>${show.averageListeners.toLocaleString()}</td>\n        </tr>\n      `).join('')}\n    </table>\n  </div>\n  \n  <div class=\"section\">\n    <h2>Lowest Performing Shows</h2>\n    <table>\n      <tr>\n        <th>Rank</th>\n        <th>Show Name</th>\n        <th>Rating</th>\n        <th>Average Listeners</th>\n      </tr>\n      ${reportSummary.bottomShows.map((show, index) => `\n        <tr>\n          <td>${reportSummary.showRatings.length - index}</td>\n          <td>${show.name}</td>\n          <td>${show.rating.toFixed(1)}</td>\n          <td>${show.averageListeners.toLocaleString()}</td>\n        </tr>\n      `).join('')}\n    </table>\n  </div>\n  \n  <div class=\"section\">\n    <h2>Listening Platforms</h2>\n    <table>\n      <tr>\n        <th>Platform</th>\n        <th>Listeners</th>\n        <th>Percentage</th>\n      </tr>\n      ${Object.entries(reportSummary.platforms).map(([platform, data]) => `\n        <tr>\n          <td>${platform}</td>\n          <td>${data.count.toLocaleString()}</td>\n          <td>${data.percentage}</td>\n        </tr>\n      `).join('')}\n    </table>\n  </div>\n  \n  <div class=\"section\">\n    <h2>Listener Demographics</h2>\n    <table>\n      <tr>\n        <th>Age Group</th>\n        <th>Listeners</th>\n        <th>Percentage</th>\n      </tr>\n      ${Object.entries(reportSummary.demographics).map(([group, data]) => `\n        <tr>\n          <td>${group}</td>\n          <td>${data.count.toLocaleString()}</td>\n          <td>${data.percentage}</td>\n        </tr>\n      `).join('')}\n    </table>\n  </div>\n  \n  <p><small>Report generated on ${new Date(reportSummary.generatedAt).toLocaleString()}</small></p>\n</body>\n</html>\n`;\n\nreturn {\n  reportSummary,\n  htmlReport,\n  rawData: stats,\n  reportMonth: reportInfo.reportMonth,\n  reportYear: reportInfo.reportYear,\n  startDate: reportInfo.startDate,\n  endDate: reportInfo.endDate\n};"
          }
        },
        {
          "id": "74",
          "name": "Save Report to File",
          "type": "n8n-nodes-base.writeBinaryFile",
          "typeVersion": 1,
          "position": [
            1400,
            1650
          ],
          "parameters": {
            "filePath": "/var/radio/reports/monthly-stats-{{ $json.reportYear }}-{{ $json.reportMonth.toLowerCase() }}.html",
            "options": {}
          }
        },
        {
          "id": "75",
          "name": "Email Monthly Report",
          "type": "n8n-nodes-base.sendEmail",
          "typeVersion": 1,
          "position": [
            1600,
            1650
          ],
          "parameters": {
            "fromEmail": "reports@radiostation.com",
            "toRecipients": "=management@radiostation.com, programming@radiostation.com, sales@radiostation.com",
            "ccRecipients": "",
            "subject": "={{ $json.reportSummary.title }}",
            "text": "=Monthly Listening Statistics Report\n\nPeriod: {{ $json.startDate }} to {{ $json.endDate }}\n\nKEY METRICS:\n- Average Daily Listeners: {{ $json.reportSummary.averageDailyListeners.toLocaleString() }}\n- Month-over-Month Growth: {{ $json.reportSummary.growth }}\n- Peak Listening Day: {{ $json.reportSummary.peakDay.date }} ({{ $json.reportSummary.peakDay.listeners.toLocaleString() }} listeners)\n- Peak Listening Hour: {{ $json.reportSummary.peakHour.hour }} ({{ $json.reportSummary.peakHour.listeners.toLocaleString() }} listeners)\n\nTOP PERFORMING SHOWS:\n{% for show in $json.reportSummary.topShows %}\n{{ loop.index }}. {{ show.name }} - Rating: {{ show.rating.toFixed(1) }}, Avg Listeners: {{ show.averageListeners.toLocaleString() }}\n{% endfor %}\n\nLOWEST PERFORMING SHOWS:\n{% for show in $json.reportSummary.bottomShows %}\n{{ loop.index }}. {{ show.name }} - Rating: {{ show.rating.toFixed(1) }}, Avg Listeners: {{ show.averageListeners.toLocaleString() }}\n{% endfor %}\n\nThe complete report is attached to this email and has been saved to the reports directory.\n\nThis is an automated message from the Radio Automation System.",
            "html": "",
            "attachments": "",
            "options": {
              "attachments": [
                {
                  "binary": {
                    "data": "={{ $json.htmlReport }}",
                    "mimeType": "text/html",
                    "fileName": "Monthly-Listening-Statistics-{{ $json.reportYear }}-{{ $json.reportMonth }}.html"
                  }
                }
              ]
            }
          }
        },
        {
          "id": "76",
          "name": "Update Dashboard with Report",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            1800,
            1650
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "https://api.dashboard.com/v1/reports/monthly-stats",
            "authentication": "genericCredentialType",
            "genericCredentialType": "dashboardApiCredential",
            "jsonParameters": true,
            "bodyParametersJson": "={\n  \"report\": {{ $json.reportSummary | json }},\n  \"month\": \"{{ $json.reportMonth }}\",\n  \"year\": {{ $json.reportYear }},\n  \"startDate\": \"{{ $json.startDate }}\",\n  \"endDate\": \"{{ $json.endDate }}\"\n}"
          }
        },
        {
          "id": "77",
          "name": "Merge All Features",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            2400,
            950
          ],
          "parameters": {
            "mode": "append",
            "options": {}
          }
        },
        {
          "id": "78",
          "name": "Final Response",
          "type": "n8n-nodes-base.respondToWebhook",
          "typeVersion": 1,
          "position": [
            2600,
            950
          ],
          "parameters": {
            "options": {},
            "respondWith": "json",
            "responseBody": "={\n  \"success\": true,\n  \"message\": \"Radio station automation workflow executed successfully\",\n  \"operation\": \"{{ $json.operation }}\",\n  \"timestamp\": \"{{ $now }}\"\n}"
          }
        },
        {
          "id": "79",
          "name": "Error Trigger",
          "type": "n8n-nodes-base.errorTrigger",
          "typeVersion": 1,
          "position": [
            200,
            1800
          ],
          "parameters": {}
        },
        {
          "id": "80",
          "name": "Process Error Details",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            400,
            1800
          ],
          "parameters": {
            "functionCode": "// Process error details\nconst error = $input.json;\n\n// Format error message\nconst formattedError = {\n  workflow: error.workflow.name,\n  executionId: error.execution.id,\n  errorMessage: error.execution.error.message,\n  errorStack: error.execution.error.stack,\n  timestamp: new Date().toISOString(),\n  nodeWithError: error.execution.lastNodeExecuted,\n  errorType: error.execution.error.name || 'Unknown Error',\n  severity: 'high'\n};\n\n// Determine error category\nlet errorCategory = 'Unknown';\n\nif (formattedError.errorMessage.includes('ECONNREFUSED') || \n    formattedError.errorMessage.includes('ETIMEDOUT') || \n    formattedError.errorMessage.includes('ENOTFOUND')) {\n  errorCategory = 'Connection Error';\n} else if (formattedError.errorMessage.includes('Unauthorized') || \n           formattedError.errorMessage.includes('Authentication failed')) {\n  errorCategory = 'Authentication Error';\n} else if (formattedError.errorMessage.includes('rate limit')) {\n  errorCategory = 'Rate Limit Error';\n} else if (formattedError.errorMessage.includes('SyntaxError')) {\n  errorCategory = 'Syntax Error';\n} else if (formattedError.errorMessage.includes('TypeError')) {\n  errorCategory = 'Type Error';\n}\n\nreturn {\n  ...formattedError,\n  errorCategory,\n  errorSummary: `${errorCategory}: ${formattedError.errorMessage}`,\n  affectedSystem: formattedError.nodeWithError.includes('Transmitter') ? 'Transmitter Monitoring' :\n                 formattedError.nodeWithError.includes('Playlist') ? 'Playlist System' :\n                 formattedError.nodeWithError.includes('Ad') ? 'Ad System' :\n                 formattedError.nodeWithError.includes('Podcast') ? 'Podcast Distribution' :\n                 formattedError.nodeWithError.includes('Weather') ? 'Weather Announcements' :\n                 formattedError.nodeWithError.includes('Guest') ? 'Guest Management' :\n                 formattedError.nodeWithError.includes('Social') ? 'Social Media Integration' :\n                 formattedError.nodeWithError.includes('RTÜK') ? 'Compliance System' :\n                 'General Automation'\n};"
          }
        },
        {
          "id": "81",
          "name": "Log Error to File",
          "type": "n8n-nodes-base.writeBinaryFile",
          "typeVersion": 1,
          "position": [
            600,
            1800
          ],
          "parameters": {
            "filePath": "/var/radio/logs/errors/{{ $json.timestamp.split('T')[0] }}-errors.jsonl",
            "options": {
              "append": true
            }
          }
        },
        {
          "id": "82",
          "name": "Send Error Alert Email",
          "type": "n8n-nodes-base.sendEmail",
          "typeVersion": 1,
          "position": [
            800,
            1800
          ],
          "parameters": {
            "fromEmail": "automation@radiostation.com",
            "toRecipients": "=engineering@radiostation.com, tech-support@radiostation.com",
            "ccRecipients": "",
            "subject": "=Error in Radio Automation: {{ $json.errorCategory }} - {{ $json.affectedSystem }}",
            "text": "=RADIO AUTOMATION ERROR ALERT\n\nError Category: {{ $json.errorCategory }}\nAffected System: {{ $json.affectedSystem }}\nTimestamp: {{ new Date($json.timestamp).toLocaleString() }}\n\nError Message:\n{{ $json.errorMessage }}\n\nWorkflow: {{ $json.workflow }}\nNode: {{ $json.nodeWithError }}\nExecution ID: {{ $json.executionId }}\n\nStack Trace:\n{{ $json.errorStack }}\n\nPlease investigate and resolve this issue as soon as possible.\n\nThis is an automated message from the Error Monitoring System.",
            "html": "",
            "attachments": "",
            "options": {
              "priority": "high"
            }
          }
        }
      ],
      "connections": {
        "Main Control Webhook": {
          "main": [
            [
              {
                "node": "Is Playlist Creation?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Playlist Creation?": {
          "main": [
            [
              {
                "node": "Fetch Songs by Mood",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Is Ad Scheduling?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Ad Scheduling?": {
          "main": [
            [
              {
                "node": "Fetch Active Ad Campaigns",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Is Guest Appointment?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Guest Appointment?": {
          "main": [
            [
              {
                "node": "Fetch Today's Guest Appointments",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Is Listener Request?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Listener Request?": {
          "main": [
            [
              {
                "node": "Listener Request Webhook",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Is Weather/Traffic?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Weather/Traffic?": {
          "main": [
            [
              {
                "node": "Fetch Weather Data",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Is Podcast Upload?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Podcast Upload?": {
          "main": [
            [
              {
                "node": "Fetch Ready Podcasts",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Is Compliance Logging?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Compliance Logging?": {
          "main": [
            [
              {
                "node": "Fetch Today's Broadcasts",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Is Transmitter Monitoring?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Transmitter Monitoring?": {
          "main": [
            [
              {
                "node": "Subscribe to Transmitter Status",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Is Social Media Sync?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Social Media Sync?": {
          "main": [
            [
              {
                "node": "Get Current Broadcast",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Is Statistics Report?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Statistics Report?": {
          "main": [
            [
              {
                "node": "Monthly Report Scheduler",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Weather Data": {
          "main": [
            [
              {
                "node": "Fetch Traffic Data",
                "type": "main",
                "index": 0
              },
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Traffic Data": {
          "main": [
            [
              {
                "node": "Format Weather & Traffic Announcement",
                "type": "main",
                "index": 0
              },
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Weather & Traffic Announcement": {
          "main": [
            [
              {
                "node": "Save Announcement Script",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Save Announcement Script": {
          "main": [
            [
              {
                "node": "Queue Announcement in Playout System",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Queue Announcement in Playout System": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Songs by Mood": {
          "main": [
            [
              {
                "node": "Generate Time-Based Playlist",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Generate Time-Based Playlist": {
          "main": [
            [
              {
                "node": "Save Playlist to Playout System",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Save Playlist to Playout System": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Active Ad Campaigns": {
          "main": [
            [
              {
                "node": "Schedule Ad Blocks",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Schedule Ad Blocks": {
          "main": [
            [
              {
                "node": "Upload Ad Schedule to Playout System",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Upload Ad Schedule to Playout System": {
          "main": [
            [
              {
                "node": "Generate Ad Billing",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Generate Ad Billing": {
          "main": [
            [
              {
                "node": "Send Billing Report Email",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Billing Report Email": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Today's Guest Appointments": {
          "main": [
            [
              {
                "node": "Process Guest Appointments",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Guest Appointments": {
          "main": [
            [
              {
                "node": "Upload Guest Schedule to Playout System",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Upload Guest Schedule to Playout System": {
          "main": [
            [
              {
                "node": "Loop Through Host Emails",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Loop Through Host Emails": {
          "main": [
            [
              {
                "node": "Send Host Notification Email",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Host Notification Email": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Listener Request Webhook": {
          "main": [
            [
              {
                "node": "Process Listener Request",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Listener Request": {
          "main": [
            [
              {
                "node": "Is Valid Request?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Valid Request?": {
          "main": [
            [
              {
                "node": "Add Request to Playout Queue",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Respond with Error",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Add Request to Playout Queue": {
          "main": [
            [
              {
                "node": "Notify DJ of Request",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Notify DJ of Request": {
          "main": [
            [
              {
                "node": "Respond with Success",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Ready Podcasts": {
          "main": [
            [
              {
                "node": "Loop Through Podcasts",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Loop Through Podcasts": {
          "main": [
            [
              {
                "node": "Download Podcast Audio",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Download Podcast Audio": {
          "main": [
            [
              {
                "node": "Process Podcast Metadata",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Podcast Metadata": {
          "main": [
            [
              {
                "node": "Upload to Podcast Server",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Upload to Podcast Server": {
          "main": [
            [
              {
                "node": "Distribute to Podcast Platforms",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Distribute to Podcast Platforms": {
          "main": [
            [
              {
                "node": "Post to Social Media?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Post to Social Media?": {
          "main": [
            [
              {
                "node": "Post to Twitter",
                "type": "main",
                "index": 0
              },
              {
                "node": "Post to Facebook",
                "type": "main",
                "index": 0
              },
              {
                "node": "Post to Instagram",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Update Podcast Status",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Post to Twitter": {
          "main": [
            [
              {
                "node": "Update Podcast Status",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Post to Facebook": {
          "main": [
            [
              {
                "node": "Update Podcast Status",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Post to Instagram": {
          "main": [
            [
              {
                "node": "Update Podcast Status",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Update Podcast Status": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Today's Broadcasts": {
          "main": [
            [
              {
                "node": "Generate RTÜK Compliance Log",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Generate RTÜK Compliance Log": {
          "main": [
            [
              {
                "node": "Save Compliance Log to File",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Save Compliance Log to File": {
          "main": [
            [
              {
                "node": "Submit Compliance Log to RTÜK",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Submit Compliance Log to RTÜK": {
          "main": [
            [
              {
                "node": "Has Compliance Issues?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Has Compliance Issues?": {
          "main": [
            [
              {
                "node": "Send Compliance Alert Email",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Compliance Alert Email": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Subscribe to Transmitter Status": {
          "main": [
            [
              {
                "node": "Analyze Transmitter Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Analyze Transmitter Data": {
          "main": [
            [
              {
                "node": "Update Monitoring Dashboard",
                "type": "main",
                "index": 0
              },
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Update Monitoring Dashboard": {
          "main": [
            [
              {
                "node": "Log Transmitter Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Log Transmitter Data": {
          "main": [
            [
              {
                "node": "Has Transmitter Alerts?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Has Transmitter Alerts?": {
          "main": [
            [
              {
                "node": "Is Critical Alert?",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Critical Alert?": {
          "main": [
            [
              {
                "node": "Send Critical Alert Email",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Send Warning Alert Email",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Critical Alert Email": {
          "main": [
            [
              {
                "node": "Send SMS Alert",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send SMS Alert": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Warning Alert Email": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Current Broadcast": {
          "main": [
            [
              {
                "node": "Is Live Broadcast?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Live Broadcast?": {
          "main": [
            [
              {
                "node": "Format Social Media Posts",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Social Media Posts": {
          "main": [
            [
              {
                "node": "Post Live Status to Twitter",
                "type": "main",
                "index": 0
              },
              {
                "node": "Post Live Status to Facebook",
                "type": "main",
                "index": 0
              },
              {
                "node": "Post Live Status to Instagram",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Post Live Status to Twitter": {
          "main": [
            [
              {
                "node": "Update Social Media Sync Status",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Post Live Status to Facebook": {
          "main": [
            [
              {
                "node": "Update Social Media Sync Status",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Post Live Status to Instagram": {
          "main": [
            [
              {
                "node": "Update Social Media Sync Status",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Update Social Media Sync Status": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Monthly Report Scheduler": {
          "main": [
            [
              {
                "node": "Calculate Report Date Range",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Calculate Report Date Range": {
          "main": [
            [
              {
                "node": "Fetch Listening Statistics",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Listening Statistics": {
          "main": [
            [
              {
                "node": "Generate Monthly Statistics Report",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Generate Monthly Statistics Report": {
          "main": [
            [
              {
                "node": "Save Report to File",
                "type": "main",
                "index": 0
              },
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Save Report to File": {
          "main": [
            [
              {
                "node": "Email Monthly Report",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Email Monthly Report": {
          "main": [
            [
              {
                "node": "Update Dashboard with Report",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Update Dashboard with Report": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge All Features": {
          "main": [
            [
              {
                "node": "Final Response",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Error Trigger": {
          "main": [
            [
              {
                "node": "Process Error Details",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Error Details": {
          "main": [
            [
              {
                "node": "Log Error to File",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Log Error to File": {
          "main": [
            [
              {
                "node": "Send Error Alert Email",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "active": false,
      "settings": {},
      "versionId": "a495937c-8ac4-4bbf-b966-4fd14b148c0a",
      "meta": {
        "instanceId": "7221b4279d96e7954ef75d7c02b5031844eee3ca1705c75c15ad040f91c7b140",
        "userConfigurationRequired": {
          "hasRequiredValues": true,
          "analysis": [
            {
              "nodeId": "39",
              "nodeName": "Download Podcast Audio",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "authentication",
                  "description": "API authentication credentials",
                  "type": "credential",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "54",
              "nodeName": "Subscribe to Transmitter Status",
              "nodeType": "n8n-nodes-base.mqtt",
              "missingValues": [
                {
                  "parameter": "broker",
                  "description": "MQTT broker URL (e.g., your MQTT server address)",
                  "example": "mqtt://your-mqtt-broker.com:1883",
                  "type": "endpoint"
                },
                {
                  "parameter": "username",
                  "description": "MQTT broker username (if authentication required)",
                  "type": "credential",
                  "sensitive": true
                },
                {
                  "parameter": "password",
                  "description": "MQTT broker password (if authentication required)",
                  "type": "credential",
                  "sensitive": true
                }
              ]
            }
          ],
          "report": "## User Configuration Required\n\nThe following configurations need to be set up:\n\n### 🔐 Credentials Required\n\n#### HTTPREQUEST Credentials\nUsed by: Download Podcast Audio\n\n- **authentication**\n\n#### MQTT Credentials\nUsed by: Subscribe to Transmitter Status\n\n- **username**\n- **password**\n\n### ⚙️ Other Configurations\n\n#### Subscribe to Transmitter Status\n- **broker**: MQTT broker URL (e.g., your MQTT server address)\n  Example: `mqtt://your-mqtt-broker.com:1883`\n\n\n### 📋 Next Steps:\n1. Set up credentials in n8n (Settings → Credentials)\n2. Update workflow nodes with your specific values\n3. Test each connection before running the full workflow\n"
        }
      },
      "id": "4epdblgjj78",
      "tags": [],
      "pinData": {}
    },
    "provider": "anthropic",
    "model": "claude-3-7-sonnet-20250219",
    "timestamp": "2025-07-21T15:51:49.223Z",
    "nodeCount": 82,
    "connectionCount": 78
  },
  {
    "id": "84d5f5c7-e1ff-45ad-8f2c-a84bde6675ec",
    "prompt": "To create a comprehensive n8n workflow for automating the wine production and quality control processes for a boutique winery, we need to integrate various tasks related to production, monitoring, quality control, and customer engagement. Here’s a structured plan following the mandatory architecture and critical orchestration guidelines:\n\n### Workflow Structure\n\n#### 1. **Main Entry Point**\n   - **Node**: `n8n-nodes-base.webhook`\n   - **Purpose**: Trigger workflow on specific events such as grape harvest data input or new wine club member sign-up.\n\n#### 2. **Central Router (Switch Node)**\n   - **Node**: `n8n-nodes-base.switch`\n   - **Purpose**: Route the workflow based on the specific task (e.g., production monitoring, quality control, order automation).\n\n#### 3. **Feature Branches**\n\n##### **Production Monitoring Branch**\n- **Sugar/Acid Analysis**\n  - **Nodes**:\n    - `n8n-nodes-base.httpRequest` (Fetch analysis data from lab equipment)\n    - `n8n-nodes-base.code` (Process and store data)\n  - **Connection**: Webhook -> Switch (condition: Production Monitoring) -> HTTP Request -> Code\n\n- **Fermentation Control**\n  - **Nodes**:\n    - `n8n-nodes-base.httpRequest` (Fetch temperature data)\n    - `n8n-nodes-base.code` (Adjust temperature settings)\n  - **Connection**: Webhook -> Switch (condition: Fermentation Control) -> HTTP Request -> Code\n\n- **CO2 and Alcohol Monitoring**\n  - **Nodes**:\n    - `n8n-nodes-base.httpRequest` (Monitor sensors)\n    - `n8n-nodes-base.code` (Analyze for thresholds)\n  - **Connection**: Webhook -> Switch (condition: CO2 and Alcohol Monitoring) -> HTTP Request -> Code\n\n##### **Quality Control Branch**\n- **Barrel Aging Monitoring**\n  - **Nodes**:\n    - `n8n-nodes-base.httpRequest` (Fetch aging data)\n    - `n8n-nodes-base.code` (Check time and conditions)\n  - **Connection**: Webhook -> Switch (condition: Barrel Aging Monitoring) -> HTTP Request -> Code\n\n- **Bottling Line QC**\n  - **Nodes**:\n    - `n8n-nodes-base.httpRequest` (Use camera for QC)\n    - `n8n-nodes-base.code` (Detect errors in labels and corks)\n  - **Connection**: Webhook -> Switch (condition: Bottling Line QC) -> HTTP Request -> Code\n\n##### **Customer Engagement Branch**\n- **Wine Club Order Automation**\n  - **Nodes**:\n    - `n8n-nodes-base.httpRequest` (Process orders)\n    - `n8n-nodes-base.emailSend` (Send confirmation)\n  - **Connection**: Webhook -> Switch (condition: Wine Club Orders) -> HTTP Request -> Email Send\n\n- **Sommelier Training Content**\n  - **Nodes**:\n    - `n8n-nodes-base.httpRequest` (Fetch content data)\n    - `n8n-nodes-base.googleDrive` (Store training materials)\n  - **Connection**: Webhook -> Switch (condition: Sommelier Training) -> HTTP Request -> Google Drive\n\n#### 4. **Central Merge Node**\n   - **Node**: `n8n-nodes-base.merge`\n   - **Purpose**: Combine results from all feature branches for final processing.\n\n#### 5. **Final Processing/Response**\n   - **Node**: `n8n-nodes-base.set`\n   - **Purpose**: Prepare a summary report or actions for the operations team.\n\n### Error Handling\n- **Node**: `n8n-nodes-base.errorTrigger`\n- **Purpose**: Catch any errors throughout the workflow.\n- **Notification**: Use `n8n-nodes-base.emailSend` to alert the team.\n\n### Validation Checklist\n- ☑ All nodes are connected with no isolated chains.\n- ☑ Error handling is implemented with global error catching.\n- ☑ Parallel branches merge correctly into the Central Merge Node.\n- ☑ All data is validated and processed correctly.\n\n### Additional Considerations\n- **Timing**: Use `n8n-nodes-base.wait` nodes where necessary for processes that require time delays (e.g., fermentation).\n- **Data Visualization**: Consider integrating with a dashboard tool for real-time monitoring.\n- **Automation Scheduling**: Implement using `n8n-nodes-base.cron` for periodic tasks like temperature checks.\n\nThis detailed plan ensures a robust and interconnected workflow for managing the intricate processes of wine production and customer engagement in a boutique winery setting.",
    "workflow": {
      "nodes": [
        {
          "id": "1",
          "name": "Main Entry Webhook",
          "type": "n8n-nodes-base.webhook",
          "typeVersion": 1,
          "position": [
            200,
            300
          ],
          "parameters": {
            "httpMethod": "POST",
            "options": {
              "responseMode": "lastNode"
            },
            "path": "winery-automation",
            "authentication": "basicAuth",
            "user": "=={{$env.WEBHOOK_USER}}==",
            "password": "=={{$env.WEBHOOK_PASSWORD}}=="
          },
          "webhookId": "winery-automation-webhook"
        },
        {
          "id": "2",
          "name": "Is Production Monitoring?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            400,
            300
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.action }}",
                  "operation": "equal",
                  "value2": "production_monitoring"
                }
              ]
            }
          }
        },
        {
          "id": "3",
          "name": "Is Quality Control?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            400,
            600
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.action }}",
                  "operation": "equal",
                  "value2": "quality_control"
                }
              ]
            }
          }
        },
        {
          "id": "4",
          "name": "Is Customer Engagement?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            400,
            900
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.action }}",
                  "operation": "equal",
                  "value2": "customer_engagement"
                }
              ]
            }
          }
        },
        {
          "id": "5",
          "name": "Production Monitoring Router",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            600,
            300
          ],
          "parameters": {
            "conditions": {
              "boolean": [],
              "string": [
                {
                  "value1": "={{ $json.value }}",
                  "operation": "equals",
                  "value2": "sugar_acid_analysis"
                }
              ],
              "number": []
            },
            "fallbackOutput": 3
          }
        },
        {
          "id": "6",
          "name": "Quality Control Router",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            600,
            600
          ],
          "parameters": {
            "conditions": {
              "boolean": [],
              "string": [
                {
                  "value1": "={{ $json.value }}",
                  "operation": "equals",
                  "value2": "barrel_aging"
                }
              ],
              "number": []
            },
            "fallbackOutput": 3
          }
        },
        {
          "id": "7",
          "name": "Customer Engagement Router",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            600,
            900
          ],
          "parameters": {
            "conditions": {
              "boolean": [],
              "string": [
                {
                  "value1": "={{ $json.value }}",
                  "operation": "equals",
                  "value2": "wine_club_orders"
                }
              ],
              "number": []
            },
            "fallbackOutput": 3
          }
        },
        {
          "id": "8",
          "name": "Fetch Sugar/Acid Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            800,
            200
          ],
          "parameters": {
            "method": "POST",
            "options": {
              "response": {
                "response": {
                  "fullResponse": true,
                  "responseFormat": "json"
                }
              }
            },
            "url": "https://api.winery.local/lab/analysis",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Authorization",
                  "value": "=={{$env.LAB_API_KEY}}"
                },
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"batch_id\",\"value\":\"={{ $json.batch_id }}\"},{\"name\":\"sample_date\",\"value\":\"={{ $json.sample_date }}\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "9",
          "name": "Process Sugar/Acid Analysis",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1000,
            200
          ],
          "parameters": {
            "functionCode": "// Process sugar and acid data\nconst response = $input.item.json.body;\nconst batchId = $input.item.json.batch_id;\n\n// Extract key values\nconst sugarLevel = response.sugar_brix;\nconst pHLevel = response.ph;\nconst totalAcidity = response.total_acidity;\n\n// Determine if action is needed\nlet actionNeeded = false;\nlet actionMessage = \"\";\n\n// Check sugar levels (Brix)\nif (sugarLevel < 20 && response.stage === 'pre-harvest') {\n  actionNeeded = true;\n  actionMessage += \"Sugar levels too low for harvest. Continue ripening. \";\n} else if (sugarLevel > 26 && response.stage === 'pre-harvest') {\n  actionNeeded = true;\n  actionMessage += \"Sugar levels high - schedule immediate harvest. \";\n}\n\n// Check pH\nif (pHLevel > 3.8) {\n  actionNeeded = true;\n  actionMessage += \"pH too high - acid addition recommended. \";\n} else if (pHLevel < 3.2 && response.wine_type === 'red') {\n  actionNeeded = true;\n  actionMessage += \"pH too low for red wine - consider potassium addition. \";\n}\n\n// Check total acidity\nif (totalAcidity < 5.0 && response.wine_type === 'white') {\n  actionNeeded = true;\n  actionMessage += \"Acidity too low for white wine - acid addition recommended. \";\n} else if (totalAcidity > 9.0) {\n  actionNeeded = true;\n  actionMessage += \"Acidity too high - consider deacidification. \";\n}\n\n// Store historical data\nconst timestamp = new Date().toISOString();\nconst analysisRecord = {\n  batch_id: batchId,\n  timestamp: timestamp,\n  sugar_brix: sugarLevel,\n  ph: pHLevel,\n  total_acidity: totalAcidity,\n  action_needed: actionNeeded,\n  action_message: actionMessage,\n  analysis_type: \"sugar_acid\",\n  raw_data: response\n};\n\nreturn {\n  json: analysisRecord\n};"
          }
        },
        {
          "id": "10",
          "name": "Fetch Fermentation Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            800,
            300
          ],
          "parameters": {
            "method": "GET",
            "options": {
              "response": {
                "response": {
                  "fullResponse": true,
                  "responseFormat": "json"
                }
              }
            },
            "url": "https://api.winery.local/fermentation/status",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Authorization",
                  "value": "=={{$env.FERMENTATION_API_KEY}}"
                }
              ]
            },
            "queryParameters": {
              "parameters": [
                {
                  "name": "tank_id",
                  "value": "={{ $json.tank_id }}"
                }
              ]
            }
          }
        },
        {
          "id": "11",
          "name": "Process Fermentation Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1000,
            300
          ],
          "parameters": {
            "functionCode": "// Process fermentation data\nconst response = $input.item.json.body;\nconst tankId = $input.item.json.tank_id;\n\n// Extract key values\nconst currentTemp = response.current_temperature;\nconst targetTemp = response.target_temperature;\nconst fermentationStage = response.stage;\nconst wineType = response.wine_type;\n\n// Determine if temperature adjustment is needed\nlet adjustmentNeeded = false;\nlet adjustmentMessage = \"\";\nlet newTargetTemp = targetTemp;\n\n// Temperature variance threshold\nconst tempVarianceThreshold = 2.0;\n\n// Check if current temperature is outside acceptable range\nif (Math.abs(currentTemp - targetTemp) > tempVarianceThreshold) {\n  adjustmentNeeded = true;\n  adjustmentMessage = `Temperature variance detected. Current: ${currentTemp}°C, Target: ${targetTemp}°C. Adjusting temperature control system.`;\n}\n\n// Adjust target temperature based on fermentation stage and wine type\nif (fermentationStage === 'early' && wineType === 'red' && targetTemp < 25) {\n  newTargetTemp = 25;\n  adjustmentNeeded = true;\n  adjustmentMessage += \" Increasing target temperature for red wine early fermentation.\";\n} else if (fermentationStage === 'early' && wineType === 'white' && targetTemp > 15) {\n  newTargetTemp = 15;\n  adjustmentNeeded = true;\n  adjustmentMessage += \" Decreasing target temperature for white wine early fermentation.\";\n} else if (fermentationStage === 'late' && targetTemp > 20) {\n  newTargetTemp = 20;\n  adjustmentNeeded = true;\n  adjustmentMessage += \" Adjusting temperature for late fermentation stage.\";\n}\n\n// Prepare temperature control command if needed\nlet temperatureCommand = null;\nif (adjustmentNeeded) {\n  temperatureCommand = {\n    tank_id: tankId,\n    set_temperature: newTargetTemp,\n    reason: adjustmentMessage\n  };\n}\n\n// Store monitoring data\nconst timestamp = new Date().toISOString();\nconst fermentationRecord = {\n  tank_id: tankId,\n  timestamp: timestamp,\n  current_temperature: currentTemp,\n  target_temperature: targetTemp,\n  new_target_temperature: newTargetTemp,\n  adjustment_needed: adjustmentNeeded,\n  adjustment_message: adjustmentMessage,\n  fermentation_stage: fermentationStage,\n  wine_type: wineType,\n  temperature_command: temperatureCommand,\n  raw_data: response\n};\n\nreturn {\n  json: fermentationRecord\n};"
          }
        },
        {
          "id": "12",
          "name": "Temperature Adjustment Needed?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1200,
            300
          ],
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $json.adjustment_needed }}",
                  "value2": true
                }
              ]
            }
          }
        },
        {
          "id": "13",
          "name": "Adjust Temperature",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1400,
            240
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "https://api.winery.local/fermentation/control",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Authorization",
                  "value": "=={{$env.FERMENTATION_API_KEY}}"
                },
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"tank_id\",\"value\":\"={{ $json.tank_id }}\"},{\"name\":\"set_temperature\",\"value\":\"={{ $json.new_target_temperature }}\"},{\"name\":\"reason\",\"value\":\"={{ $json.adjustment_message }}\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "14",
          "name": "Fetch CO2 & Alcohol Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            800,
            400
          ],
          "parameters": {
            "method": "GET",
            "options": {},
            "url": "https://api.winery.local/tanks/monitoring",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Authorization",
                  "value": "=={{$env.MONITORING_API_KEY}}"
                }
              ]
            },
            "queryParameters": {
              "parameters": [
                {
                  "name": "tank_id",
                  "value": "={{ $json.tank_id }}"
                },
                {
                  "name": "metrics",
                  "value": "co2,alcohol"
                }
              ]
            }
          }
        },
        {
          "id": "15",
          "name": "Analyze CO2 & Alcohol Levels",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1000,
            400
          ],
          "parameters": {
            "functionCode": "// Process CO2 and alcohol data\nconst response = $input.item.json.body;\nconst tankId = $input.item.json.tank_id;\n\n// Extract key values\nconst co2Level = response.co2_level;\nconst alcoholLevel = response.alcohol_level;\nconst fermentationStage = response.fermentation_stage;\nconst wineType = response.wine_type;\n\n// Define thresholds based on wine type and fermentation stage\nlet co2Threshold, alcoholThresholdMin, alcoholThresholdMax;\n\nif (wineType === 'red') {\n  co2Threshold = fermentationStage === 'active' ? 30 : 10;\n  alcoholThresholdMin = 12;\n  alcoholThresholdMax = 15;\n} else if (wineType === 'white') {\n  co2Threshold = fermentationStage === 'active' ? 25 : 8;\n  alcoholThresholdMin = 10;\n  alcoholThresholdMax = 13;\n} else if (wineType === 'sparkling') {\n  co2Threshold = 40; // Higher for sparkling wine\n  alcoholThresholdMin = 11;\n  alcoholThresholdMax = 12.5;\n} else {\n  // Default values\n  co2Threshold = 20;\n  alcoholThresholdMin = 11;\n  alcoholThresholdMax = 14;\n}\n\n// Check for alerts\nlet alertNeeded = false;\nlet alertMessage = \"\";\n\n// CO2 level check\nif (fermentationStage === 'active' && co2Level < co2Threshold) {\n  alertNeeded = true;\n  alertMessage += `Low CO2 level (${co2Level}) detected in tank ${tankId}. Possible stuck fermentation. `;\n} else if (fermentationStage === 'complete' && co2Level > co2Threshold) {\n  alertNeeded = true;\n  alertMessage += `High CO2 level (${co2Level}) detected in tank ${tankId} during completed fermentation stage. Verify fermentation status. `;\n}\n\n// Alcohol level check\nif (alcoholLevel < alcoholThresholdMin) {\n  alertNeeded = true;\n  alertMessage += `Low alcohol level (${alcoholLevel}%) detected in tank ${tankId}. Below target for ${wineType} wine. `;\n} else if (alcoholLevel > alcoholThresholdMax) {\n  alertNeeded = true;\n  alertMessage += `High alcohol level (${alcoholLevel}%) detected in tank ${tankId}. Above target for ${wineType} wine. `;\n}\n\n// Store monitoring data\nconst timestamp = new Date().toISOString();\nconst monitoringRecord = {\n  tank_id: tankId,\n  timestamp: timestamp,\n  co2_level: co2Level,\n  alcohol_level: alcoholLevel,\n  co2_threshold: co2Threshold,\n  alcohol_threshold_min: alcoholThresholdMin,\n  alcohol_threshold_max: alcoholThresholdMax,\n  fermentation_stage: fermentationStage,\n  wine_type: wineType,\n  alert_needed: alertNeeded,\n  alert_message: alertMessage,\n  raw_data: response\n};\n\nreturn {\n  json: monitoringRecord\n};"
          }
        },
        {
          "id": "16",
          "name": "CO2/Alcohol Alert Needed?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1200,
            400
          ],
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $json.alert_needed }}",
                  "value2": true
                }
              ]
            }
          }
        },
        {
          "id": "17",
          "name": "Send CO2/Alcohol Alert",
          "type": "n8n-nodes-base.sendEmail",
          "typeVersion": 1,
          "position": [
            1400,
            340
          ],
          "parameters": {
            "fromEmail": "",
            "toRecipients": "=={{$env.WINEMAKER_EMAIL}}==",
            "ccRecipients": "",
            "subject": "==[ALERT] Fermentation Issue in Tank {{ $json.tank_id }}==",
            "text": "==Dear Winemaker,\n\nAn issue has been detected in the fermentation process:\n\n{{ $json.alert_message }}\n\nCurrent readings:\n- CO2 Level: {{ $json.co2_level }}\n- Alcohol Level: {{ $json.alcohol_level }}%\n- Fermentation Stage: {{ $json.fermentation_stage }}\n- Wine Type: {{ $json.wine_type }}\n\nPlease inspect Tank {{ $json.tank_id }} at your earliest convenience.\n\nThis is an automated message from your Winery Automation System.\n\nRegards,\nWinery Automation System==",
            "html": "",
            "attachments": "",
            "options": {}
          }
        },
        {
          "id": "18",
          "name": "Fetch Barrel Aging Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            800,
            500
          ],
          "parameters": {
            "method": "GET",
            "options": {},
            "url": "https://api.winery.local/barrels/monitoring",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Authorization",
                  "value": "=={{$env.BARREL_API_KEY}}"
                }
              ]
            },
            "queryParameters": {
              "parameters": [
                {
                  "name": "barrel_id",
                  "value": "={{ $json.barrel_id }}"
                }
              ]
            }
          }
        },
        {
          "id": "19",
          "name": "Analyze Barrel Aging",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1000,
            500
          ],
          "parameters": {
            "functionCode": "// Process barrel aging data\nconst response = $input.item.json.body;\nconst barrelId = $input.item.json.barrel_id;\n\n// Extract key values\nconst temperature = response.temperature;\nconst humidity = response.humidity;\nconst oxygenLevel = response.oxygen_level;\nconst agingDays = response.days_aging;\nconst wineType = response.wine_type;\nconst barrelType = response.barrel_type;\n\n// Define optimal ranges based on wine and barrel type\nlet tempOptimalMin, tempOptimalMax;\nlet humidityOptimalMin, humidityOptimalMax;\nlet oxygenOptimalMax;\nlet recommendedAgingPeriod;\n\n// Set optimal ranges based on wine type\nif (wineType === 'red') {\n  tempOptimalMin = 13;\n  tempOptimalMax = 16;\n  humidityOptimalMin = 70;\n  humidityOptimalMax = 80;\n  oxygenOptimalMax = 0.8;\n  \n  // Recommended aging periods for red wine based on barrel type\n  if (barrelType === 'french_oak_new') {\n    recommendedAgingPeriod = 18; // months\n  } else if (barrelType === 'american_oak_new') {\n    recommendedAgingPeriod = 15; // months\n  } else if (barrelType.includes('used')) {\n    recommendedAgingPeriod = 12; // months\n  } else {\n    recommendedAgingPeriod = 14; // default for other barrel types\n  }\n} else if (wineType === 'white') {\n  tempOptimalMin = 11;\n  tempOptimalMax = 14;\n  humidityOptimalMin = 70;\n  humidityOptimalMax = 80;\n  oxygenOptimalMax = 0.5;\n  \n  // Recommended aging periods for white wine based on barrel type\n  if (barrelType.includes('oak')) {\n    recommendedAgingPeriod = 8; // months\n  } else {\n    recommendedAgingPeriod = 6; // months\n  }\n} else {\n  // Default values for other wine types\n  tempOptimalMin = 12;\n  tempOptimalMax = 15;\n  humidityOptimalMin = 70;\n  humidityOptimalMax = 80;\n  oxygenOptimalMax = 0.7;\n  recommendedAgingPeriod = 10; // months\n}\n\n// Convert recommended aging period from months to days\nrecommendedAgingPeriod = recommendedAgingPeriod * 30;\n\n// Check for issues\nlet issuesDetected = false;\nlet issueMessages = [];\n\n// Temperature check\nif (temperature < tempOptimalMin) {\n  issuesDetected = true;\n  issueMessages.push(`Temperature too low: ${temperature}°C (optimal range: ${tempOptimalMin}-${tempOptimalMax}°C)`); \n} else if (temperature > tempOptimalMax) {\n  issuesDetected = true;\n  issueMessages.push(`Temperature too high: ${temperature}°C (optimal range: ${tempOptimalMin}-${tempOptimalMax}°C)`);\n}\n\n// Humidity check\nif (humidity < humidityOptimalMin) {\n  issuesDetected = true;\n  issueMessages.push(`Humidity too low: ${humidity}% (optimal range: ${humidityOptimalMin}-${humidityOptimalMax}%)`);\n} else if (humidity > humidityOptimalMax) {\n  issuesDetected = true;\n  issueMessages.push(`Humidity too high: ${humidity}% (optimal range: ${humidityOptimalMin}-${humidityOptimalMax}%)`);\n}\n\n// Oxygen level check\nif (oxygenLevel > oxygenOptimalMax) {\n  issuesDetected = true;\n  issueMessages.push(`Oxygen level too high: ${oxygenLevel} ppm (optimal max: ${oxygenOptimalMax} ppm)`);\n}\n\n// Aging period check\nlet agingStatus;\nlet agingPercentComplete = Math.round((agingDays / recommendedAgingPeriod) * 100);\n\nif (agingDays >= recommendedAgingPeriod) {\n  agingStatus = \"Complete\";\n  issueMessages.push(`Aging complete (${agingDays} days). Ready for tasting and potential bottling.`);\n} else if (agingPercentComplete >= 90) {\n  agingStatus = \"Near Complete\";\n  issueMessages.push(`Aging nearly complete (${agingPercentComplete}%). Schedule tasting soon.`);\n} else if (agingPercentComplete >= 50) {\n  agingStatus = \"In Progress\";\n  issueMessages.push(`Aging in progress (${agingPercentComplete}%). Midpoint tasting recommended.`);\n} else {\n  agingStatus = \"Early Stage\";\n  issueMessages.push(`Aging in early stage (${agingPercentComplete}%).`);\n}\n\n// Combine issue messages\nconst issueMessage = issueMessages.join(\" | \");\n\n// Store monitoring data\nconst timestamp = new Date().toISOString();\nconst barrelRecord = {\n  barrel_id: barrelId,\n  timestamp: timestamp,\n  temperature: temperature,\n  humidity: humidity,\n  oxygen_level: oxygenLevel,\n  aging_days: agingDays,\n  wine_type: wineType,\n  barrel_type: barrelType,\n  recommended_aging_period: recommendedAgingPeriod,\n  aging_percent_complete: agingPercentComplete,\n  aging_status: agingStatus,\n  issues_detected: issuesDetected,\n  issue_message: issueMessage,\n  raw_data: response\n};\n\nreturn {\n  json: barrelRecord\n};"
          }
        },
        {
          "id": "20",
          "name": "Barrel Issues Detected?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1200,
            500
          ],
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $json.issues_detected }}",
                  "value2": true
                }
              ]
            }
          }
        },
        {
          "id": "21",
          "name": "Send Barrel Alert",
          "type": "n8n-nodes-base.sendEmail",
          "typeVersion": 1,
          "position": [
            1400,
            440
          ],
          "parameters": {
            "fromEmail": "",
            "toRecipients": "=={{$env.CELLAR_MASTER_EMAIL}}==",
            "ccRecipients": "",
            "subject": "==[ALERT] Barrel Aging Issue - Barrel {{ $json.barrel_id }}==",
            "text": "==Dear Cellar Master,\n\nThe following issue(s) have been detected with barrel {{ $json.barrel_id }}:\n\n{{ $json.issue_message }}\n\nCurrent conditions:\n- Temperature: {{ $json.temperature }}°C\n- Humidity: {{ $json.humidity }}%\n- Oxygen Level: {{ $json.oxygen_level }} ppm\n- Aging Days: {{ $json.aging_days }} days\n- Aging Status: {{ $json.aging_status }} ({{ $json.aging_percent_complete }}% complete)\n- Wine Type: {{ $json.wine_type }}\n- Barrel Type: {{ $json.barrel_type }}\n\nPlease inspect the barrel at your earliest convenience.\n\nThis is an automated message from your Winery Automation System.\n\nRegards,\nWinery Automation System==",
            "html": "",
            "attachments": "",
            "options": {}
          }
        },
        {
          "id": "22",
          "name": "Fetch Bottling Line Images",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            800,
            600
          ],
          "parameters": {
            "method": "GET",
            "options": {},
            "url": "https://api.winery.local/bottling/camera",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Authorization",
                  "value": "=={{$env.BOTTLING_API_KEY}}"
                }
              ]
            },
            "queryParameters": {
              "parameters": [
                {
                  "name": "batch_id",
                  "value": "={{ $json.batch_id }}"
                },
                {
                  "name": "sample_size",
                  "value": "100"
                }
              ]
            }
          }
        },
        {
          "id": "23",
          "name": "Analyze Bottling QC",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1000,
            600
          ],
          "parameters": {
            "functionCode": "// Process bottling line QC data\nconst response = $input.item.json.body;\nconst batchId = $input.item.json.batch_id;\n\n// Extract key values\nconst imagesAnalyzed = response.images_analyzed;\nconst defectsDetected = response.defects_detected;\nconst defectRate = (defectsDetected / imagesAnalyzed) * 100;\n\n// Categorize defects\nconst labelDefects = response.defect_categories.label_defects || 0;\nconst corkDefects = response.defect_categories.cork_defects || 0;\nconst fillLevelDefects = response.defect_categories.fill_level_defects || 0;\nconst capDefects = response.defect_categories.cap_defects || 0;\nconst otherDefects = response.defect_categories.other_defects || 0;\n\n// Define acceptable thresholds\nconst totalDefectThreshold = 2.0; // 2% max acceptable defect rate\nconst labelDefectThreshold = 1.0;\nconst corkDefectThreshold = 0.5;\nconst fillLevelDefectThreshold = 0.8;\nconst capDefectThreshold = 0.8;\n\n// Check for quality issues\nlet qualityIssue = false;\nlet actionRequired = false;\nlet issueMessages = [];\n\n// Check total defect rate\nif (defectRate > totalDefectThreshold) {\n  qualityIssue = true;\n  actionRequired = true;\n  issueMessages.push(`High overall defect rate: ${defectRate.toFixed(2)}% (threshold: ${totalDefectThreshold}%)`);\n}\n\n// Check specific defect categories\nconst labelDefectRate = (labelDefects / imagesAnalyzed) * 100;\nif (labelDefectRate > labelDefectThreshold) {\n  qualityIssue = true;\n  issueMessages.push(`High label defect rate: ${labelDefectRate.toFixed(2)}% (threshold: ${labelDefectThreshold}%)`);\n}\n\nconst corkDefectRate = (corkDefects / imagesAnalyzed) * 100;\nif (corkDefectRate > corkDefectThreshold) {\n  qualityIssue = true;\n  actionRequired = true; // Cork issues are critical\n  issueMessages.push(`High cork defect rate: ${corkDefectRate.toFixed(2)}% (threshold: ${corkDefectThreshold}%)`);\n}\n\nconst fillLevelDefectRate = (fillLevelDefects / imagesAnalyzed) * 100;\nif (fillLevelDefectRate > fillLevelDefectThreshold) {\n  qualityIssue = true;\n  actionRequired = true; // Fill level issues are critical\n  issueMessages.push(`High fill level defect rate: ${fillLevelDefectRate.toFixed(2)}% (threshold: ${fillLevelDefectThreshold}%)`);\n}\n\nconst capDefectRate = (capDefects / imagesAnalyzed) * 100;\nif (capDefectRate > capDefectThreshold) {\n  qualityIssue = true;\n  issueMessages.push(`High cap defect rate: ${capDefectRate.toFixed(2)}% (threshold: ${capDefectThreshold}%)`);\n}\n\n// Determine recommended action\nlet recommendedAction = \"Continue production\";\nif (actionRequired) {\n  recommendedAction = \"STOP BOTTLING LINE for inspection\";\n} else if (qualityIssue) {\n  recommendedAction = \"Monitor closely and check equipment\";\n}\n\n// Combine issue messages\nconst issueMessage = issueMessages.join(\" | \");\n\n// Store QC data\nconst timestamp = new Date().toISOString();\nconst qcRecord = {\n  batch_id: batchId,\n  timestamp: timestamp,\n  images_analyzed: imagesAnalyzed,\n  defects_detected: defectsDetected,\n  defect_rate: defectRate,\n  label_defect_rate: labelDefectRate,\n  cork_defect_rate: corkDefectRate,\n  fill_level_defect_rate: fillLevelDefectRate,\n  cap_defect_rate: capDefectRate,\n  quality_issue: qualityIssue,\n  action_required: actionRequired,\n  issue_message: issueMessage,\n  recommended_action: recommendedAction,\n  raw_data: response\n};\n\nreturn {\n  json: qcRecord\n};"
          }
        },
        {
          "id": "24",
          "name": "Bottling QC Issues?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1200,
            600
          ],
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $json.quality_issue }}",
                  "value2": true
                }
              ]
            }
          }
        },
        {
          "id": "25",
          "name": "Send Bottling QC Alert",
          "type": "n8n-nodes-base.sendEmail",
          "typeVersion": 1,
          "position": [
            1400,
            540
          ],
          "parameters": {
            "fromEmail": "",
            "toRecipients": "=={{$env.BOTTLING_MANAGER_EMAIL}}==",
            "ccRecipients": "",
            "subject": "==[{{ $json.action_required ? 'URGENT' : 'ALERT' }}] Bottling Line QC Issue - Batch {{ $json.batch_id }}==",
            "text": "==Dear Bottling Manager,\n\n{{ $json.action_required ? 'URGENT ACTION REQUIRED' : 'Quality issue detected' }} on the bottling line for batch {{ $json.batch_id }}.\n\nIssues detected:\n{{ $json.issue_message }}\n\nRecommended action: {{ $json.recommended_action }}\n\nQC Statistics:\n- Images Analyzed: {{ $json.images_analyzed }}\n- Overall Defect Rate: {{ $json.defect_rate.toFixed(2) }}%\n- Label Defect Rate: {{ $json.label_defect_rate.toFixed(2) }}%\n- Cork Defect Rate: {{ $json.cork_defect_rate.toFixed(2) }}%\n- Fill Level Defect Rate: {{ $json.fill_level_defect_rate.toFixed(2) }}%\n- Cap Defect Rate: {{ $json.cap_defect_rate.toFixed(2) }}%\n\nPlease inspect the bottling line immediately.\n\nThis is an automated message from your Winery Automation System.\n\nRegards,\nWinery Automation System==",
            "html": "",
            "attachments": "",
            "options": {}
          }
        },
        {
          "id": "26",
          "name": "Schedule Taste Testing",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            800,
            700
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "https://api.winery.local/tasting/schedule",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Authorization",
                  "value": "=={{$env.TASTING_API_KEY}}"
                },
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"batch_id\",\"value\":\"={{ $json.batch_id }}\"},{\"name\":\"wine_type\",\"value\":\"={{ $json.wine_type }}\"},{\"name\":\"vintage\",\"value\":\"={{ $json.vintage }}\"},{\"name\":\"requested_date\",\"value\":\"={{ $json.requested_date }}\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "27",
          "name": "Process Taste Testing Schedule",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1000,
            700
          ],
          "parameters": {
            "functionCode": "// Process taste testing scheduling response\nconst response = $input.item.json.body;\nconst batchId = $input.item.json.batch_id;\n\n// Extract key values\nconst scheduledDate = response.scheduled_date;\nconst tastingPanel = response.tasting_panel;\nconst tastingLocation = response.location;\nconst wineType = $input.item.json.wine_type;\nconst vintage = $input.item.json.vintage;\n\n// Format the date nicely\nconst formattedDate = new Date(scheduledDate).toLocaleString('en-US', {\n  weekday: 'long',\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric',\n  hour: '2-digit',\n  minute: '2-digit'\n});\n\n// Create a list of panel members\nlet panelMembers = \"\";\nif (Array.isArray(tastingPanel)) {\n  panelMembers = tastingPanel.map(member => \n    `- ${member.name} (${member.role})`\n  ).join(\"\\n\");\n}\n\n// Create calendar event details\nconst calendarEvent = {\n  title: `Wine Tasting: ${wineType} ${vintage} (Batch ${batchId})`,\n  location: tastingLocation,\n  start_time: scheduledDate,\n  duration_minutes: 90,\n  description: `Formal tasting session for ${wineType} ${vintage} (Batch ${batchId})\\n\\nPanel Members:\\n${panelMembers}`,\n  attendees: tastingPanel.map(member => member.email)\n};\n\n// Prepare notification message\nconst notificationMessage = `Taste testing for ${wineType} ${vintage} (Batch ${batchId}) has been scheduled for ${formattedDate} at ${tastingLocation}.`;\n\n// Store scheduling data\nconst timestamp = new Date().toISOString();\nconst tastingRecord = {\n  batch_id: batchId,\n  timestamp: timestamp,\n  wine_type: wineType,\n  vintage: vintage,\n  scheduled_date: scheduledDate,\n  formatted_date: formattedDate,\n  tasting_panel: tastingPanel,\n  tasting_location: tastingLocation,\n  notification_message: notificationMessage,\n  calendar_event: calendarEvent,\n  raw_response: response\n};\n\nreturn {\n  json: tastingRecord\n};"
          }
        },
        {
          "id": "28",
          "name": "Create Calendar Event",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1200,
            700
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "https://api.winery.local/calendar/events",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Authorization",
                  "value": "=={{$env.CALENDAR_API_KEY}}"
                },
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"title\",\"value\":\"={{ $json.calendar_event.title }}\"},{\"name\":\"location\",\"value\":\"={{ $json.calendar_event.location }}\"},{\"name\":\"start_time\",\"value\":\"={{ $json.calendar_event.start_time }}\"},{\"name\":\"duration_minutes\",\"value\":\"={{ $json.calendar_event.duration_minutes }}\"},{\"name\":\"description\",\"value\":\"={{ $json.calendar_event.description }}\"},{\"name\":\"attendees\",\"value\":\"={{ $json.calendar_event.attendees }}\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "29",
          "name": "Notify Tasting Panel",
          "type": "n8n-nodes-base.sendEmail",
          "typeVersion": 1,
          "position": [
            1400,
            700
          ],
          "parameters": {
            "fromEmail": "",
            "toRecipients": "={{ $json.tasting_panel.map(member => member.email).join(\",\") }}",
            "ccRecipients": "",
            "subject": "==Wine Tasting Scheduled: {{ $json.wine_type }} {{ $json.vintage }}==",
            "text": "==Dear Tasting Panel,\n\nA wine tasting session has been scheduled:\n\nWine: {{ $json.wine_type }} {{ $json.vintage }} (Batch {{ $json.batch_id }})\nDate: {{ $json.formatted_date }}\nLocation: {{ $json.tasting_location }}\n\nPlease ensure your availability for this important quality control tasting.\n\nA calendar invitation has been sent to your email.\n\nRegards,\nWinery Quality Control Team==",
            "html": "",
            "attachments": "",
            "options": {}
          }
        },
        {
          "id": "30",
          "name": "Fetch Wine Club Orders",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            800,
            800
          ],
          "parameters": {
            "method": "GET",
            "options": {},
            "url": "https://api.winery.local/orders/wine-club",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Authorization",
                  "value": "=={{$env.ORDERS_API_KEY}}"
                }
              ]
            },
            "queryParameters": {
              "parameters": [
                {
                  "name": "status",
                  "value": "pending"
                },
                {
                  "name": "limit",
                  "value": "50"
                }
              ]
            }
          }
        },
        {
          "id": "31",
          "name": "Process Wine Club Orders",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1000,
            800
          ],
          "parameters": {
            "functionCode": "// Process wine club orders\nconst response = $input.item.json.body;\nconst orders = response.orders || [];\n\n// Process each order\nconst processedOrders = orders.map(order => {\n  // Calculate total bottles and price\n  let totalBottles = 0;\n  let subtotal = 0;\n  \n  if (Array.isArray(order.items)) {\n    order.items.forEach(item => {\n      totalBottles += item.quantity || 0;\n      subtotal += (item.price * item.quantity) || 0;\n    });\n  }\n  \n  // Calculate shipping based on membership tier\n  let shippingCost = 0;\n  if (order.membership_tier === 'bronze') {\n    shippingCost = 15;\n  } else if (order.membership_tier === 'silver') {\n    shippingCost = 10;\n  } else if (order.membership_tier === 'gold') {\n    shippingCost = 0; // Free shipping\n  } else {\n    shippingCost = 20; // Default\n  }\n  \n  // Apply membership discount\n  let discountRate = 0;\n  if (order.membership_tier === 'bronze') {\n    discountRate = 0.05; // 5%\n  } else if (order.membership_tier === 'silver') {\n    discountRate = 0.10; // 10%\n  } else if (order.membership_tier === 'gold') {\n    discountRate = 0.15; // 15%\n  }\n  \n  const discountAmount = subtotal * discountRate;\n  const total = subtotal - discountAmount + shippingCost;\n  \n  // Format for email\n  const itemsList = Array.isArray(order.items) ? order.items.map(item => \n    `${item.quantity}x ${item.wine_name} ${item.vintage} - $${item.price.toFixed(2)} each`\n  ).join(\"\\n\") : \"No items\";\n  \n  // Determine shipping date (next Monday if weekend, next day otherwise)\n  const today = new Date();\n  let shippingDate = new Date(today);\n  shippingDate.setDate(today.getDate() + 1); // Next day\n  \n  // If it's Friday, ship on Monday (+3 days)\n  if (today.getDay() === 5) { // Friday\n    shippingDate.setDate(today.getDate() + 3);\n  } \n  // If it's Saturday, ship on Monday (+2 days)\n  else if (today.getDay() === 6) { // Saturday\n    shippingDate.setDate(today.getDate() + 2);\n  }\n  \n  const formattedShippingDate = shippingDate.toLocaleDateString('en-US', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n  \n  return {\n    order_id: order.order_id,\n    customer_id: order.customer_id,\n    customer_name: order.customer_name,\n    customer_email: order.customer_email,\n    membership_tier: order.membership_tier,\n    items: order.items,\n    items_list: itemsList,\n    total_bottles: totalBottles,\n    subtotal: subtotal,\n    discount_rate: discountRate,\n    discount_amount: discountAmount,\n    shipping_cost: shippingCost,\n    total: total,\n    shipping_address: order.shipping_address,\n    shipping_date: shippingDate.toISOString(),\n    formatted_shipping_date: formattedShippingDate,\n    raw_order: order\n  };\n});\n\nreturn [\n  {\n    json: {\n      processed_orders: processedOrders,\n      order_count: processedOrders.length\n    }\n  }\n];"
          }
        },
        {
          "id": "32",
          "name": "Split Orders",
          "type": "n8n-nodes-base.splitInBatches",
          "typeVersion": 1,
          "position": [
            1200,
            800
          ],
          "parameters": {
            "batchSize": 1,
            "options": {}
          }
        },
        {
          "id": "33",
          "name": "Get Current Order",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1400,
            800
          ],
          "parameters": {
            "functionCode": "// Get the current order\nconst orders = $input.item.json.processed_orders;\nconst index = $input.item.json.splitIndex || 0;\n\nif (!orders || !orders[index]) {\n  return {json: {error: 'No order found at index ' + index}};\n}\n\nconst order = orders[index];\n\n// Return the current order\nreturn {\n  json: order\n};"
          }
        },
        {
          "id": "34",
          "name": "Update Order Status",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1600,
            800
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "https://api.winery.local/orders/process",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Authorization",
                  "value": "=={{$env.ORDERS_API_KEY}}"
                },
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"order_id\",\"value\":\"={{ $json.order_id }}\"},{\"name\":\"status\",\"value\":\"processing\"},{\"name\":\"shipping_date\",\"value\":\"={{ $json.shipping_date }}\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "35",
          "name": "Send Order Confirmation",
          "type": "n8n-nodes-base.sendEmail",
          "typeVersion": 1,
          "position": [
            1800,
            800
          ],
          "parameters": {
            "fromEmail": "",
            "toRecipients": "={{ $json.customer_email }}",
            "ccRecipients": "",
            "subject": "==Your Wine Club Order #{{ $json.order_id }} is Being Processed==",
            "text": "==Dear {{ $json.customer_name }},\n\nThank you for your Wine Club order. We're pleased to inform you that your order #{{ $json.order_id }} is now being processed.\n\nOrder Details:\n{{ $json.items_list }}\n\nOrder Summary:\n- Subtotal: ${{ $json.subtotal.toFixed(2) }}\n- {{ $json.membership_tier | capitalize }} Member Discount ({{ ($json.discount_rate * 100).toFixed(0) }}%): -${{ $json.discount_amount.toFixed(2) }}\n- Shipping & Handling: ${{ $json.shipping_cost.toFixed(2) }}\n- Total: ${{ $json.total.toFixed(2) }}\n\nYour order will be shipped on {{ $json.formatted_shipping_date }} to:\n{{ $json.shipping_address.street }}\n{{ $json.shipping_address.city }}, {{ $json.shipping_address.state }} {{ $json.shipping_address.zip }}\n\nThank you for being a valued {{ $json.membership_tier | capitalize }} member of our Wine Club!\n\nCheers,\nThe Boutique Winery Team==",
            "html": "",
            "attachments": "",
            "options": {}
          }
        },
        {
          "id": "36",
          "name": "Update Inventory",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1600,
            900
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "https://api.winery.local/inventory/update",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Authorization",
                  "value": "=={{$env.INVENTORY_API_KEY}}"
                },
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"order_id\",\"value\":\"={{ $json.order_id }}\"},{\"name\":\"items\",\"value\":\"={{ $json.items }}\"},{\"name\":\"action\",\"value\":\"reserve\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "37",
          "name": "Fetch Training Content",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            800,
            1000
          ],
          "parameters": {
            "method": "GET",
            "options": {},
            "url": "https://api.winery.local/training/content",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Authorization",
                  "value": "=={{$env.TRAINING_API_KEY}}"
                }
              ]
            },
            "queryParameters": {
              "parameters": [
                {
                  "name": "content_type",
                  "value": "sommelier"
                },
                {
                  "name": "status",
                  "value": "published"
                },
                {
                  "name": "limit",
                  "value": "10"
                }
              ]
            }
          }
        },
        {
          "id": "38",
          "name": "Process Training Content",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1000,
            1000
          ],
          "parameters": {
            "functionCode": "// Process sommelier training content\nconst response = $input.item.json.body;\nconst trainingContent = response.content || [];\n\n// Organize content by category\nconst organizedContent = {};\n\ntrainingContent.forEach(content => {\n  const category = content.category || 'Uncategorized';\n  \n  if (!organizedContent[category]) {\n    organizedContent[category] = [];\n  }\n  \n  organizedContent[category].push(content);\n});\n\n// Create a structured training package\nconst trainingPackage = {\n  title: \"Monthly Sommelier Training Materials\",\n  date: new Date().toISOString(),\n  categories: Object.keys(organizedContent).map(category => ({\n    name: category,\n    content: organizedContent[category]\n  })),\n  content_count: trainingContent.length\n};\n\n// Generate table of contents\nlet tableOfContents = \"# Sommelier Training Materials\\n\\n\";\ntableOfContents += `*Generated on ${new Date().toLocaleDateString()}*\\n\\n`;\ntableOfContents += \"## Table of Contents\\n\\n\";\n\nObject.keys(organizedContent).forEach(category => {\n  tableOfContents += `### ${category}\\n\\n`;\n  \n  organizedContent[category].forEach(content => {\n    tableOfContents += `- ${content.title} (${content.content_type})\\n`;\n  });\n  \n  tableOfContents += \"\\n\";\n});\n\n// Generate full document\nlet fullDocument = tableOfContents + \"\\n\\n\";\n\nObject.keys(organizedContent).forEach(category => {\n  fullDocument += `## ${category}\\n\\n`;\n  \n  organizedContent[category].forEach(content => {\n    fullDocument += `### ${content.title}\\n\\n`;\n    fullDocument += `*${content.author} - ${new Date(content.publication_date).toLocaleDateString()}*\\n\\n`;\n    fullDocument += `${content.summary}\\n\\n`;\n    fullDocument += `**Full content available at:** ${content.content_url}\\n\\n`;\n    \n    if (content.key_points && Array.isArray(content.key_points)) {\n      fullDocument += \"**Key Points:**\\n\\n\";\n      content.key_points.forEach(point => {\n        fullDocument += `- ${point}\\n`;\n      });\n      fullDocument += \"\\n\";\n    }\n    \n    fullDocument += \"---\\n\\n\";\n  });\n});\n\ntrainingPackage.table_of_contents = tableOfContents;\ntrainingPackage.full_document = fullDocument;\n\nreturn {\n  json: trainingPackage\n};"
          }
        },
        {
          "id": "39",
          "name": "Upload to Google Drive",
          "type": "n8n-nodes-base.googleDrive",
          "typeVersion": 1,
          "position": [
            1200,
            1000
          ],
          "parameters": {
            "authentication": "oAuth2",
            "resource": "file",
            "operation": "upload",
            "name": "={{ \"Sommelier Training Materials - \" + $now.toLocaleDateString() }}",
            "content": "={{ $json.full_document }}",
            "parents": [
              "=={{$env.GOOGLE_DRIVE_TRAINING_FOLDER_ID}}"
            ],
            "options": {}
          }
        },
        {
          "id": "40",
          "name": "Notify Sommeliers",
          "type": "n8n-nodes-base.sendEmail",
          "typeVersion": 1,
          "position": [
            1400,
            1000
          ],
          "parameters": {
            "fromEmail": "",
            "toRecipients": "=={{$env.SOMMELIERS_EMAIL_LIST}}==",
            "ccRecipients": "",
            "subject": "==New Sommelier Training Materials Available==",
            "text": "==Dear Sommelier Team,\n\nNew training materials have been uploaded to our shared Google Drive folder.\n\nTitle: {{ $json.title }}\nDate: {{ $now.toLocaleDateString() }}\nNumber of Resources: {{ $json.content_count }}\n\nCategories included:\n{% for category in $json.categories %}- {{ category.name }} ({{ category.content.length }} resources)\n{% endfor %}\n\nYou can access these materials at: {{ $node[\"Upload to Google Drive\"].json.webViewLink }}\n\nPlease review these materials before our next tasting session.\n\nRegards,\nWinery Education Team==",
            "html": "",
            "attachments": "",
            "options": {}
          }
        },
        {
          "id": "41",
          "name": "Fetch Customer Feedback",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            800,
            1100
          ],
          "parameters": {
            "method": "GET",
            "options": {},
            "url": "https://api.winery.local/feedback/customer",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Authorization",
                  "value": "=={{$env.FEEDBACK_API_KEY}}"
                }
              ]
            },
            "queryParameters": {
              "parameters": [
                {
                  "name": "status",
                  "value": "new"
                },
                {
                  "name": "limit",
                  "value": "50"
                }
              ]
            }
          }
        },
        {
          "id": "42",
          "name": "Analyze Customer Feedback",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1000,
            1100
          ],
          "parameters": {
            "functionCode": "// Process customer feedback\nconst response = $input.item.json.body;\nconst feedback = response.feedback || [];\n\n// Group feedback by wine type\nconst feedbackByWine = {};\nconst feedbackByRating = {\n  \"5\": [],\n  \"4\": [],\n  \"3\": [],\n  \"2\": [],\n  \"1\": []\n};\n\nfeedback.forEach(item => {\n  // Group by wine\n  const wineKey = `${item.wine_name} ${item.vintage}`;\n  if (!feedbackByWine[wineKey]) {\n    feedbackByWine[wineKey] = [];\n  }\n  feedbackByWine[wineKey].push(item);\n  \n  // Group by rating\n  const rating = item.rating.toString();\n  if (feedbackByRating[rating]) {\n    feedbackByRating[rating].push(item);\n  }\n});\n\n// Calculate average ratings by wine\nconst wineRatings = {};\nObject.keys(feedbackByWine).forEach(wine => {\n  const items = feedbackByWine[wine];\n  const total = items.reduce((sum, item) => sum + item.rating, 0);\n  const average = total / items.length;\n  \n  wineRatings[wine] = {\n    average_rating: average.toFixed(1),\n    count: items.length,\n    comments: items.map(item => item.comments).filter(comment => comment && comment.trim() !== '')\n  };\n});\n\n// Find top and bottom rated wines\nconst sortedWines = Object.keys(wineRatings).sort((a, b) => \n  wineRatings[b].average_rating - wineRatings[a].average_rating\n);\n\nconst topRatedWines = sortedWines.slice(0, 3).map(wine => ({\n  wine: wine,\n  average_rating: wineRatings[wine].average_rating,\n  count: wineRatings[wine].count\n}));\n\nconst bottomRatedWines = sortedWines.slice(-3).reverse().map(wine => ({\n  wine: wine,\n  average_rating: wineRatings[wine].average_rating,\n  count: wineRatings[wine].count\n}));\n\n// Extract common themes from comments (simple approach)\nconst allComments = feedback.map(item => item.comments).filter(comment => comment && comment.trim() !== '');\nconst commentText = allComments.join(' ').toLowerCase();\n\nconst positiveKeywords = ['delicious', 'excellent', 'amazing', 'love', 'fantastic', 'smooth', 'balanced', 'complex', 'enjoyable'];\nconst negativeKeywords = ['disappointing', 'bitter', 'unbalanced', 'overpriced', 'mediocre', 'flat', 'harsh', 'thin'];\n\nconst positiveThemes = positiveKeywords\n  .filter(word => commentText.includes(word))\n  .map(word => ({\n    term: word,\n    count: commentText.split(word).length - 1\n  }))\n  .sort((a, b) => b.count - a.count);\n\nconst negativeThemes = negativeKeywords\n  .filter(word => commentText.includes(word))\n  .map(word => ({\n    term: word,\n    count: commentText.split(word).length - 1\n  }))\n  .sort((a, b) => b.count - a.count);\n\n// Prepare summary report\nconst feedbackSummary = {\n  total_feedback: feedback.length,\n  date_range: {\n    from: feedback.length > 0 ? new Date(Math.min(...feedback.map(item => new Date(item.date)))).toISOString() : null,\n    to: feedback.length > 0 ? new Date(Math.max(...feedback.map(item => new Date(item.date)))).toISOString() : null\n  },\n  rating_distribution: {\n    \"5\": feedbackByRating[\"5\"].length,\n    \"4\": feedbackByRating[\"4\"].length,\n    \"3\": feedbackByRating[\"3\"].length,\n    \"2\": feedbackByRating[\"2\"].length,\n    \"1\": feedbackByRating[\"1\"].length\n  },\n  average_overall_rating: feedback.length > 0 ? \n    (feedback.reduce((sum, item) => sum + item.rating, 0) / feedback.length).toFixed(1) : 0,\n  wine_ratings: wineRatings,\n  top_rated_wines: topRatedWines,\n  bottom_rated_wines: bottomRatedWines,\n  positive_themes: positiveThemes.slice(0, 5),\n  negative_themes: negativeThemes.slice(0, 5),\n  feedback_ids: feedback.map(item => item.feedback_id)\n};\n\n// Generate report text\nlet reportText = \"# Customer Feedback Summary Report\\n\\n\";\nreportText += `Generated on ${new Date().toLocaleDateString()}\\n\\n`;\nreportText += `## Overview\\n\\n`;\nreportText += `- Total Feedback Received: ${feedbackSummary.total_feedback}\\n`;\nreportText += `- Date Range: ${new Date(feedbackSummary.date_range.from).toLocaleDateString()} to ${new Date(feedbackSummary.date_range.to).toLocaleDateString()}\\n`;\nreportText += `- Average Overall Rating: ${feedbackSummary.average_overall_rating} / 5.0\\n\\n`;\n\nreportText += `## Rating Distribution\\n\\n`;\nreportText += `- 5 Stars: ${feedbackSummary.rating_distribution[\"5\"]} (${Math.round((feedbackSummary.rating_distribution[\"5\"] / feedbackSummary.total_feedback) * 100)}%)\\n`;\nreportText += `- 4 Stars: ${feedbackSummary.rating_distribution[\"4\"]} (${Math.round((feedbackSummary.rating_distribution[\"4\"] / feedbackSummary.total_feedback) * 100)}%)\\n`;\nreportText += `- 3 Stars: ${feedbackSummary.rating_distribution[\"3\"]} (${Math.round((feedbackSummary.rating_distribution[\"3\"] / feedbackSummary.total_feedback) * 100)}%)\\n`;\nreportText += `- 2 Stars: ${feedbackSummary.rating_distribution[\"2\"]} (${Math.round((feedbackSummary.rating_distribution[\"2\"] / feedbackSummary.total_feedback) * 100)}%)\\n`;\nreportText += `- 1 Star: ${feedbackSummary.rating_distribution[\"1\"]} (${Math.round((feedbackSummary.rating_distribution[\"1\"] / feedbackSummary.total_feedback) * 100)}%)\\n\\n`;\n\nreportText += `## Top Rated Wines\\n\\n`;\ntopRatedWines.forEach((wine, index) => {\n  reportText += `${index + 1}. ${wine.wine} - ${wine.average_rating}/5.0 (${wine.count} reviews)\\n`;\n});\nreportText += `\\n`;\n\nreportText += `## Lowest Rated Wines\\n\\n`;\nbottomRatedWines.forEach((wine, index) => {\n  reportText += `${index + 1}. ${wine.wine} - ${wine.average_rating}/5.0 (${wine.count} reviews)\\n`;\n});\nreportText += `\\n`;\n\nreportText += `## Common Positive Themes\\n\\n`;\npositiveThemes.slice(0, 5).forEach((theme) => {\n  reportText += `- \"${theme.term}\" mentioned ${theme.count} times\\n`;\n});\nreportText += `\\n`;\n\nreportText += `## Common Critical Themes\\n\\n`;\nnegativeThemes.slice(0, 5).forEach((theme) => {\n  reportText += `- \"${theme.term}\" mentioned ${theme.count} times\\n`;\n});\n\nfeedbackSummary.report_text = reportText;\n\nreturn {\n  json: feedbackSummary\n};"
          }
        },
        {
          "id": "43",
          "name": "Update Feedback Status",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1200,
            1100
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "https://api.winery.local/feedback/status/update",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Authorization",
                  "value": "=={{$env.FEEDBACK_API_KEY}}"
                },
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"feedback_ids\",\"value\":\"={{ $json.feedback_ids }}\"},{\"name\":\"status\",\"value\":\"processed\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "44",
          "name": "Send Feedback Report",
          "type": "n8n-nodes-base.sendEmail",
          "typeVersion": 1,
          "position": [
            1400,
            1100
          ],
          "parameters": {
            "fromEmail": "",
            "toRecipients": "=={{$env.WINERY_MANAGEMENT_EMAIL}}==",
            "ccRecipients": "",
            "subject": "==Customer Feedback Analysis Report==",
            "text": "==Dear Winery Management Team,\n\nPlease find attached the latest customer feedback analysis report.\n\nHighlights:\n- Total Feedback: {{ $json.total_feedback }}\n- Average Rating: {{ $json.average_overall_rating }}/5.0\n\nTop Rated Wine: {{ $json.top_rated_wines[0].wine }} ({{ $json.top_rated_wines[0].average_rating }}/5.0)\nLowest Rated Wine: {{ $json.bottom_rated_wines[0].wine }} ({{ $json.bottom_rated_wines[0].average_rating }}/5.0)\n\nCommon Positive Theme: \"{{ $json.positive_themes[0].term }}\" (mentioned {{ $json.positive_themes[0].count }} times)\nCommon Critical Theme: \"{{ $json.negative_themes[0].term }}\" (mentioned {{ $json.negative_themes[0].count }} times)\n\nPlease see the attached report for full details.\n\nRegards,\nCustomer Feedback Analysis System==",
            "html": "",
            "attachments": [
              {
                "name": "=={{ \"Customer_Feedback_Report_\" + $now.toISOString().split('T')[0] + \".md\" }}==",
                "content": "=={{ $json.report_text }}=="
              }
            ],
            "options": {}
          }
        },
        {
          "id": "45",
          "name": "Merge Production Monitoring Results",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            1600,
            300
          ],
          "parameters": {
            "mode": "combine",
            "options": {
              "outputDataFrom": "input1"
            },
            "mergeByFields": {}
          }
        },
        {
          "id": "46",
          "name": "Merge Quality Control Results",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            1600,
            600
          ],
          "parameters": {
            "mode": "combine",
            "options": {
              "outputDataFrom": "input1"
            },
            "mergeByFields": {}
          }
        },
        {
          "id": "47",
          "name": "Merge Customer Engagement Results",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            1600,
            1000
          ],
          "parameters": {
            "mode": "combine",
            "options": {
              "outputDataFrom": "input1"
            },
            "mergeByFields": {}
          }
        },
        {
          "id": "48",
          "name": "Merge All Results",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            1800,
            600
          ],
          "parameters": {
            "mode": "combine",
            "options": {},
            "mergeByFields": {}
          }
        },
        {
          "id": "49",
          "name": "Generate Final Summary",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            2000,
            600
          ],
          "parameters": {
            "functionCode": "// Generate final summary\nconst data = $input.item.json;\nconst action = data.action;\nconst subaction = data.subaction;\nconst timestamp = new Date().toISOString();\n\n// Create a summary based on the action type\nlet summary = {\n  timestamp: timestamp,\n  action: action,\n  subaction: subaction,\n  status: \"completed\",\n  details: {}\n};\n\n// Add details based on the action type\nif (action === 'production_monitoring') {\n  if (subaction === 'sugar_acid_analysis') {\n    summary.details = {\n      batch_id: data.batch_id,\n      sugar_brix: data.sugar_brix,\n      ph: data.ph,\n      total_acidity: data.total_acidity,\n      action_needed: data.action_needed,\n      action_message: data.action_message\n    };\n  } else if (subaction === 'fermentation_control') {\n    summary.details = {\n      tank_id: data.tank_id,\n      current_temperature: data.current_temperature,\n      target_temperature: data.target_temperature,\n      adjustment_needed: data.adjustment_needed,\n      adjustment_message: data.adjustment_message\n    };\n  } else if (subaction === 'co2_alcohol_monitoring') {\n    summary.details = {\n      tank_id: data.tank_id,\n      co2_level: data.co2_level,\n      alcohol_level: data.alcohol_level,\n      alert_needed: data.alert_needed,\n      alert_message: data.alert_message\n    };\n  }\n} else if (action === 'quality_control') {\n  if (subaction === 'barrel_aging') {\n    summary.details = {\n      barrel_id: data.barrel_id,\n      aging_status: data.aging_status,\n      aging_percent_complete: data.aging_percent_complete,\n      issues_detected: data.issues_detected,\n      issue_message: data.issue_message\n    };\n  } else if (subaction === 'bottling_line_qc') {\n    summary.details = {\n      batch_id: data.batch_id,\n      defect_rate: data.defect_rate,\n      quality_issue: data.quality_issue,\n      action_required: data.action_required,\n      recommended_action: data.recommended_action\n    };\n  } else if (subaction === 'taste_testing') {\n    summary.details = {\n      batch_id: data.batch_id,\n      wine_type: data.wine_type,\n      vintage: data.vintage,\n      scheduled_date: data.formatted_date,\n      tasting_location: data.tasting_location\n    };\n  }\n} else if (action === 'customer_engagement') {\n  if (subaction === 'wine_club_orders') {\n    summary.details = {\n      order_count: data.processed_orders?.length || 1,\n      orders_processed: data.order_id ? [data.order_id] : data.processed_orders?.map(o => o.order_id)\n    };\n  } else if (subaction === 'sommelier_training') {\n    summary.details = {\n      title: data.title,\n      content_count: data.content_count,\n      categories: data.categories?.map(c => c.name)\n    };\n  } else if (subaction === 'customer_feedback') {\n    summary.details = {\n      total_feedback: data.total_feedback,\n      average_overall_rating: data.average_overall_rating,\n      top_rated_wine: data.top_rated_wines?.[0]?.wine,\n      feedback_ids_processed: data.feedback_ids?.length\n    };\n  }\n}\n\n// Add workflow completion time\nsummary.execution_time_ms = Date.now() - new Date(data.timestamp || timestamp).getTime();\n\nreturn {\n  json: {\n    workflow_summary: summary\n  }\n};"
          }
        },
        {
          "id": "50",
          "name": "Log Workflow Completion",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            2200,
            600
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "https://api.winery.local/automation/log",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Authorization",
                  "value": "=={{$env.AUTOMATION_API_KEY}}"
                },
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"workflow_summary\",\"value\":\"={{ $json.workflow_summary }}\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "51",
          "name": "Respond to Webhook",
          "type": "n8n-nodes-base.respondToWebhook",
          "typeVersion": 1,
          "position": [
            2400,
            600
          ],
          "parameters": {
            "options": {},
            "respondWith": "json",
            "responseBody": "={{ $json }}"
          }
        },
        {
          "id": "52",
          "name": "Error Trigger",
          "type": "n8n-nodes-base.errorTrigger",
          "typeVersion": 1,
          "position": [
            200,
            1300
          ],
          "parameters": {}
        },
        {
          "id": "53",
          "name": "Process Error",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            400,
            1300
          ],
          "parameters": {
            "functionCode": "// Process error information\nconst workflow = $workflow;\nconst execution = $execution;\nconst error = $input.item.json.error;\n\n// Get detailed error information\nconst errorDetails = {\n  workflow_id: workflow.id,\n  workflow_name: workflow.name,\n  execution_id: execution.id,\n  timestamp: new Date().toISOString(),\n  error_message: error.message || 'Unknown error',\n  error_stack: error.stack,\n  node_name: error.node?.name || 'Unknown node',\n  node_type: error.node?.type || 'Unknown type',\n  execution_data: $input.item.json.execution || {}\n};\n\n// Categorize the error\nlet errorCategory = 'UNKNOWN';\nlet errorSeverity = 'HIGH';\nlet recommendedAction = 'Investigate the error logs and check the failing node.';\n\nconst errorMsg = error.message ? error.message.toLowerCase() : '';\n\nif (errorMsg.includes('timeout')) {\n  errorCategory = 'TIMEOUT';\n  recommendedAction = 'Check the API endpoint response time or increase the timeout value.';\n} else if (errorMsg.includes('authentication') || errorMsg.includes('auth') || errorMsg.includes('unauthorized') || errorMsg.includes('401')) {\n  errorCategory = 'AUTHENTICATION';\n  recommendedAction = 'Verify API keys and authentication credentials.';\n} else if (errorMsg.includes('not found') || errorMsg.includes('404')) {\n  errorCategory = 'NOT_FOUND';\n  recommendedAction = 'Verify the resource exists and the URL is correct.';\n} else if (errorMsg.includes('rate limit') || errorMsg.includes('429')) {\n  errorCategory = 'RATE_LIMIT';\n  errorSeverity = 'MEDIUM';\n  recommendedAction = 'Implement backoff strategy or reduce request frequency.';\n} else if (errorMsg.includes('validation') || errorMsg.includes('invalid')) {\n  errorCategory = 'VALIDATION';\n  errorSeverity = 'MEDIUM';\n  recommendedAction = 'Check the data format and requirements.';\n} else if (errorMsg.includes('database') || errorMsg.includes('sql') || errorMsg.includes('query')) {\n  errorCategory = 'DATABASE';\n  recommendedAction = 'Check database connection and query syntax.';\n} else if (errorMsg.includes('network') || errorMsg.includes('connection')) {\n  errorCategory = 'NETWORK';\n  recommendedAction = 'Verify network connectivity and DNS resolution.';\n}\n\n// Add categorization to error details\nerrorDetails.error_category = errorCategory;\nerrorDetails.error_severity = errorSeverity;\nerrorDetails.recommended_action = recommendedAction;\n\n// Create a readable error message for notifications\nconst readableErrorMessage = `\nError in Winery Automation Workflow\n\nWorkflow: ${workflow.name}\nNode: ${errorDetails.node_name}\nCategory: ${errorCategory}\nSeverity: ${errorSeverity}\nTimestamp: ${new Date().toLocaleString()}\n\nError Message: ${errorDetails.error_message}\n\nRecommended Action: ${recommendedAction}\n`;\n\nerrorDetails.readable_message = readableErrorMessage;\n\nreturn {\n  json: errorDetails\n};"
          }
        },
        {
          "id": "54",
          "name": "Log Error",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            600,
            1300
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "https://api.winery.local/automation/error-log",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Authorization",
                  "value": "=={{$env.AUTOMATION_API_KEY}}"
                },
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"error_details\",\"value\":\"={{ $json }}\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "55",
          "name": "Send Error Alert",
          "type": "n8n-nodes-base.sendEmail",
          "typeVersion": 1,
          "position": [
            800,
            1300
          ],
          "parameters": {
            "fromEmail": "",
            "toRecipients": "=={{$env.TECH_SUPPORT_EMAIL}}==",
            "ccRecipients": "",
            "subject": "==[ALERT] Winery Automation Workflow Error - {{ $json.error_category }}==",
            "text": "=={{ $json.readable_message }}==",
            "html": "",
            "attachments": "",
            "options": {
              "priority": "high"
            }
          }
        }
      ],
      "connections": {
        "Main Entry Webhook": {
          "main": [
            [
              {
                "node": "Is Production Monitoring?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Production Monitoring?": {
          "main": [
            [
              {
                "node": "Production Monitoring Router",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Is Quality Control?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Quality Control?": {
          "main": [
            [
              {
                "node": "Quality Control Router",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Is Customer Engagement?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Customer Engagement?": {
          "main": [
            [
              {
                "node": "Customer Engagement Router",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Respond to Webhook",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Production Monitoring Router": {
          "main": [
            [
              {
                "node": "Fetch Sugar/Acid Data",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Fetch Fermentation Data",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Fetch CO2 & Alcohol Data",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Merge Production Monitoring Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Quality Control Router": {
          "main": [
            [
              {
                "node": "Fetch Barrel Aging Data",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Fetch Bottling Line Images",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Schedule Taste Testing",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Merge Quality Control Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Customer Engagement Router": {
          "main": [
            [
              {
                "node": "Fetch Wine Club Orders",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Fetch Training Content",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Fetch Customer Feedback",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Merge Customer Engagement Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Sugar/Acid Data": {
          "main": [
            [
              {
                "node": "Process Sugar/Acid Analysis",
                "type": "main",
                "index": 0
              },
              {
                "node": "Merge All Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Sugar/Acid Analysis": {
          "main": [
            [
              {
                "node": "Merge Production Monitoring Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Fermentation Data": {
          "main": [
            [
              {
                "node": "Process Fermentation Data",
                "type": "main",
                "index": 0
              },
              {
                "node": "Merge All Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Fermentation Data": {
          "main": [
            [
              {
                "node": "Temperature Adjustment Needed?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Temperature Adjustment Needed?": {
          "main": [
            [
              {
                "node": "Adjust Temperature",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Merge Production Monitoring Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Adjust Temperature": {
          "main": [
            [
              {
                "node": "Merge Production Monitoring Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch CO2 & Alcohol Data": {
          "main": [
            [
              {
                "node": "Analyze CO2 & Alcohol Levels",
                "type": "main",
                "index": 0
              },
              {
                "node": "Merge All Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Analyze CO2 & Alcohol Levels": {
          "main": [
            [
              {
                "node": "CO2/Alcohol Alert Needed?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "CO2/Alcohol Alert Needed?": {
          "main": [
            [
              {
                "node": "Send CO2/Alcohol Alert",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Merge Production Monitoring Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send CO2/Alcohol Alert": {
          "main": [
            [
              {
                "node": "Merge Production Monitoring Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Barrel Aging Data": {
          "main": [
            [
              {
                "node": "Analyze Barrel Aging",
                "type": "main",
                "index": 0
              },
              {
                "node": "Merge All Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Analyze Barrel Aging": {
          "main": [
            [
              {
                "node": "Barrel Issues Detected?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Barrel Issues Detected?": {
          "main": [
            [
              {
                "node": "Send Barrel Alert",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Merge Quality Control Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Barrel Alert": {
          "main": [
            [
              {
                "node": "Merge Quality Control Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Bottling Line Images": {
          "main": [
            [
              {
                "node": "Analyze Bottling QC",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Analyze Bottling QC": {
          "main": [
            [
              {
                "node": "Bottling QC Issues?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Bottling QC Issues?": {
          "main": [
            [
              {
                "node": "Send Bottling QC Alert",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Merge Quality Control Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Bottling QC Alert": {
          "main": [
            [
              {
                "node": "Merge Quality Control Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Schedule Taste Testing": {
          "main": [
            [
              {
                "node": "Process Taste Testing Schedule",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Taste Testing Schedule": {
          "main": [
            [
              {
                "node": "Create Calendar Event",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create Calendar Event": {
          "main": [
            [
              {
                "node": "Notify Tasting Panel",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Notify Tasting Panel": {
          "main": [
            [
              {
                "node": "Merge Quality Control Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Wine Club Orders": {
          "main": [
            [
              {
                "node": "Process Wine Club Orders",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Wine Club Orders": {
          "main": [
            [
              {
                "node": "Split Orders",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Split Orders": {
          "main": [
            [
              {
                "node": "Get Current Order",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Current Order": {
          "main": [
            [
              {
                "node": "Update Order Status",
                "type": "main",
                "index": 0
              },
              {
                "node": "Update Inventory",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Update Order Status": {
          "main": [
            [
              {
                "node": "Send Order Confirmation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Order Confirmation": {
          "main": [
            [
              {
                "node": "Merge Customer Engagement Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Update Inventory": {
          "main": [
            [
              {
                "node": "Merge Customer Engagement Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Training Content": {
          "main": [
            [
              {
                "node": "Process Training Content",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Training Content": {
          "main": [
            [
              {
                "node": "Upload to Google Drive",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Upload to Google Drive": {
          "main": [
            [
              {
                "node": "Notify Sommeliers",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Notify Sommeliers": {
          "main": [
            [
              {
                "node": "Merge Customer Engagement Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Customer Feedback": {
          "main": [
            [
              {
                "node": "Analyze Customer Feedback",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Analyze Customer Feedback": {
          "main": [
            [
              {
                "node": "Update Feedback Status",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Update Feedback Status": {
          "main": [
            [
              {
                "node": "Send Feedback Report",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Feedback Report": {
          "main": [
            [
              {
                "node": "Merge Customer Engagement Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Production Monitoring Results": {
          "main": [
            [
              {
                "node": "Merge All Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Quality Control Results": {
          "main": [
            [
              {
                "node": "Merge All Results",
                "type": "main",
                "index": 1
              }
            ]
          ]
        },
        "Merge Customer Engagement Results": {
          "main": [
            [
              {
                "node": "Merge All Results",
                "type": "main",
                "index": 2
              }
            ]
          ]
        },
        "Merge All Results": {
          "main": [
            [
              {
                "node": "Generate Final Summary",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Generate Final Summary": {
          "main": [
            [
              {
                "node": "Log Workflow Completion",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Log Workflow Completion": {
          "main": [
            [
              {
                "node": "Respond to Webhook",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Error Trigger": {
          "main": [
            [
              {
                "node": "Process Error",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Error": {
          "main": [
            [
              {
                "node": "Log Error",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Log Error": {
          "main": [
            [
              {
                "node": "Send Error Alert",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {}
    },
    "provider": "anthropic",
    "model": "claude-3-7-sonnet-20250219",
    "timestamp": "2025-07-21T18:09:51.728Z",
    "nodeCount": 55,
    "connectionCount": 53
  },
  {
    "id": "1dfd8a2f-956d-435a-8e03-774ce76455c3",
    "prompt": "To create a comprehensive n8n workflow for Construction Site Safety and Progress Monitoring, we’ll orchestrate the identified features into a cohesive system. Here is a detailed plan:\n\n### Main Workflow Structure\n\n1. **Main Entry Point (Trigger)**\n   - **Node:** `n8n-nodes-base.cron`\n   - **Purpose:** Schedule the workflow to run at specific intervals (e.g., daily morning, weekly for drone photography, and continuously for safety monitoring).\n\n2. **Central Router (Switch Node)**\n   - **Node:** `n8n-nodes-base.switch`\n   - **Purpose:** Direct the workflow to different feature branches based on the task (e.g., safety monitoring, progress tracking, stock management).\n\n### Feature Branches\n\n#### 1. Safety Monitoring\n\n- **Helmet and Seat Belt Monitoring**\n  - **Node:** `n8n-nodes-base.httpRequest` (for camera integration)\n  - **Node:** `n8n-nodes-base.code` (process images for compliance)\n  - **Decision Node:** `n8n-nodes-base.switch` (IF non-compliance detected)\n  - **Action:** Send alert via `n8n-nodes-base.emailSend`\n\n- **Weather Monitoring During Concrete Pouring**\n  - **Node:** `n8n-nodes-base.httpRequest` (fetch weather data)\n  - **Decision Node:** `n8n-nodes-base.switch` (IF weather conditions unsuitable)\n  - **Action:** Alert via `n8n-nodes-base.emailSend` and delay actions with `n8n-nodes-base.wait`\n\n- **Tower Crane Wind Sensors**\n  - **Node:** `n8n-nodes-base.mqtt` (receive wind sensor data)\n  - **Decision Node:** `n8n-nodes-base.switch` (IF wind speed exceeds threshold)\n  - **Action:** `n8n-nodes-base.executeCommand` to shut down crane\n\n#### 2. Progress Monitoring\n\n- **Daily Worker Entry/Exit and Timekeeping**\n  - **Node:** `n8n-nodes-base.httpRequest` (integrate with timekeeping system)\n  - **Node:** `n8n-nodes-base.set` (format and store data)\n\n- **Weekly Progress Photography with Drones**\n  - **Node:** `n8n-nodes-base.googleDrive` (store drone images)\n  - **Node:** `n8n-nodes-base.httpRequest` (process images for progress)\n\n#### 3. Inventory and Material Management\n\n- **Material Stock Tracking and JIT Ordering**\n  - **Node:** `n8n-nodes-base.httpRequest` (check stock levels)\n  - **Decision Node:** `n8n-nodes-base.switch` (IF stock below threshold)\n  - **Action:** `n8n-nodes-base.httpRequest` (order materials)\n\n#### 4. Emergency Protocols and Security\n\n- **Emergency Protocol in Case of Workplace Accidents**\n  - **Node:** `n8n-nodes-base.errorTrigger` (global error handling)\n  - **Action:** `n8n-nodes-base.emailSend` and `n8n-nodes-base.twilio` for SMS alerts\n\n- **Night Security Patrol Route Tracking**\n  - **Node:** `n8n-nodes-base.httpRequest` (collect GPS data)\n  - **Node:** `n8n-nodes-base.code` (analyze patrol routes)\n\n- **Neighboring Building Vibration Sensor Monitoring**\n  - **Node:** `n8n-nodes-base.mqtt` (vibration sensor data)\n  - **Decision Node:** `n8n-nodes-base.switch` (IF vibration exceeds threshold)\n  - **Action:** Alert via `n8n-nodes-base.emailSend`\n\n#### 5. Contractor Progress Payment Documentation\n\n- **Payment Photo Documentation**\n  - **Node:** `n8n-nodes-base.googleDrive` (upload photos)\n  - **Node:** `n8n-nodes-base.httpRequest` (link photos to payment system)\n\n### Central Merge Node\n\n- **Node:** `n8n-nodes-base.merge`\n- **Purpose:** Combine results from all branches for final processing.\n\n### Final Processing/Response\n\n- **Node:** `n8n-nodes-base.set` (format final report)\n- **Node:** `n8n-nodes-base.emailSend` (send report to stakeholders)\n\n### Error Handling\n\n- **Global Error Node:** `n8n-nodes-base.errorTrigger`\n- **Error Notification:** `n8n-nodes-base.emailSend`\n\n### Final Validation Checklist\n\n- ☑ All nodes are connected (no orphaned nodes).\n- ☑ Comprehensive error handling is implemented.\n- ☑ All branches merge back to the central flow.\n- ☑ Decision nodes handle all conditions.\n- ☑ Data flows logically between nodes.\n- ☑ No isolated node chains exist.\n\nThis workflow ensures a comprehensive and integrated approach to monitoring and managing safety, progress, and resource allocation on a construction site.",
    "provider": "anthropic",
    "model": "claude-3-7-sonnet-20250219",
    "timestamp": "2025-07-22T08:02:31.596Z",
    "nodeCount": 102,
    "connectionCount": 88
  },
  {
    "id": "726c90a3-e92f-4ec4-925b-e854ee3c6279",
    "prompt": "To create a comprehensive n8n workflow for Construction Site Safety and Progress Monitoring, we’ll orchestrate the identified features into a cohesive system. Here is a detailed plan structured according to the mandatory architecture requirements:\n\n### Main Workflow Structure\n\n#### 1. Main Entry Point (Trigger)\n- **Node:** `n8n-nodes-base.cron`\n  - **Purpose:** Schedule the workflow to run at specific intervals (e.g., daily for safety checks and progress updates, continuous for critical monitoring).\n  - **Configuration:** Set to trigger at defined times for different tasks.\n\n#### 2. Central Router (Switch Node)\n- **Node:** `n8n-nodes-base.switch`\n  - **Purpose:** Direct the workflow to different feature branches based on the task type.\n  - **Routing Criteria:** Task identifiers or flags to activate different branches (e.g., \"safety\", \"progress\", \"inventory\").\n\n### Feature Branches\n\n#### 1. Safety Monitoring\n- **Helmet and Seat Belt Monitoring:**\n  - **Node:** `n8n-nodes-base.httpRequest` (integration with camera system)\n  - **Node:** `n8n-nodes-base.code` (process images to detect compliance)\n  - **Decision Node:** `n8n-nodes-base.switch` \n    - **Conditions:** IF non-compliance detected\n  - **Action:** Send alert via `n8n-nodes-base.emailSend`\n\n- **Weather Monitoring During Concrete Pouring:**\n  - **Node:** `n8n-nodes-base.httpRequest` (fetch current weather data)\n  - **Decision Node:** `n8n-nodes-base.switch` \n    - **Conditions:** IF weather conditions are unsuitable\n  - **Action:** Alert via `n8n-nodes-base.emailSend` and delay actions with `n8n-nodes-base.wait`\n\n- **Tower Crane Wind Sensors:**\n  - **Node:** `n8n-nodes-base.mqtt` (receive wind sensor data)\n  - **Decision Node:** `n8n-nodes-base.switch` \n    - **Conditions:** IF wind speed exceeds threshold\n  - **Action:** `n8n-nodes-base.executeCommand` to shut down crane\n\n#### 2. Progress Monitoring\n- **Daily Worker Entry/Exit and Timekeeping:**\n  - **Node:** `n8n-nodes-base.httpRequest` (integrate with timekeeping system)\n  - **Node:** `n8n-nodes-base.set` (format and store data)\n\n- **Weekly Progress Photography with Drones:**\n  - **Node:** `n8n-nodes-base.googleDrive` (store drone images)\n  - **Node:** `n8n-nodes-base.httpRequest` (process images for progress analysis)\n\n#### 3. Inventory and Material Management\n- **Material Stock Tracking and Just-In-Time (JIT) Ordering:**\n  - **Node:** `n8n-nodes-base.httpRequest` (check current stock levels)\n  - **Decision Node:** `n8n-nodes-base.switch` \n    - **Conditions:** IF stock below threshold\n  - **Action:** `n8n-nodes-base.httpRequest` (order materials)\n\n#### 4. Emergency Protocols and Security\n- **Emergency Protocol in Case of Workplace Accidents:**\n  - **Node:** `n8n-nodes-base.errorTrigger` (global error handling)\n  - **Action:** `n8n-nodes-base.emailSend` and `n8n-nodes-base.twilio` for SMS alerts\n\n- **Night Security Patrol Route Tracking:**\n  - **Node:** `n8n-nodes-base.httpRequest` (collect GPS data)\n  - **Node:** `n8n-nodes-base.code` (analyze patrol routes)\n\n- **Neighboring Building Vibration Sensor Monitoring:**\n  - **Node:** `n8n-nodes-base.mqtt` (vibration sensor data)\n  - **Decision Node:** `n8n-nodes-base.switch` \n    - **Conditions:** IF vibration exceeds threshold\n  - **Action:** Alert via `n8n-nodes-base.emailSend`\n\n#### 5. Contractor Progress Payment Documentation\n- **Payment Photo Documentation:**\n  - **Node:** `n8n-nodes-base.googleDrive` (upload photos)\n  - **Node:** `n8n-nodes-base.httpRequest` (link photos to payment system)\n\n### Central Merge Node\n- **Node:** `n8n-nodes-base.merge`\n  - **Purpose:** Combine results from all branches for final processing.\n\n### Final Processing/Response\n- **Node:** `n8n-nodes-base.set` (prepare final report)\n- **Node:** `n8n-nodes-base.emailSend` (send report to stakeholders)\n\n### Error Handling\n- **Global Error Node:** `n8n-nodes-base.errorTrigger`\n- **Error Notification:** `n8n-nodes-base.emailSend` (notify on errors)\n\n### Final Validation Checklist\n- ☑ All nodes are connected (no orphaned nodes).\n- ☑ Comprehensive error handling is implemented.\n- ☑ All branches merge back to the central flow.\n- ☑ Decision nodes handle all conditions.\n- ☑ Data flows logically between nodes.\n- ☑ No isolated node chains exist.\n\nThis workflow ensures a comprehensive and integrated approach to monitoring and managing safety, progress, and resource allocation on a construction site. Each feature is independently handled but centrally orchestrated to provide seamless operation and reporting.",
    "provider": "anthropic",
    "model": "claude-3-7-sonnet-20250219",
    "timestamp": "2025-07-22T08:30:31.077Z",
    "nodeCount": 83,
    "connectionCount": 72
  },
  {
    "id": "bfc2c53f-df1c-4669-8acd-fa54cc2923d3",
    "prompt": "To create a comprehensive n8n workflow for Construction Site Safety and Progress Monitoring, we will orchestrate a series of interconnected features using the mandatory architecture outlined. This workflow will include safety monitoring, worker management, progress documentation, and emergency protocols. Below is a detailed node-by-node implementation plan:\n\n### Workflow Structure\n\n#### 1. Main Entry Point\n- **Trigger Node**: `n8n-nodes-base.webhook`\n  - This node will act as the main entry point for real-time data input from various devices and sources.\n\n#### 2. Central Router\n- **Switch Node**: `n8n-nodes-base.switch`\n  - Route incoming data to appropriate feature branches based on the type of data (e.g., helmet monitoring, worker entry, weather monitoring).\n\n### Feature Branches\n\n#### A. Safety Monitoring\n1. **Helmet and Seat Belt Monitoring**\n   - **Nodes**:\n     - `n8n-nodes-base.httpRequest` (to receive data from camera feeds)\n     - `n8n-nodes-base.code` (for image analysis and detection)\n   - **Connections**:\n     - Webhook -> HTTP Request -> Code -> Safety Alert (if safety violation detected)\n\n2. **Tower Crane Wind Sensors**\n   - **Nodes**:\n     - `n8n-nodes-base.mqtt` (to receive wind sensor data)\n     - `n8n-nodes-base.code` (to process and evaluate wind thresholds)\n     - `n8n-nodes-base.executeCommand` (to initiate automatic shutdown)\n   - **Connections**:\n     - MQTT -> Code (evaluate wind speed) -> Execute Command (shutdown if over threshold)\n\n3. **Weather Monitoring During Concrete Pouring**\n   - **Nodes**:\n     - `n8n-nodes-base.httpRequest` (to get weather data)\n     - `n8n-nodes-base.switch` (to check if pouring is scheduled)\n   - **Connections**:\n     - HTTP Request -> Switch (weather evaluation) -> Alert (if adverse conditions detected)\n\n4. **Emergency Protocol**\n   - **Nodes**:\n     - `n8n-nodes-base.errorTrigger` (for detecting accidents)\n     - `n8n-nodes-base.emailSend` (to notify emergency response)\n     - `n8n-nodes-base.twilio` (to send SMS alerts)\n   - **Connections**:\n     - Error Trigger -> Email Send -> Twilio (SMS alert)\n\n#### B. Worker Management\n1. **Daily Worker Entry and Exit**\n   - **Nodes**:\n     - `n8n-nodes-base.httpRequest` (to receive RFID entry/exit data)\n     - `n8n-nodes-base.googleDrive` (to log timekeeping data)\n   - **Connections**:\n     - HTTP Request -> Google Drive (log entry/exit)\n\n2. **Night Security Patrol Route Tracking**\n   - **Nodes**:\n     - `n8n-nodes-base.mqtt` (to track security patrols)\n     - `n8n-nodes-base.code` (to analyze route completion)\n   - **Connections**:\n     - MQTT -> Code (route analysis) -> Alert (if route deviation detected)\n\n3. **Neighboring Building Vibration Sensor Monitoring**\n   - **Nodes**:\n     - `n8n-nodes-base.mqtt` (to receive sensor data)\n     - `n8n-nodes-base.code` (to evaluate vibration thresholds)\n   - **Connections**:\n     - MQTT -> Code -> Alert (if vibration exceeds limits)\n\n#### C. Progress Monitoring\n1. **Weekly Progress Photography with Drones**\n   - **Nodes**:\n     - `n8n-nodes-base.cron` (to schedule weekly drone flights)\n     - `n8n-nodes-base.httpRequest` (to control drones)\n   - **Connections**:\n     - Cron -> HTTP Request (drone operation)\n\n2. **Contractor Progress Payment Photo Documentation**\n   - **Nodes**:\n     - `n8n-nodes-base.httpRequest` (to receive photo documentation)\n     - `n8n-nodes-base.googleDrive` (to store documentation)\n   - **Connections**:\n     - HTTP Request -> Google Drive\n\n#### D. Inventory Management\n1. **Material Stock Tracking and JIT Ordering**\n   - **Nodes**:\n     - `n8n-nodes-base.httpRequest` (to receive inventory data)\n     - `n8n-nodes-base.code` (to evaluate stock levels)\n     - `n8n-nodes-base.httpRequest` (to place orders)\n   - **Connections**:\n     - HTTP Request (inventory data) -> Code (evaluate stock) -> HTTP Request (order)\n\n### 3. Central Merge Node\n- **Merge Node**: `n8n-nodes-base.merge`\n  - Combine outputs of all feature branches for final processing.\n\n### 4. Final Processing/Response\n- **Set Node**: `n8n-nodes-base.set`\n  - Prepare data for reporting and visualization.\n- **Email Send Node**: `n8n-nodes-base.emailSend`\n  - Send summary reports to stakeholders.\n\n### Error Handling\n- **Error Trigger Node**: `n8n-nodes-base.errorTrigger`\n  - Global error catching.\n- **Function Node**: `n8n-nodes-base.code`\n  - For detailed error analysis and recovery.\n\n### Timing Considerations\n- **Cron Node**: `n8n-nodes-base.cron`\n  - Schedule regular tasks such as drone photography and report generation.\n\n### Validation Checklist\n☑ All nodes are connected with no isolated chains.  \n☑ Error handling is implemented globally and for external API calls.  \n☑ Merge nodes follow all parallel branches.  \n☑ Conditional logic is handled with Switch nodes.  \n☑ Data flow is logical and efficient.  \n☑ Reports are generated and sent to stakeholders.\n\nThis comprehensive workflow ensures all aspects of the construction site are monitored and managed efficiently, with safety protocols and progress tracking integrated seamlessly.",
    "workflow": {
      "name": "Construction Site Safety and Progress Monitoring2",
      "nodes": [
        {
          "id": "1",
          "name": "Main Entry Trigger",
          "type": "n8n-nodes-base.webhook",
          "typeVersion": 1,
          "position": [
            100,
            100
          ],
          "parameters": {
            "path": "construction-monitoring",
            "responseMode": "lastNode",
            "options": {
              "allowUnauthorizedCerts": true,
              "responseData": "firstEntryParams"
            }
          }
        },
        {
          "id": "2",
          "name": "Central Router",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            300,
            100
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{$json.type}}",
            "rules": [
              {
                "value2": "safety",
                "output": 0
              },
              {
                "value2": "worker",
                "output": 1
              },
              {
                "value2": "progress",
                "output": 2
              },
              {
                "value2": "emergency",
                "output": 3
              },
              {
                "value2": "inventory",
                "output": 4
              }
            ],
            "fallbackOutput": 5
          }
        },
        {
          "id": "3",
          "name": "Process Safety Monitoring",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            100
          ],
          "parameters": {
            "functionCode": "// Process safety data from sensors and cameras\nconst safetyData = $input.item.json;\n\n// Check for safety violations\nlet hasViolation = false;\nlet alertType = null;\n\nif (safetyData.helmet === false) {\n  hasViolation = true;\n  alertType = 'missing_helmet';\n} else if (safetyData.seatbelt === false) {\n  hasViolation = true;\n  alertType = 'missing_seatbelt';\n} else if (safetyData.windSpeed && safetyData.windSpeed > 30) {\n  hasViolation = true;\n  alertType = 'high_wind';\n}\n\nreturn {\n  json: {\n    ...safetyData,\n    hasViolation,\n    alertType,\n    timestamp: new Date().toISOString(),\n    processedBy: 'safety_monitoring_module'\n  }\n};"
          }
        },
        {
          "id": "4",
          "name": "Process Worker Management",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            100
          ],
          "parameters": {
            "functionCode": "// Process worker entry/exit and patrol data\nconst workerData = $input.item.json;\n\n// Calculate time on site if entry/exit data available\nlet timeOnSite = null;\nif (workerData.entryTime && workerData.exitTime) {\n  const entry = new Date(workerData.entryTime);\n  const exit = new Date(workerData.exitTime);\n  timeOnSite = (exit - entry) / (1000 * 60 * 60); // in hours\n}\n\n// Check patrol route completion if applicable\nlet patrolComplete = false;\nif (workerData.patrolRoute) {\n  patrolComplete = workerData.patrolRoute.completed === true;\n}\n\nreturn {\n  json: {\n    ...workerData,\n    timeOnSite,\n    patrolComplete,\n    timestamp: new Date().toISOString(),\n    processedBy: 'worker_management_module'\n  }\n};"
          }
        },
        {
          "id": "5",
          "name": "Process Progress Monitoring",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            100
          ],
          "parameters": {
            "functionCode": "// Process construction progress data\nconst progressData = $input.item.json;\n\n// Calculate completion percentage if available\nlet completionPercentage = progressData.completionPercentage || 0;\n\n// Check if documentation is complete\nlet documentationComplete = false;\nif (progressData.photos && progressData.photos.length > 0) {\n  documentationComplete = true;\n}\n\n// Determine if payment milestone reached\nlet paymentMilestone = false;\nif (completionPercentage >= 25 || completionPercentage >= 50 || \n    completionPercentage >= 75 || completionPercentage >= 100) {\n  paymentMilestone = true;\n}\n\nreturn {\n  json: {\n    ...progressData,\n    completionPercentage,\n    documentationComplete,\n    paymentMilestone,\n    timestamp: new Date().toISOString(),\n    processedBy: 'progress_monitoring_module'\n  }\n};"
          }
        },
        {
          "id": "6",
          "name": "Process Emergency Protocol",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            100
          ],
          "parameters": {
            "functionCode": "// Process emergency situation data\nconst emergencyData = $input.item.json;\n\n// Determine emergency severity\nlet severity = 'low';\nif (emergencyData.injury) {\n  severity = 'high';\n} else if (emergencyData.structuralIssue) {\n  severity = 'critical';\n} else if (emergencyData.fireHazard) {\n  severity = 'critical';\n}\n\n// Generate response protocol\nlet protocol = 'standard_response';\nif (severity === 'critical') {\n  protocol = 'immediate_evacuation';\n} else if (severity === 'high') {\n  protocol = 'medical_response';\n}\n\nreturn {\n  json: {\n    ...emergencyData,\n    severity,\n    protocol,\n    timestamp: new Date().toISOString(),\n    processedBy: 'emergency_protocol_module'\n  }\n};"
          }
        },
        {
          "id": "7",
          "name": "Process Inventory Management",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            100
          ],
          "parameters": {
            "functionCode": "// Process inventory management data\nconst inventoryData = $input.item.json;\n\n// Check for low stock items\nconst lowStockItems = [];\nif (inventoryData.materials) {\n  for (const material of inventoryData.materials) {\n    if (material.quantity < material.threshold) {\n      lowStockItems.push({\n        name: material.name,\n        currentStock: material.quantity,\n        threshold: material.threshold,\n        deficit: material.threshold - material.quantity\n      });\n    }\n  }\n}\n\n// Determine if order needs to be placed\nconst orderNeeded = lowStockItems.length > 0;\n\nreturn {\n  json: {\n    ...inventoryData,\n    lowStockItems,\n    orderNeeded,\n    timestamp: new Date().toISOString(),\n    processedBy: 'inventory_management_module'\n  }\n};"
          }
        },
        {
          "id": "8",
          "name": "Handle Unknown Request",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            100
          ],
          "parameters": {
            "functionCode": "// Handle unknown request type\nconst unknownData = $input.item.json;\n\nreturn {\n  json: {\n    ...unknownData,\n    error: 'Unknown request type',\n    supportedTypes: ['safety', 'worker', 'progress', 'emergency', 'inventory'],\n    timestamp: new Date().toISOString(),\n    processedBy: 'unknown_handler_module'\n  }\n};"
          }
        },
        {
          "id": "9",
          "name": "Merge All Results",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            100,
            250
          ],
          "parameters": {
            "mode": "passthrough"
          }
        },
        {
          "id": "10",
          "name": "Format Response",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            250
          ],
          "parameters": {
            "functionCode": "// Format final response\nconst data = $input.item.json;\n\n// Check if there are any alerts that need immediate attention\nlet requiresImmediateAttention = false;\nlet alertMessage = null;\n\nif (data.hasViolation) {\n  requiresImmediateAttention = true;\n  alertMessage = `Safety violation detected: ${data.alertType}`;\n} else if (data.severity === 'critical' || data.severity === 'high') {\n  requiresImmediateAttention = true;\n  alertMessage = `Emergency situation: ${data.protocol} required`;\n} else if (data.orderNeeded) {\n  requiresImmediateAttention = true;\n  alertMessage = `Low stock alert: ${data.lowStockItems.length} items below threshold`;\n}\n\nreturn {\n  json: {\n    success: true,\n    data,\n    requiresImmediateAttention,\n    alertMessage,\n    processedTimestamp: new Date().toISOString(),\n    system: 'Construction Site Safety and Progress Monitoring'\n  }\n};"
          }
        },
        {
          "id": "11",
          "name": "Webhook Trigger",
          "type": "n8n-nodes-base.webhook",
          "typeVersion": 1,
          "position": [
            500,
            250
          ],
          "parameters": {
            "path": "construction-site-monitoring",
            "responseMode": "lastNode",
            "options": {}
          }
        },
        {
          "id": "12",
          "name": "Route By Task Type",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            700,
            250
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{ $json.taskType }}",
            "rules": [
              {
                "value2": "safety",
                "output": 0
              },
              {
                "value2": "worker",
                "output": 1
              },
              {
                "value2": "progress",
                "output": 2
              }
            ],
            "fallbackOutput": 3
          }
        },
        {
          "id": "13",
          "name": "Process Safety Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            250
          ],
          "parameters": {
            "functionCode": "// Process safety monitoring data\nconst data = $input.item.json;\nlet processed = {\n  ...data,\n  processed: true,\n  safetyStatus: data.value > data.threshold ? 'warning' : 'normal',\n  timestamp: new Date().toISOString()\n};\nreturn {json: processed};"
          }
        },
        {
          "id": "14",
          "name": "Process Worker Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            250
          ],
          "parameters": {
            "functionCode": "// Process worker tracking data\nconst data = $input.item.json;\nlet processed = {\n  ...data,\n  processed: true,\n  workerStatus: data.present ? 'on-site' : 'off-site',\n  timestamp: new Date().toISOString()\n};\nreturn {json: processed};"
          }
        },
        {
          "id": "15",
          "name": "Process Progress Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            250
          ],
          "parameters": {
            "functionCode": "// Process construction progress data\nconst data = $input.item.json;\nlet processed = {\n  ...data,\n  processed: true,\n  progressStatus: data.completed ? 'completed' : 'in-progress',\n  timestamp: new Date().toISOString()\n};\nreturn {json: processed};"
          }
        },
        {
          "id": "16",
          "name": "Process Unknown Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            250
          ],
          "parameters": {
            "functionCode": "// Process unknown data type\nconst data = $input.item.json;\nlet processed = {\n  ...data,\n  processed: true,\n  status: 'unknown-type',\n  timestamp: new Date().toISOString()\n};\nreturn {json: processed};"
          }
        },
        {
          "id": "17",
          "name": "Merge All Results",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            100,
            400
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "18",
          "name": "Prepare Response",
          "type": "n8n-nodes-base.set",
          "typeVersion": 2,
          "position": [
            300,
            400
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": [
              {
                "name": "success",
                "type": "boolean",
                "value": "true"
              },
              {
                "name": "message",
                "type": "string",
                "value": "=Data processed successfully"
              },
              {
                "name": "data",
                "type": "json",
                "value": "={{ $json }}"
              },
              {
                "name": "timestamp",
                "type": "string",
                "value": "={{ $now.toISOString() }}"
              }
            ]
          }
        },
        {
          "id": "19",
          "name": "Error Trigger",
          "type": "n8n-nodes-base.errorTrigger",
          "typeVersion": 1,
          "position": [
            500,
            400
          ],
          "parameters": {}
        },
        {
          "id": "20",
          "name": "Process Error",
          "type": "n8n-nodes-base.set",
          "typeVersion": 2,
          "position": [
            700,
            400
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": [
              {
                "name": "success",
                "type": "boolean",
                "value": "false"
              },
              {
                "name": "message",
                "type": "string",
                "value": "=Workflow error occurred: {{ $json.error.message }}"
              },
              {
                "name": "error",
                "type": "json",
                "value": "={{ $json.error }}"
              },
              {
                "name": "timestamp",
                "type": "string",
                "value": "={{ $now.toISOString() }}"
              }
            ]
          }
        },
        {
          "id": "21",
          "name": "Prepare Data for Validation",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            400
          ],
          "parameters": {
            "functionCode": "// Extract the data that needs validation\nconst inputData = $input.item.json;\n\n// Prepare the data for validation pipeline\nreturn {\n  json: {\n    inputData,\n    validationErrors: [],\n    isValid: true\n  }\n};"
          }
        },
        {
          "id": "22",
          "name": "Schema Validation",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            400
          ],
          "parameters": {
            "functionCode": "// Get the data to validate\nconst { inputData, validationErrors } = $input.item.json;\n\n// Define expected schema based on data type\nlet schemaErrors = [];\nlet isValid = true;\n\n// Check for required fields based on data type\nif (!inputData.type) {\n  schemaErrors.push('Missing required field: type');\n  isValid = false;\n}\n\n// Validate construction site data schema\nif (inputData.type === 'safety') {\n  if (!inputData.sensorId) schemaErrors.push('Missing required field: sensorId');\n  if (!inputData.reading) schemaErrors.push('Missing required field: reading');\n} else if (inputData.type === 'worker') {\n  if (!inputData.workerId) schemaErrors.push('Missing required field: workerId');\n  if (!inputData.location) schemaErrors.push('Missing required field: location');\n} else if (inputData.type === 'material') {\n  if (!inputData.materialId) schemaErrors.push('Missing required field: materialId');\n  if (!inputData.quantity) schemaErrors.push('Missing required field: quantity');\n}\n\n// Update validation status\nreturn {\n  json: {\n    inputData,\n    validationErrors: [...validationErrors, ...schemaErrors],\n    isValid: isValid && validationErrors.length === 0\n  }\n};"
          }
        },
        {
          "id": "23",
          "name": "Type Checking",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            400
          ],
          "parameters": {
            "functionCode": "// Get the data to validate\nconst { inputData, validationErrors, isValid } = $input.item.json;\n\n// Check data types\nlet typeErrors = [];\nlet stillValid = isValid;\n\n// Perform type checking based on data type\nif (inputData.type === 'safety') {\n  if (inputData.reading !== undefined && typeof inputData.reading !== 'number') {\n    typeErrors.push('Invalid type: reading must be a number');\n    stillValid = false;\n  }\n  if (inputData.timestamp !== undefined && !(inputData.timestamp instanceof Date || typeof inputData.timestamp === 'string')) {\n    typeErrors.push('Invalid type: timestamp must be a date or string');\n    stillValid = false;\n  }\n} else if (inputData.type === 'worker') {\n  if (inputData.workerId !== undefined && typeof inputData.workerId !== 'string') {\n    typeErrors.push('Invalid type: workerId must be a string');\n    stillValid = false;\n  }\n  if (inputData.location !== undefined && !Array.isArray(inputData.location)) {\n    typeErrors.push('Invalid type: location must be an array [lat, lng]');\n    stillValid = false;\n  }\n} else if (inputData.type === 'material') {\n  if (inputData.quantity !== undefined && typeof inputData.quantity !== 'number') {\n    typeErrors.push('Invalid type: quantity must be a number');\n    stillValid = false;\n  }\n}\n\n// Update validation status\nreturn {\n  json: {\n    inputData,\n    validationErrors: [...validationErrors, ...typeErrors],\n    isValid: stillValid\n  }\n};"
          }
        },
        {
          "id": "24",
          "name": "Business Rule Validation",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            400
          ],
          "parameters": {
            "functionCode": "// Get the data to validate\nconst { inputData, validationErrors, isValid } = $input.item.json;\n\n// Check business rules\nlet businessErrors = [];\nlet stillValid = isValid;\n\n// Apply business rules based on data type\nif (inputData.type === 'safety') {\n  // Validate safety thresholds\n  if (inputData.reading !== undefined) {\n    if (inputData.reading < 0) {\n      businessErrors.push('Business rule violation: reading cannot be negative');\n      stillValid = false;\n    }\n    if (inputData.reading > 100 && inputData.sensorType === 'temperature') {\n      businessErrors.push('Business rule violation: temperature reading exceeds maximum threshold');\n      stillValid = false;\n    }\n  }\n} else if (inputData.type === 'worker') {\n  // Validate worker data\n  if (inputData.location && inputData.location.length !== 2) {\n    businessErrors.push('Business rule violation: location must contain exactly 2 elements [lat, lng]');\n    stillValid = false;\n  }\n} else if (inputData.type === 'material') {\n  // Validate material quantities\n  if (inputData.quantity !== undefined && inputData.quantity <= 0) {\n    businessErrors.push('Business rule violation: quantity must be positive');\n    stillValid = false;\n  }\n}\n\n// Update validation status\nreturn {\n  json: {\n    inputData,\n    validationErrors: [...validationErrors, ...businessErrors],\n    isValid: stillValid\n  }\n};"
          }
        },
        {
          "id": "25",
          "name": "Sanitize Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            550
          ],
          "parameters": {
            "functionCode": "// Get the data to sanitize\nconst { inputData, validationErrors, isValid } = $input.item.json;\n\n// Only sanitize if data is valid\nif (isValid) {\n  // Create a clean copy of the data\n  const sanitizedData = { ...inputData };\n  \n  // Sanitize based on data type\n  if (inputData.type === 'safety') {\n    // Round sensor readings to 2 decimal places for consistency\n    if (sanitizedData.reading !== undefined) {\n      sanitizedData.reading = Math.round(sanitizedData.reading * 100) / 100;\n    }\n    \n    // Ensure timestamp is in ISO format\n    if (sanitizedData.timestamp) {\n      sanitizedData.timestamp = new Date(sanitizedData.timestamp).toISOString();\n    } else {\n      sanitizedData.timestamp = new Date().toISOString();\n    }\n  } else if (inputData.type === 'worker') {\n    // Trim string values\n    if (sanitizedData.workerId) {\n      sanitizedData.workerId = sanitizedData.workerId.trim();\n    }\n    \n    // Round location coordinates to 6 decimal places\n    if (sanitizedData.location && Array.isArray(sanitizedData.location)) {\n      sanitizedData.location = sanitizedData.location.map(coord => \n        typeof coord === 'number' ? Math.round(coord * 1000000) / 1000000 : coord\n      );\n    }\n  } else if (inputData.type === 'material') {\n    // Round quantities to whole numbers\n    if (sanitizedData.quantity !== undefined) {\n      sanitizedData.quantity = Math.round(sanitizedData.quantity);\n    }\n  }\n  \n  return {\n    json: {\n      originalData: inputData,\n      sanitizedData,\n      validationErrors,\n      isValid\n    }\n  };\n} else {\n  // If invalid, pass through without sanitizing\n  return {\n    json: {\n      originalData: inputData,\n      sanitizedData: null,\n      validationErrors,\n      isValid\n    }\n  };\n}"
          }
        },
        {
          "id": "26",
          "name": "Validation Decision",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            300,
            550
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{$json[\"isValid\"]}}",
                  "operation": "equal",
                  "value2": true
                }
              ]
            }
          }
        },
        {
          "id": "27",
          "name": "Format Validation Errors",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            550
          ],
          "parameters": {
            "functionCode": "// Get the validation errors\nconst { originalData, validationErrors } = $input.item.json;\n\n// Format error response\nreturn {\n  json: {\n    success: false,\n    errorType: \"ValidationError\",\n    message: \"Input validation failed\",\n    details: validationErrors,\n    timestamp: new Date().toISOString(),\n    originalData\n  }\n};"
          }
        },
        {
          "id": "28",
          "name": "Prepare For Next Section",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            700,
            550
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": {
              "string": [
                {
                  "name": "validationStatus",
                  "value": "valid"
                }
              ],
              "object": [
                {
                  "name": "data",
                  "value": "={{ $json[\"sanitizedData\"] }}"
                }
              ]
            }
          }
        },
        {
          "id": "29",
          "name": "Data Processing Entry Point",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            550
          ],
          "parameters": {
            "functionCode": "// Initialize data processing section\nconst data = $input.item.json;\nreturn {\n  json: {\n    ...data,\n    processingStarted: new Date().toISOString(),\n    processingStage: 'initialization'\n  }\n};"
          }
        },
        {
          "id": "30",
          "name": "Route By Data Type",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            1100,
            550
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{ $json.dataType }}",
            "rules": [
              {
                "value2": "safetyData",
                "output": 0
              },
              {
                "value2": "progressData",
                "output": 1
              },
              {
                "value2": "inventoryData",
                "output": 2
              },
              {
                "value2": "weatherData",
                "output": 3
              }
            ],
            "fallbackOutput": 4
          }
        },
        {
          "id": "31",
          "name": "Transform Safety Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            550
          ],
          "parameters": {
            "functionCode": "// Transform safety monitoring data\nconst data = $input.item.json;\nreturn {\n  json: {\n    ...data,\n    processingStage: 'transformation',\n    safetyCompliance: data.safetyMetrics ? (data.safetyMetrics.compliantItems / data.safetyMetrics.totalItems) * 100 : 0,\n    riskLevel: data.safetyMetrics && data.safetyMetrics.incidents > 5 ? 'high' : 'normal',\n    transformedAt: new Date().toISOString()\n  }\n};"
          }
        },
        {
          "id": "32",
          "name": "Transform Progress Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            550
          ],
          "parameters": {
            "functionCode": "// Transform construction progress data\nconst data = $input.item.json;\nreturn {\n  json: {\n    ...data,\n    processingStage: 'transformation',\n    completionPercentage: data.progressMetrics ? (data.progressMetrics.completedTasks / data.progressMetrics.totalTasks) * 100 : 0,\n    isOnSchedule: data.progressMetrics ? data.progressMetrics.daysDelayed <= data.progressMetrics.acceptableDelay : false,\n    transformedAt: new Date().toISOString()\n  }\n};"
          }
        },
        {
          "id": "33",
          "name": "Transform Inventory Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            700
          ],
          "parameters": {
            "functionCode": "// Transform inventory data\nconst data = $input.item.json;\nreturn {\n  json: {\n    ...data,\n    processingStage: 'transformation',\n    lowStockItems: data.inventoryItems ? data.inventoryItems.filter(item => item.currentStock < item.minRequired) : [],\n    stockValue: data.inventoryItems ? data.inventoryItems.reduce((sum, item) => sum + (item.currentStock * item.unitPrice), 0) : 0,\n    transformedAt: new Date().toISOString()\n  }\n};"
          }
        },
        {
          "id": "34",
          "name": "Transform Weather Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            700
          ],
          "parameters": {
            "functionCode": "// Transform weather data\nconst data = $input.item.json;\nreturn {\n  json: {\n    ...data,\n    processingStage: 'transformation',\n    isSafeForConcrete: data.weatherMetrics ? data.weatherMetrics.temperature > 5 && data.weatherMetrics.temperature < 32 && data.weatherMetrics.precipitationChance < 30 : false,\n    isSafeForCraneOperation: data.weatherMetrics ? data.weatherMetrics.windSpeed < 20 && data.weatherMetrics.visibility > 1000 : false,\n    transformedAt: new Date().toISOString()\n  }\n};"
          }
        },
        {
          "id": "35",
          "name": "Transform Unknown Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            700
          ],
          "parameters": {
            "functionCode": "// Handle unknown data type\nconst data = $input.item.json;\nreturn {\n  json: {\n    ...data,\n    processingStage: 'transformation',\n    warning: 'Unknown data type received',\n    transformedAt: new Date().toISOString()\n  }\n};"
          }
        },
        {
          "id": "36",
          "name": "Merge Transformed Data",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            700,
            700
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "37",
          "name": "Enrich With Processing Metadata",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            900,
            700
          ],
          "parameters": {
            "values": {
              "string": [
                {
                  "name": "processingStage",
                  "value": "enrichment"
                },
                {
                  "name": "processingId",
                  "value": "={{ $json.id || uuid() }}"
                },
                {
                  "name": "enrichedAt",
                  "value": "={{ $now.toISOString() }}"
                }
              ]
            },
            "options": {}
          }
        },
        {
          "id": "38",
          "name": "Split Into Batches",
          "type": "n8n-nodes-base.splitInBatches",
          "typeVersion": 1,
          "position": [
            1100,
            700
          ],
          "parameters": {
            "batchSize": 10
          }
        },
        {
          "id": "39",
          "name": "Is Inventory Batch?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1300,
            700
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.dataType }}",
                  "operation": "equal",
                  "value2": "inventoryData"
                }
              ]
            }
          }
        },
        {
          "id": "40",
          "name": "Process Inventory Batch",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            700
          ],
          "parameters": {
            "functionCode": "// Process inventory batch specifically\nconst data = $input.item.json;\n\n// Calculate reorder quantities\nlet processedItems = [];\nif (data.inventoryItems && Array.isArray(data.inventoryItems)) {\n  processedItems = data.inventoryItems.map(item => ({\n    ...item,\n    reorderQuantity: item.currentStock < item.minRequired ? (item.maxRequired - item.currentStock) : 0,\n    reorderNeeded: item.currentStock < item.minRequired,\n    daysUntilDepletion: item.dailyUsage > 0 ? Math.floor(item.currentStock / item.dailyUsage) : 999\n  }));\n}\n\nreturn {\n  json: {\n    ...data,\n    processingStage: 'batch-processing',\n    inventoryItems: processedItems,\n    processingComplete: true,\n    processedAt: new Date().toISOString()\n  }\n};"
          }
        },
        {
          "id": "41",
          "name": "Process Other Batches",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            850
          ],
          "parameters": {
            "functionCode": "// Process non-inventory batches\nconst data = $input.item.json;\n\n// Generic batch processing\nlet processedData = {...data};\nprocessedData.processingStage = 'batch-processing';\nprocessedData.batchProcessed = true;\n\n// Add data type specific processing\nif (data.dataType === 'safetyData') {\n  processedData.requiresImmediate = data.safetyMetrics && data.safetyMetrics.incidents > 3;\n} else if (data.dataType === 'progressData') {\n  processedData.projectStatus = data.isOnSchedule ? 'on-track' : 'delayed';\n} else if (data.dataType === 'weatherData') {\n  processedData.operationalImpact = !data.isSafeForCraneOperation ? 'high' : 'none';\n}\n\nprocessedData.processedAt = new Date().toISOString();\n\nreturn {\n  json: processedData\n};"
          }
        },
        {
          "id": "42",
          "name": "Merge Batch Results",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            300,
            850
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "43",
          "name": "Is Last Batch?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            500,
            850
          ],
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $input.last }}",
                  "value2": true
                }
              ]
            }
          }
        },
        {
          "id": "44",
          "name": "Continue Batch Processing",
          "type": "n8n-nodes-base.noOp",
          "typeVersion": 1,
          "position": [
            700,
            850
          ],
          "parameters": {}
        },
        {
          "id": "45",
          "name": "Aggregate Batch Results",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            850
          ],
          "parameters": {
            "functionCode": "// Aggregate results from all batches\nconst items = $input.all.map(i => i.json);\nconst dataType = items[0]?.dataType;\n\nlet aggregatedData = {\n  dataType,\n  processingStage: 'aggregation',\n  batchCount: items.length,\n  aggregatedAt: new Date().toISOString()\n};\n\n// Type-specific aggregations\nif (dataType === 'safetyData') {\n  const incidents = items.reduce((sum, item) => sum + (item.safetyMetrics?.incidents || 0), 0);\n  const compliance = items.reduce((sum, item) => sum + (item.safetyCompliance || 0), 0) / items.length;\n  aggregatedData.safetyAggregate = { totalIncidents: incidents, averageCompliance: compliance };\n  aggregatedData.criticalAlert = incidents > 10;\n} else if (dataType === 'inventoryData') {\n  // Flatten all inventory items across batches\n  const allItems = items.flatMap(item => item.inventoryItems || []);\n  // Group by item ID and aggregate\n  const itemMap = {};\n  allItems.forEach(item => {\n    if (!itemMap[item.id]) {\n      itemMap[item.id] = item;\n    }\n  });\n  aggregatedData.inventoryAggregate = {\n    totalItems: Object.keys(itemMap).length,\n    lowStockCount: Object.values(itemMap).filter(item => item.reorderNeeded).length,\n    totalValue: Object.values(itemMap).reduce((sum, item) => sum + (item.currentStock * item.unitPrice), 0)\n  };\n  aggregatedData.itemsRequiringOrder = Object.values(itemMap).filter(item => item.reorderNeeded);\n} else if (dataType === 'progressData') {\n  const avgCompletion = items.reduce((sum, item) => sum + (item.completionPercentage || 0), 0) / items.length;\n  const delayedItems = items.filter(item => !item.isOnSchedule).length;\n  aggregatedData.progressAggregate = { averageCompletion: avgCompletion, delayedItemsCount: delayedItems };\n} else if (dataType === 'weatherData') {\n  const unsafeDays = items.filter(item => !item.isSafeForCraneOperation).length;\n  aggregatedData.weatherAggregate = { unsafeDaysCount: unsafeDays };\n}\n\nreturn {\n  json: aggregatedData\n};"
          }
        },
        {
          "id": "46",
          "name": "Has Critical Issues?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1100,
            850
          ],
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $json.criticalAlert === true || ($json.inventoryAggregate && $json.inventoryAggregate.lowStockCount > 5) || ($json.safetyAggregate && $json.safetyAggregate.totalIncidents > 5) }}",
                  "value2": true
                }
              ]
            }
          }
        },
        {
          "id": "47",
          "name": "Generate Critical Issues Summary",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            850
          ],
          "parameters": {
            "functionCode": "// Generate detailed summary for critical issues\nconst data = $input.item.json;\n\nlet criticalSummary = {\n  ...data,\n  processingStage: 'summarization',\n  alertLevel: 'CRITICAL',\n  requiresImmediate: true,\n  summaryTitle: `CRITICAL ALERT: Issues detected in ${data.dataType}`,\n  summaryDetails: []\n};\n\nif (data.dataType === 'safetyData' && data.safetyAggregate) {\n  criticalSummary.summaryDetails.push(\n    `Safety compliance at ${data.safetyAggregate.averageCompliance.toFixed(1)}% (below threshold)`,\n    `${data.safetyAggregate.totalIncidents} safety incidents detected`\n  );\n} else if (data.dataType === 'inventoryData' && data.inventoryAggregate) {\n  criticalSummary.summaryDetails.push(\n    `${data.inventoryAggregate.lowStockCount} items below minimum stock levels`,\n    `Immediate reordering required for ${data.itemsRequiringOrder.length} items`\n  );\n  criticalSummary.itemsRequiringOrder = data.itemsRequiringOrder;\n} else if (data.dataType === 'weatherData' && data.weatherAggregate) {\n  criticalSummary.summaryDetails.push(\n    `Unsafe conditions detected for crane operations`,\n    `${data.weatherAggregate.unsafeDaysCount} days with unsafe weather conditions`\n  );\n}\n\ncriticalSummary.summaryGenerated = new Date().toISOString();\n\nreturn {\n  json: criticalSummary\n};"
          }
        },
        {
          "id": "48",
          "name": "Generate Standard Summary",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            850
          ],
          "parameters": {
            "functionCode": "// Generate standard summary for non-critical issues\nconst data = $input.item.json;\n\nlet standardSummary = {\n  ...data,\n  processingStage: 'summarization',\n  alertLevel: 'NORMAL',\n  requiresImmediate: false,\n  summaryTitle: `Regular Update: ${data.dataType} processing complete`,\n  summaryDetails: []\n};\n\nif (data.dataType === 'safetyData' && data.safetyAggregate) {\n  standardSummary.summaryDetails.push(\n    `Safety compliance at ${data.safetyAggregate.averageCompliance.toFixed(1)}%`,\n    `${data.safetyAggregate.totalIncidents} minor safety incidents logged`\n  );\n} else if (data.dataType === 'inventoryData' && data.inventoryAggregate) {\n  standardSummary.summaryDetails.push(\n    `${data.inventoryAggregate.totalItems} inventory items processed`,\n    `Total inventory value: $${data.inventoryAggregate.totalValue.toFixed(2)}`\n  );\n} else if (data.dataType === 'progressData' && data.progressAggregate) {\n  standardSummary.summaryDetails.push(\n    `Project completion at ${data.progressAggregate.averageCompletion.toFixed(1)}%`,\n    `${data.progressAggregate.delayedItemsCount} tasks currently delayed`\n  );\n} else if (data.dataType === 'weatherData' && data.weatherAggregate) {\n  standardSummary.summaryDetails.push(\n    `Weather conditions analyzed for construction activities`,\n    `${data.weatherAggregate.unsafeDaysCount} days with suboptimal conditions`\n  );\n}\n\nstandardSummary.summaryGenerated = new Date().toISOString();\n\nreturn {\n  json: standardSummary\n};"
          }
        },
        {
          "id": "49",
          "name": "Merge Summaries",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            100,
            1000
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "50",
          "name": "Fetch Weather Forecast",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            300,
            1000
          ],
          "parameters": {
            "url": "https://api.example.com/weather",
            "method": "GET",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "options": {}
          }
        },
        {
          "id": "51",
          "name": "Fetch Supplier Inventory",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            500,
            1000
          ],
          "parameters": {
            "url": "https://api.example.com/suppliers/inventory",
            "method": "GET",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "options": {}
          }
        },
        {
          "id": "52",
          "name": "Enrich With External Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            1000
          ],
          "parameters": {
            "functionCode": "// Combine internal data with external API data\nconst data = $input.item.json;\nconst weatherData = $('Fetch Weather Forecast').item.json;\nconst supplierData = $('Fetch Supplier Inventory').item.json;\n\nlet enrichedData = {\n  ...data,\n  processingStage: 'external-enrichment',\n  externalDataAdded: true,\n  enrichedAt: new Date().toISOString()\n};\n\n// Add weather forecast if relevant\nif (data.dataType === 'weatherData' || data.dataType === 'safetyData') {\n  enrichedData.weatherForecast = {\n    tomorrow: weatherData.forecast?.tomorrow || {},\n    weekAhead: weatherData.forecast?.weekAhead || {}\n  };\n  \n  // Add operational recommendations based on weather\n  if (weatherData.forecast?.tomorrow?.windSpeed > 30) {\n    enrichedData.recommendations = enrichedData.recommendations || [];\n    enrichedData.recommendations.push('Consider rescheduling crane operations due to high winds forecast');\n  }\n}\n\n// Add supplier data if relevant\nif (data.dataType === 'inventoryData' && data.itemsRequiringOrder) {\n  // Match supplier inventory with our needs\n  const availableFromSuppliers = data.itemsRequiringOrder.map(item => {\n    const supplierItem = supplierData.items?.find(s => s.itemCode === item.id);\n    return {\n      ...item,\n      supplierAvailability: supplierItem ? supplierItem.inStock : 'unknown',\n      supplierPrice: supplierItem ? supplierItem.price : null,\n      estimatedDelivery: supplierItem ? supplierItem.deliveryDays : null\n    };\n  });\n  \n  enrichedData.itemsRequiringOrder = availableFromSuppliers;\n  \n  // Add procurement recommendations\n  enrichedData.recommendations = enrichedData.recommendations || [];\n  const urgentItems = availableFromSuppliers.filter(i => i.daysUntilDepletion < 3 && i.supplierAvailability === true);\n  if (urgentItems.length > 0) {\n    enrichedData.recommendations.push(`Place immediate order for ${urgentItems.length} critically low items`);\n  }\n}\n\nreturn {\n  json: enrichedData\n};"
          }
        },
        {
          "id": "53",
          "name": "Any Alerts To Process?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            900,
            1000
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.alertLevel }}",
                  "operation": "equal",
                  "value2": "CRITICAL"
                }
              ]
            }
          }
        },
        {
          "id": "54",
          "name": "Format Alerts For Notification",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            1100,
            1000
          ],
          "parameters": {
            "values": {
              "string": [
                {
                  "name": "notificationTitle",
                  "value": "={{ $json.summaryTitle }}"
                },
                {
                  "name": "notificationBody",
                  "value": "={{ $json.summaryDetails.join('\\n') }}"
                },
                {
                  "name": "notificationType",
                  "value": "urgent"
                },
                {
                  "name": "notificationRecipients",
                  "value": "={{ ['site_manager', 'safety_officer', 'project_lead'].join(',') }}"
                }
              ],
              "boolean": [
                {
                  "name": "requiresAction",
                  "value": true
                }
              ]
            },
            "options": {}
          }
        },
        {
          "id": "55",
          "name": "Data Processing Output",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            1300,
            1000
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "56",
          "name": "Start External Integrations",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            1000
          ],
          "parameters": {
            "functionCode": "// Prepare data for external integrations\nconst inputData = items[0].json;\n\n// Add integration context\nreturn {\n  json: {\n    ...inputData,\n    integrationContext: {\n      timestamp: new Date().toISOString(),\n      requestId: Math.random().toString(36).substring(2, 15)\n    }\n  }\n};"
          }
        },
        {
          "id": "57",
          "name": "Route External Integration",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            100,
            1150
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{ $json.integrationType }}",
            "rules": [
              {
                "value2": "weather",
                "output": 0
              },
              {
                "value2": "supplier",
                "output": 1
              },
              {
                "value2": "prediction",
                "output": 2
              }
            ],
            "fallbackOutput": 3
          }
        },
        {
          "id": "58",
          "name": "Weather API Authentication",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            300,
            1150
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": [
              {
                "name": "apiKey",
                "value": "={{ $env.WEATHER_API_KEY }}",
                "type": "string"
              },
              {
                "name": "baseUrl",
                "value": "https://api.weatherservice.com",
                "type": "string"
              },
              {
                "name": "originalData",
                "value": "={{ $json }}",
                "type": "json"
              }
            ]
          }
        },
        {
          "id": "59",
          "name": "Supplier API Authentication",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            500,
            1150
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": [
              {
                "name": "username",
                "value": "={{ $env.SUPPLIER_USERNAME }}",
                "type": "string"
              },
              {
                "name": "password",
                "value": "={{ $env.SUPPLIER_PASSWORD }}",
                "type": "string"
              },
              {
                "name": "baseUrl",
                "value": "https://api.constructionsupplier.com",
                "type": "string"
              },
              {
                "name": "originalData",
                "value": "={{ $json }}",
                "type": "json"
              }
            ]
          }
        },
        {
          "id": "60",
          "name": "ML Prediction API Auth",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            700,
            1150
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": [
              {
                "name": "bearerToken",
                "value": "={{ $env.ML_API_TOKEN }}",
                "type": "string"
              },
              {
                "name": "baseUrl",
                "value": "https://api.constructionml.com",
                "type": "string"
              },
              {
                "name": "originalData",
                "value": "={{ $json }}",
                "type": "json"
              }
            ]
          }
        },
        {
          "id": "61",
          "name": "Fetch Weather Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            900,
            1150
          ],
          "parameters": {
            "url": "={{ $json.baseUrl }}/v1/forecast",
            "method": "GET",
            "authentication": "predefinedCredentialType",
            "queryParameters": {
              "parameters": [
                {
                  "name": "lat",
                  "value": "={{ $json.originalData.latitude }}"
                },
                {
                  "name": "lon",
                  "value": "={{ $json.originalData.longitude }}"
                },
                {
                  "name": "apikey",
                  "value": "={{ $json.apiKey }}"
                }
              ]
            },
            "options": {
              "timeout": 5000,
              "redirect": {
                "follow": true,
                "maxRedirects": 3
              }
            }
          }
        },
        {
          "id": "62",
          "name": "Fetch Supplier Inventory",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1100,
            1150
          ],
          "parameters": {
            "url": "={{ $json.baseUrl }}/api/inventory",
            "method": "POST",
            "authentication": "predefinedCredentialType",
            "bodyParameters": {
              "parameters": [
                {
                  "name": "materialCodes",
                  "value": "={{ $json.originalData.materialCodes }}"
                },
                {
                  "name": "urgency",
                  "value": "={{ $json.originalData.urgency || 'normal' }}"
                }
              ]
            },
            "headerParameters": {
              "parameters": [
                {
                  "name": "username",
                  "value": "={{ $json.username }}"
                },
                {
                  "name": "password",
                  "value": "={{ $json.password }}"
                }
              ]
            },
            "options": {
              "timeout": 10000,
              "redirect": {
                "follow": true,
                "maxRedirects": 3
              }
            }
          }
        },
        {
          "id": "63",
          "name": "ML Prediction API Call",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1300,
            1150
          ],
          "parameters": {
            "url": "={{ $json.baseUrl }}/api/predict",
            "method": "POST",
            "authentication": "predefinedCredentialType",
            "bodyParameters": {
              "parameters": [
                {
                  "name": "projectData",
                  "value": "={{ $json.originalData.projectData }}"
                },
                {
                  "name": "modelType",
                  "value": "={{ $json.originalData.modelType || 'completion' }}"
                }
              ]
            },
            "headerParameters": {
              "parameters": [
                {
                  "name": "Authorization",
                  "value": "Bearer {{ $json.bearerToken }}"
                }
              ]
            },
            "options": {
              "timeout": 15000,
              "redirect": {
                "follow": true,
                "maxRedirects": 3
              }
            }
          }
        },
        {
          "id": "64",
          "name": "Validate Weather Response",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1500,
            1150
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.statusCode }}",
                  "operation": "equal",
                  "value2": "200"
                }
              ]
            }
          }
        },
        {
          "id": "65",
          "name": "Validate Supplier Response",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            100,
            1300
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.statusCode }}",
                  "operation": "equal",
                  "value2": "200"
                }
              ]
            }
          }
        },
        {
          "id": "66",
          "name": "Validate ML Prediction",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            300,
            1300
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.statusCode }}",
                  "operation": "equal",
                  "value2": "200"
                }
              ]
            }
          }
        },
        {
          "id": "67",
          "name": "Wait Before Retry",
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1,
          "position": [
            500,
            1300
          ],
          "parameters": {
            "amount": 5,
            "unit": "seconds"
          }
        },
        {
          "id": "68",
          "name": "Map Weather Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            1300
          ],
          "parameters": {
            "functionCode": "// Map the weather API response to a standardized format\nconst data = $input.item.json;\n\nreturn {\n  json: {\n    type: 'weather',\n    source: 'weather_api',\n    timestamp: new Date().toISOString(),\n    data: {\n      forecast: data.forecast || [],\n      currentConditions: data.current || {},\n      warnings: data.alerts || []\n    },\n    originalRequest: data.originalData || {}\n  }\n};"
          }
        },
        {
          "id": "69",
          "name": "Map Supplier Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            1300
          ],
          "parameters": {
            "functionCode": "// Map the supplier API response to a standardized format\nconst data = $input.item.json;\n\nreturn {\n  json: {\n    type: 'inventory',\n    source: 'supplier_api',\n    timestamp: new Date().toISOString(),\n    data: {\n      availableItems: data.available || [],\n      backorderedItems: data.backordered || [],\n      estimatedDelivery: data.estimatedDelivery || {}\n    },\n    originalRequest: data.originalData || {}\n  }\n};"
          }
        },
        {
          "id": "70",
          "name": "Map ML Prediction Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            1300
          ],
          "parameters": {
            "functionCode": "// Map the ML API response to a standardized format\nconst data = $input.item.json;\n\nreturn {\n  json: {\n    type: 'prediction',\n    source: 'ml_api',\n    timestamp: new Date().toISOString(),\n    data: {\n      predictions: data.predictions || [],\n      confidence: data.confidence || 0,\n      recommendations: data.recommendations || []\n    },\n    originalRequest: data.originalData || {}\n  }\n};"
          }
        },
        {
          "id": "71",
          "name": "Handle Unknown Integration",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            1300,
            1300
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": [
              {
                "name": "error",
                "value": "Unknown integration type requested",
                "type": "string"
              },
              {
                "name": "originalData",
                "value": "={{ $json }}",
                "type": "json"
              }
            ]
          }
        },
        {
          "id": "72",
          "name": "Wait Before Supplier Retry",
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1,
          "position": [
            1500,
            1300
          ],
          "parameters": {
            "amount": 5,
            "unit": "seconds"
          }
        },
        {
          "id": "73",
          "name": "Combine External Data",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            100,
            1450
          ],
          "parameters": {
            "mode": "mergeByPosition"
          }
        },
        {
          "id": "74",
          "name": "Classify Error",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            1450
          ],
          "parameters": {
            "functionCode": "// Classify the error based on type and severity\nconst error = $input.all()[0].json.error;\nconst errorTypes = {\n  'API': ['timeout', 'connection refused', 'rate limit', '429', '503'],\n  'Data': ['validation', 'schema', 'format', 'missing field'],\n  'Security': ['unauthorized', '401', '403', 'forbidden', 'authentication'],\n  'System': ['memory', 'disk space', 'crash', 'internal error', '500']\n};\n\n// Determine error type\nlet errorType = 'Unknown';\nfor (const [type, keywords] of Object.entries(errorTypes)) {\n  if (keywords.some(keyword => error.message.toLowerCase().includes(keyword))) {\n    errorType = type;\n    break;\n  }\n}\n\n// Determine severity\nlet severity = 'Medium';\nif (errorType === 'Security' || errorType === 'System') {\n  severity = 'High';\n} else if (error.message.toLowerCase().includes('critical')) {\n  severity = 'High';\n} else if (error.message.toLowerCase().includes('warning')) {\n  severity = 'Low';\n}\n\nreturn {\n  json: {\n    error: error,\n    classification: {\n      type: errorType,\n      severity: severity,\n      timestamp: new Date().toISOString(),\n      source: error.source || 'construction-workflow'\n    }\n  }\n};"
          }
        },
        {
          "id": "75",
          "name": "Determine Recovery Strategy",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            500,
            1450
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{$json.classification.type}}",
            "rules": [
              {
                "value2": "API",
                "output": 0
              },
              {
                "value2": "Data",
                "output": 1
              },
              {
                "value2": "Security",
                "output": 2
              }
            ],
            "fallbackOutput": 3
          }
        },
        {
          "id": "76",
          "name": "Execute Fallback Processing",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            1450
          ],
          "parameters": {
            "functionCode": "// Implement recovery strategy based on error type\nconst error = $input.all()[0].json;\nconst errorType = error.classification.type;\nconst severity = error.classification.severity;\n\nlet recoveryAction = '';\nlet recoverySuccess = false;\n\nswitch (errorType) {\n  case 'API':\n    // For API errors, implement retry with exponential backoff\n    recoveryAction = 'Retry with exponential backoff';\n    recoverySuccess = Math.random() > 0.3; // Simulate 70% success rate for retries\n    break;\n  \n  case 'Data':\n    // For data errors, attempt data correction or use defaults\n    recoveryAction = 'Apply data correction or defaults';\n    recoverySuccess = Math.random() > 0.2; // Simulate 80% success rate for data corrections\n    break;\n  \n  case 'Security':\n    // For security errors, refresh credentials or use fallback auth\n    recoveryAction = 'Refresh credentials or use fallback authentication';\n    recoverySuccess = Math.random() > 0.4; // Simulate 60% success rate for auth issues\n    break;\n  \n  default: // System or Unknown\n    // For system errors, use cached data or degraded mode\n    recoveryAction = 'Use cached data or operate in degraded mode';\n    recoverySuccess = Math.random() > 0.5; // Simulate 50% success rate for system errors\n}\n\nreturn {\n  json: {\n    ...error,\n    recovery: {\n      action: recoveryAction,\n      success: recoverySuccess,\n      timestamp: new Date().toISOString(),\n      fallbackUsed: true\n    }\n  }\n};"
          }
        },
        {
          "id": "77",
          "name": "Log Error Details",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            1450
          ],
          "parameters": {
            "functionCode": "// Log detailed error information for debugging and auditing\nconst errorData = $input.all()[0].json;\n\n// Create structured log entry\nconst logEntry = {\n  timestamp: new Date().toISOString(),\n  errorId: `ERR-${Date.now()}-${Math.floor(Math.random() * 1000)}`,\n  errorType: errorData.classification.type,\n  severity: errorData.classification.severity,\n  message: errorData.error.message,\n  stack: errorData.error.stack,\n  source: errorData.classification.source,\n  recoveryAttempted: true,\n  recoveryAction: errorData.recovery.action,\n  recoverySuccess: errorData.recovery.success,\n  affectedComponent: errorData.error.component || 'unknown',\n  context: {\n    workflowId: $workflow.id,\n    nodeId: $node.id,\n    executionId: $execution.id\n  }\n};\n\n// In a real scenario, this would write to a logging system\nconsole.log('CONSTRUCTION ERROR LOG:', JSON.stringify(logEntry, null, 2));\n\nreturn {\n  json: {\n    ...errorData,\n    logging: {\n      logId: logEntry.errorId,\n      timestamp: logEntry.timestamp,\n      loggedSuccessfully: true\n    }\n  }\n};"
          }
        },
        {
          "id": "78",
          "name": "Notify Administrators",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            1100,
            1450
          ],
          "parameters": {
            "fromEmail": "construction-system@example.com",
            "toEmail": "=admin@construction-company.com, {{$json.classification.severity === 'High' ? 'emergency@construction-company.com' : ''}}",
            "subject": "=[CONSTRUCTION SITE ALERT] {{$json.classification.severity}} {{$json.classification.type}} Error Detected",
            "text": "=ERROR DETAILS:\n\nError Type: {{$json.classification.type}}\nSeverity: {{$json.classification.severity}}\nTimestamp: {{$json.classification.timestamp}}\nMessage: {{$json.error.message}}\n\nRECOVERY INFORMATION:\nAction Taken: {{$json.recovery.action}}\nRecovery Success: {{$json.recovery.success ? 'Yes' : 'No'}}\nFallback Used: {{$json.recovery.fallbackUsed ? 'Yes' : 'No'}}\n\nLOG REFERENCE:\nLog ID: {{$json.logging.logId}}\n\n{{$json.classification.severity === 'High' ? 'URGENT ACTION REQUIRED: Please investigate immediately!' : 'Please review when convenient.'}}\n\nThis is an automated message from the Construction Site Monitoring System.",
            "options": {
              "attachments": "={{[$json.error.stack ? {name: 'error-details.txt', data: $json.error.stack} : null].filter(Boolean)}}"
            }
          }
        },
        {
          "id": "79",
          "name": "Collect Activity & Performance Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            1450
          ],
          "parameters": {
            "functionCode": "// Collect all relevant activity and performance data\nconst inputData = $input.all();\nconst timestamp = new Date().toISOString();\n\nconst activityData = {\n  timestamp: timestamp,\n  operation: inputData[0]?.json?.operation || 'unknown',\n  duration: inputData[0]?.json?.duration || 0,\n  status: inputData[0]?.json?.status || 'completed',\n  user: inputData[0]?.json?.user || 'system',\n  resourcesUsed: inputData[0]?.json?.resourcesUsed || {},\n  performanceMetrics: {\n    responseTime: inputData[0]?.json?.responseTime || 0,\n    cpuUsage: inputData[0]?.json?.cpuUsage || 0,\n    memoryUsage: inputData[0]?.json?.memoryUsage || 0\n  }\n};\n\nreturn {json: activityData};"
          }
        },
        {
          "id": "80",
          "name": "Check For Critical Events",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1500,
            1450
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{$json[\"status\"]}}",
                  "operation": "contains",
                  "value2": "error"
                }
              ],
              "number": [
                {
                  "value1": "={{$json[\"performanceMetrics\"][\"responseTime\"]}}",
                  "operation": "larger",
                  "value2": 5000
                }
              ]
            },
            "combineOperation": "any"
          }
        },
        {
          "id": "81",
          "name": "Log Critical Events",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            1600
          ],
          "parameters": {
            "functionCode": "// Create detailed log for critical events\nconst data = $input.item.json;\nconst criticalLog = {\n  timestamp: data.timestamp,\n  level: 'CRITICAL',\n  operation: data.operation,\n  status: data.status,\n  details: {\n    performanceIssue: data.performanceMetrics.responseTime > 5000,\n    errorState: data.status.includes('error'),\n    resourceUtilization: data.resourcesUsed,\n    user: data.user\n  },\n  alertSent: true,\n  alertTimestamp: new Date().toISOString()\n};\n\nreturn {json: criticalLog};"
          }
        },
        {
          "id": "82",
          "name": "Store Audit Trail & Metrics",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            1600
          ],
          "parameters": {
            "functionCode": "// Create standard audit trail and metrics\nconst data = $input.item.json;\nconst standardLog = {\n  timestamp: data.timestamp,\n  level: 'INFO',\n  operation: data.operation,\n  status: data.status,\n  metrics: {\n    responseTime: data.performanceMetrics.responseTime,\n    cpuUsage: data.performanceMetrics.cpuUsage,\n    memoryUsage: data.performanceMetrics.memoryUsage\n  },\n  user: data.user,\n  auditTrail: {\n    action: data.operation,\n    result: data.status,\n    recordedAt: new Date().toISOString()\n  }\n};\n\nreturn {json: standardLog};"
          }
        },
        {
          "id": "83",
          "name": "Combine Logs & Continue",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            500,
            1600
          ],
          "parameters": {
            "mode": "mergeByPosition"
          }
        }
      ],
      "connections": {
        "Main Entry Trigger": {
          "main": [
            [
              {
                "node": "Central Router",
                "type": "main",
                "index": 0
              },
              {
                "node": "Central Router",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Central Router": {
          "main": [
            [
              {
                "node": "Process Safety Monitoring",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Safety Monitoring": {
          "main": [
            [
              {
                "node": "Process Worker Management",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Worker Management": {
          "main": [
            [
              {
                "node": "Process Progress Monitoring",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Progress Monitoring": {
          "main": [
            [
              {
                "node": "Process Emergency Protocol",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Emergency Protocol": {
          "main": [
            [
              {
                "node": "Process Inventory Management",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Inventory Management": {
          "main": [
            [
              {
                "node": "Handle Unknown Request",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge All Results": {
          "main": [
            [
              {
                "node": "Format Response",
                "type": "main",
                "index": 0
              },
              {
                "node": "Prepare Response",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Webhook Trigger": {
          "main": [
            [
              {
                "node": "Central Router",
                "type": "main",
                "index": 0
              },
              {
                "node": "Route By Task Type",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Response": {
          "main": [
            [
              {
                "node": "Webhook Trigger",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Route By Task Type": {
          "main": [
            [
              {
                "node": "Process Safety Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Safety Data": {
          "main": [
            [
              {
                "node": "Process Worker Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Worker Data": {
          "main": [
            [
              {
                "node": "Process Progress Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Progress Data": {
          "main": [
            [
              {
                "node": "Process Unknown Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Error Trigger": {
          "main": [
            [
              {
                "node": "Process Error",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Error": {
          "main": [
            [
              {
                "node": "Prepare Data for Validation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Prepare Data for Validation": {
          "main": [
            [
              {
                "node": "Schema Validation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Schema Validation": {
          "main": [
            [
              {
                "node": "Type Checking",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Type Checking": {
          "main": [
            [
              {
                "node": "Business Rule Validation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Sanitize Data": {
          "main": [
            [
              {
                "node": "Validation Decision",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validation Decision": {
          "main": [
            [
              {
                "node": "Format Validation Errors",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Validation Errors": {
          "main": [
            [
              {
                "node": "Prepare For Next Section",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Prepare For Next Section": {
          "main": [
            [
              {
                "node": "Data Processing Entry Point",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Data Processing Entry Point": {
          "main": [
            [
              {
                "node": "Route By Data Type",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Route By Data Type": {
          "main": [
            [
              {
                "node": "Transform Safety Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Transform Safety Data": {
          "main": [
            [
              {
                "node": "Transform Progress Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Transform Inventory Data": {
          "main": [
            [
              {
                "node": "Transform Weather Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Transform Weather Data": {
          "main": [
            [
              {
                "node": "Transform Unknown Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Transform Unknown Data": {
          "main": [
            [
              {
                "node": "Merge Transformed Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Transformed Data": {
          "main": [
            [
              {
                "node": "Enrich With Processing Metadata",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Enrich With Processing Metadata": {
          "main": [
            [
              {
                "node": "Split Into Batches",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Split Into Batches": {
          "main": [
            [
              {
                "node": "Is Inventory Batch?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Inventory Batch?": {
          "main": [
            [
              {
                "node": "Process Inventory Batch",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Other Batches": {
          "main": [
            [
              {
                "node": "Merge Batch Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Batch Results": {
          "main": [
            [
              {
                "node": "Is Last Batch?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Last Batch?": {
          "main": [
            [
              {
                "node": "Continue Batch Processing",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Continue Batch Processing": {
          "main": [
            [
              {
                "node": "Aggregate Batch Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Aggregate Batch Results": {
          "main": [
            [
              {
                "node": "Has Critical Issues?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Has Critical Issues?": {
          "main": [
            [
              {
                "node": "Generate Critical Issues Summary",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Generate Critical Issues Summary": {
          "main": [
            [
              {
                "node": "Generate Standard Summary",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Summaries": {
          "main": [
            [
              {
                "node": "Fetch Weather Forecast",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Weather Forecast": {
          "main": [
            [
              {
                "node": "Fetch Supplier Inventory",
                "type": "main",
                "index": 0
              },
              {
                "node": "Fetch Supplier Inventory",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Supplier Inventory": {
          "main": [
            [
              {
                "node": "Enrich With External Data",
                "type": "main",
                "index": 0
              },
              {
                "node": "ML Prediction API Call",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Enrich With External Data": {
          "main": [
            [
              {
                "node": "Any Alerts To Process?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Any Alerts To Process?": {
          "main": [
            [
              {
                "node": "Format Alerts For Notification",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Alerts For Notification": {
          "main": [
            [
              {
                "node": "Data Processing Output",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Data Processing Output": {
          "main": [
            [
              {
                "node": "Start External Integrations",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Route External Integration": {
          "main": [
            [
              {
                "node": "Weather API Authentication",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Weather API Authentication": {
          "main": [
            [
              {
                "node": "Supplier API Authentication",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Supplier API Authentication": {
          "main": [
            [
              {
                "node": "ML Prediction API Auth",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "ML Prediction API Auth": {
          "main": [
            [
              {
                "node": "Fetch Weather Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "ML Prediction API Call": {
          "main": [
            [
              {
                "node": "Validate Weather Response",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate Supplier Response": {
          "main": [
            [
              {
                "node": "Validate ML Prediction",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate ML Prediction": {
          "main": [
            [
              {
                "node": "Wait Before Retry",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wait Before Retry": {
          "main": [
            [
              {
                "node": "Map Weather Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Map Weather Data": {
          "main": [
            [
              {
                "node": "Map Supplier Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Map Supplier Data": {
          "main": [
            [
              {
                "node": "Map ML Prediction Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Map ML Prediction Data": {
          "main": [
            [
              {
                "node": "Handle Unknown Integration",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Handle Unknown Integration": {
          "main": [
            [
              {
                "node": "Wait Before Supplier Retry",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Combine External Data": {
          "main": [
            [
              {
                "node": "Classify Error",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Classify Error": {
          "main": [
            [
              {
                "node": "Determine Recovery Strategy",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Determine Recovery Strategy": {
          "main": [
            [
              {
                "node": "Execute Fallback Processing",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Execute Fallback Processing": {
          "main": [
            [
              {
                "node": "Log Error Details",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Log Error Details": {
          "main": [
            [
              {
                "node": "Notify Administrators",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Notify Administrators": {
          "main": [
            [
              {
                "node": "Collect Activity & Performance Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Collect Activity & Performance Data": {
          "main": [
            [
              {
                "node": "Check For Critical Events",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Log Critical Events": {
          "main": [
            [
              {
                "node": "Store Audit Trail & Metrics",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Store Audit Trail & Metrics": {
          "main": [
            [
              {
                "node": "Combine Logs & Continue",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {},
      "active": false
    },
    "provider": "anthropic",
    "model": "claude-3-7-sonnet-20250219",
    "timestamp": "2025-07-22T08:50:37.581Z",
    "nodeCount": 83,
    "connectionCount": 73
  },
  {
    "id": "49ec023b-6e76-4497-bcbc-ad0db1502683",
    "prompt": "To design a comprehensive n8n workflow for Construction Site Safety and Progress Monitoring, we need to orchestrate multiple features into a cohesive automated system. Here’s a detailed plan:\n\n### N8n Workflow Plan\n\n#### Main Entry Point\n- **Trigger Node**: `n8n-nodes-base.cron`\n  - **Purpose**: Schedule the automation to run at specific intervals for daily, weekly, and real-time monitoring tasks.\n\n#### Central Router\n- **Node**: `n8n-nodes-base.switch`\n  - **Purpose**: Route incoming tasks to specific feature branches based on the task type (e.g., safety monitoring, progress, weather checks).\n\n#### Feature Branches\n1. **Safety Monitoring**\n   - **Helmet and Seat Belt Monitoring**:\n     - `n8n-nodes-base.httpRequest` for camera data retrieval.\n     - `n8n-nodes-base.code` for analyzing data and detecting non-compliance.\n     - `n8n-nodes-base.emailSend` to notify safety officers of any violations.\n   \n   - **Tower Crane Wind Sensors and Automatic Shutdown**:\n     - `n8n-nodes-base.mqtt` to receive wind sensor data.\n     - `n8n-nodes-base.code` to check wind speed thresholds.\n     - `n8n-nodes-raspberry.raspberryPi` to shut down cranes if necessary.\n\n2. **Progress Monitoring**\n   - **Weekly Progress Photography with Drones**:\n     - `n8n-nodes-base.executeCommand` to initiate drone flight.\n     - `n8n-nodes-base.googleDrive` to upload photos.\n   \n   - **Contractor Progress Payment Photo Documentation**:\n     - `n8n-nodes-base.httpRequest` to receive and store photo submissions.\n     - `n8n-nodes-base.set` to prepare documentation for payment approval.\n\n3. **Environment Monitoring**\n   - **Weather Monitoring During Concrete Pouring**:\n     - `n8n-nodes-base.httpRequest` to obtain weather data.\n     - `n8n-nodes-base.code` to trigger alerts if adverse weather is detected.\n     - `n8n-nodes-base.emailSend` for notifications.\n\n4. **Security and Emergency Protocols**\n   - **Night Security Patrol Route Tracking**:\n     - `n8n-nodes-base.httpRequest` to track GPS devices of security personnel.\n     - `n8n-nodes-base.code` to verify route completion.\n   \n   - **Emergency Protocol for Workplace Accidents**:\n     - `n8n-nodes-base.errorTrigger` to handle emergencies.\n     - `n8n-nodes-base.emailSend` and `n8n-nodes-base.twilio` to alert emergency contacts.\n\n5. **Material Management**\n   - **Material Stock Tracking and JIT Ordering**:\n     - `n8n-nodes-base.httpRequest` to monitor stock levels.\n     - `n8n-nodes-base.code` for automatic order placement when stocks are low.\n   \n6. **Vibration Monitoring**\n   - **Neighboring Building Vibration Sensor Monitoring**:\n     - `n8n-nodes-base.mqtt` to collect data from sensors.\n     - `n8n-nodes-base.code` to analyze vibration levels and send alerts if thresholds are exceeded.\n\n#### Central Merge Node\n- **Node**: `n8n-nodes-base.merge`\n  - **Purpose**: Combine results and responses from all branches back into the main workflow for final processing.\n\n#### Final Processing/Response\n- **Node**: `n8n-nodes-base.set`\n  - **Purpose**: Prepare a summary report of all activities and alerts.\n- **Node**: `n8n-nodes-base.emailSend`\n  - **Purpose**: Send a comprehensive daily report to project managers and stakeholders.\n\n### Error Handling\n- **Node**: `n8n-nodes-base.errorTrigger`\n  - **Purpose**: Capture any errors across the workflow, ensuring notifications are sent out, and critical issues are addressed.\n\n### Validation Checklist\n☑ All nodes are connected with no isolated chains  \n☑ Central router directs to all feature branches  \n☑ Merge nodes are used after parallel branches  \n☑ Comprehensive error handling is implemented  \n☑ Data flows logically and efficiently between nodes  \n☑ Alerts and notifications are structured and actionable  \n\nBy adhering to this structured workflow plan, you ensure a robust system for managing construction site safety and progress monitoring, integrating all necessary features into a single, cohesive automation.",
    "workflow": {
      "name": "Construction Site Safety and Progress Monitoring33",
      "nodes": [
        {
          "id": "1",
          "name": "Schedule Trigger",
          "type": "n8n-nodes-base.cron",
          "typeVersion": 1,
          "position": [
            100,
            100
          ],
          "parameters": {
            "triggerTimes": {
              "item": [
                {
                  "mode": "everyDay"
                }
              ]
            }
          }
        },
        {
          "id": "2",
          "name": "Route By Task Type",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            300,
            100
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{ $json.taskType }}",
            "rules": {
              "rules": [
                {
                  "value2": "safetyMonitoring",
                  "output": 0
                },
                {
                  "value2": "progressMonitoring",
                  "output": 1
                },
                {
                  "value2": "environmentMonitoring",
                  "output": 2
                },
                {
                  "value2": "materialManagement",
                  "output": 3
                },
                {
                  "value2": "securityPatrol",
                  "output": 4
                }
              ]
            },
            "fallbackOutput": 5
          }
        },
        {
          "id": "3",
          "name": "Safety Monitoring",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            500,
            100
          ],
          "parameters": {
            "url": "https://api.construction.example/safety-sensors",
            "method": "GET",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpBasicAuth",
            "options": {
              "timeout": 5000
            }
          }
        },
        {
          "id": "4",
          "name": "Progress Monitoring",
          "type": "n8n-nodes-base.executeCommand",
          "typeVersion": 1,
          "position": [
            700,
            100
          ],
          "parameters": {
            "command": "drone-control --flight-plan=weekly-progress --capture-photos"
          }
        },
        {
          "id": "5",
          "name": "Environment Monitoring",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            900,
            100
          ],
          "parameters": {
            "url": "https://api.weather.example/forecast",
            "method": "GET",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "options": {
              "timeout": 3000
            }
          }
        },
        {
          "id": "6",
          "name": "Material Management",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1100,
            100
          ],
          "parameters": {
            "url": "https://api.construction.example/inventory",
            "method": "GET",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpBasicAuth",
            "options": {
              "timeout": 5000
            }
          }
        },
        {
          "id": "7",
          "name": "Security Patrol",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1300,
            100
          ],
          "parameters": {
            "url": "https://api.construction.example/security-routes",
            "method": "GET",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpBasicAuth",
            "options": {
              "timeout": 5000
            }
          }
        },
        {
          "id": "8",
          "name": "Handle Unknown Task",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            100
          ],
          "parameters": {
            "functionCode": "// Log unknown task type\nconst taskType = $input.first().json.taskType || 'undefined';\nconsole.log(`Unknown task type: ${taskType}`);\n\nreturn [\n  {\n    json: {\n      success: false,\n      error: `Unknown task type: ${taskType}`,\n      timestamp: new Date().toISOString()\n    }\n  }\n];"
          }
        },
        {
          "id": "9",
          "name": "Merge All Results",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            100,
            250
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "10",
          "name": "Generate Daily Report",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            300,
            250
          ],
          "parameters": {
            "fromEmail": "monitoring@construction-site.example",
            "toEmail": "projectmanager@construction-site.example",
            "subject": "Daily Construction Site Monitoring Report - {{ $now.format('YYYY-MM-DD') }}",
            "text": "=Daily Construction Site Monitoring Report\n\nDate: {{ $now.format('YYYY-MM-DD') }}\n\n{% if $json.safetyIssues %}\n## Safety Issues\n{{ $json.safetyIssues }}\n{% endif %}\n\n{% if $json.progressUpdate %}\n## Progress Update\n{{ $json.progressUpdate }}\n{% endif %}\n\n{% if $json.environmentalConditions %}\n## Environmental Conditions\n{{ $json.environmentalConditions }}\n{% endif %}\n\n{% if $json.materialStatus %}\n## Material Status\n{{ $json.materialStatus }}\n{% endif %}\n\n{% if $json.securityReport %}\n## Security Report\n{{ $json.securityReport }}\n{% endif %}"
          }
        },
        {
          "id": "11",
          "name": "Schedule Trigger",
          "type": "n8n-nodes-base.cron",
          "typeVersion": 1,
          "position": [
            500,
            250
          ],
          "parameters": {
            "triggerTimes": {
              "item": [
                {
                  "mode": "everyDay"
                }
              ]
            }
          }
        },
        {
          "id": "12",
          "name": "Route By Task Type",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            700,
            250
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{ $json.taskType }}",
            "rules": [
              {
                "value2": "safetyMonitoring",
                "output": 0
              },
              {
                "value2": "progressMonitoring",
                "output": 1
              },
              {
                "value2": "environmentMonitoring",
                "output": 2
              }
            ],
            "fallbackOutput": 3
          }
        },
        {
          "id": "13",
          "name": "Process Safety Monitoring",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            250
          ],
          "parameters": {
            "functionCode": "// Process helmet and seat belt monitoring data\nconst data = $input.item.json;\n\n// Check for safety violations\nconst violations = [];\nif (data.helmetDetection && data.helmetDetection.violations) {\n  violations.push(...data.helmetDetection.violations);\n}\n\nif (data.seatBeltDetection && data.seatBeltDetection.violations) {\n  violations.push(...data.seatBeltDetection.violations);\n}\n\nreturn {\n  json: {\n    taskType: 'safetyMonitoring',\n    violations,\n    hasCriticalIssues: violations.length > 0,\n    timestamp: new Date().toISOString(),\n    processingResult: 'completed'\n  }\n};"
          }
        },
        {
          "id": "14",
          "name": "Process Progress Monitoring",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            250
          ],
          "parameters": {
            "functionCode": "// Process construction progress data\nconst data = $input.item.json;\n\n// Process weekly drone photography data\nlet progressData = {};\nif (data.dronePhotography) {\n  progressData = {\n    captureDate: data.dronePhotography.date,\n    photoUrls: data.dronePhotography.urls,\n    completionPercentage: data.dronePhotography.completionEstimate\n  };\n}\n\nreturn {\n  json: {\n    taskType: 'progressMonitoring',\n    progressData,\n    hasCriticalIssues: false,\n    timestamp: new Date().toISOString(),\n    processingResult: 'completed'\n  }\n};"
          }
        },
        {
          "id": "15",
          "name": "Process Environment Monitoring",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            250
          ],
          "parameters": {
            "functionCode": "// Process environment data (weather, vibration)\nconst data = $input.item.json;\n\n// Check wind speed for tower crane safety\nlet criticalIssues = false;\nlet alerts = [];\n\nif (data.windSpeed && data.windSpeed > 35) { // 35 mph threshold\n  criticalIssues = true;\n  alerts.push({\n    type: 'highWind',\n    message: `High wind alert: ${data.windSpeed} mph - Tower crane operation unsafe`,\n    timestamp: new Date().toISOString()\n  });\n}\n\n// Check vibration levels\nif (data.vibrationSensors) {\n  const highVibrations = data.vibrationSensors.filter(s => s.value > s.threshold);\n  if (highVibrations.length > 0) {\n    criticalIssues = true;\n    alerts.push({\n      type: 'highVibration',\n      message: `High vibration detected at ${highVibrations.length} locations`,\n      sensors: highVibrations,\n      timestamp: new Date().toISOString()\n    });\n  }\n}\n\nreturn {\n  json: {\n    taskType: 'environmentMonitoring',\n    alerts,\n    hasCriticalIssues: criticalIssues,\n    timestamp: new Date().toISOString(),\n    processingResult: 'completed'\n  }\n};"
          }
        },
        {
          "id": "16",
          "name": "Handle Unknown Task",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            250
          ],
          "parameters": {
            "functionCode": "// Handle unknown task types\nconst data = $input.item.json;\n\nreturn {\n  json: {\n    taskType: 'unknown',\n    originalData: data,\n    error: 'Unknown task type',\n    timestamp: new Date().toISOString(),\n    processingResult: 'error'\n  }\n};"
          }
        },
        {
          "id": "17",
          "name": "Merge All Results",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            100,
            400
          ],
          "parameters": {
            "mode": "append"
          }
        },
        {
          "id": "18",
          "name": "Check For Critical Issues",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            300,
            400
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.hasCriticalIssues }}",
                  "operation": "equal",
                  "value2": true
                }
              ]
            }
          }
        },
        {
          "id": "19",
          "name": "Send Critical Alert",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            500,
            400
          ],
          "parameters": {
            "fromEmail": "alerts@constructionsite.com",
            "toEmail": "sitemanager@constructionsite.com",
            "subject": "=CRITICAL ALERT: {{ $json.taskType }} Issue Detected",
            "text": "=Critical issue detected in {{ $json.taskType }}:\n\n{{ JSON.stringify($json, null, 2) }}\n\nPlease take immediate action.",
            "options": {
              "priority": "high"
            }
          }
        },
        {
          "id": "20",
          "name": "Error Trigger",
          "type": "n8n-nodes-base.errorTrigger",
          "typeVersion": 1,
          "position": [
            700,
            400
          ],
          "parameters": {
            "errorWorkflow": true
          }
        },
        {
          "id": "21",
          "name": "Prepare Data for Validation",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            400
          ],
          "parameters": {
            "functionCode": "// Prepare incoming data for validation\nconst inputData = items[0].json;\n\n// Structure data for validation pipeline\nreturn [\n  {\n    json: {\n      originalData: inputData,\n      validationErrors: [],\n      isValid: true,\n      sanitizedData: {}\n    }\n  }\n];"
          }
        },
        {
          "id": "22",
          "name": "Schema Validation",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            400
          ],
          "parameters": {
            "functionCode": "// Validate schema for construction site data\nconst item = items[0].json;\nconst data = item.originalData;\nconst errors = item.validationErrors;\n\n// Required fields based on data type\nconst requiredFields = {\n  safety: ['sensorId', 'readingType', 'value', 'timestamp', 'location'],\n  progress: ['projectId', 'area', 'completionPercentage', 'timestamp', 'reportedBy'],\n  weather: ['temperature', 'windSpeed', 'humidity', 'timestamp'],\n  material: ['materialId', 'quantity', 'location', 'status']\n};\n\n// Determine data type\nconst dataType = data.type || 'unknown';\n\n// Check required fields\nif (requiredFields[dataType]) {\n  for (const field of requiredFields[dataType]) {\n    if (data[field] === undefined) {\n      errors.push(`Missing required field: ${field} for ${dataType} data`);\n      item.isValid = false;\n    }\n  }\n}\n\nreturn [{ json: item }];"
          }
        },
        {
          "id": "23",
          "name": "Type Checking",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            400
          ],
          "parameters": {
            "functionCode": "// Validate data types for construction site data\nconst item = items[0].json;\nconst data = item.originalData;\nconst errors = item.validationErrors;\n\n// Type validation rules\nconst typeRules = {\n  safety: {\n    sensorId: 'string',\n    readingType: 'string',\n    value: 'number',\n    timestamp: 'string',\n    location: 'object'\n  },\n  progress: {\n    projectId: 'string',\n    completionPercentage: 'number',\n    timestamp: 'string'\n  },\n  weather: {\n    temperature: 'number',\n    windSpeed: 'number',\n    humidity: 'number'\n  },\n  material: {\n    quantity: 'number',\n    materialId: 'string'\n  }\n};\n\n// Determine data type\nconst dataType = data.type || 'unknown';\n\n// Check types if we have rules for this data type\nif (typeRules[dataType]) {\n  for (const [field, expectedType] of Object.entries(typeRules[dataType])) {\n    if (data[field] !== undefined && typeof data[field] !== expectedType) {\n      errors.push(`Invalid type for ${field}: expected ${expectedType}, got ${typeof data[field]}`);\n      item.isValid = false;\n    }\n  }\n}\n\nreturn [{ json: item }];"
          }
        },
        {
          "id": "24",
          "name": "Business Rule Validation",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            400
          ],
          "parameters": {
            "functionCode": "// Validate business rules for construction site data\nconst item = items[0].json;\nconst data = item.originalData;\nconst errors = item.validationErrors;\n\n// Business validation rules\nconst businessRules = {\n  safety: () => {\n    // Check sensor value ranges\n    if (data.readingType === 'windSpeed' && data.value > 30) {\n      errors.push('CRITICAL: Wind speed exceeds crane safety threshold');\n    }\n    \n    if (data.readingType === 'vibration' && data.value > 10) {\n      errors.push('CRITICAL: Vibration exceeds neighboring building safety threshold');\n    }\n    \n    // Check timestamp is not in future\n    const timestamp = new Date(data.timestamp);\n    const now = new Date();\n    if (timestamp > now) {\n      errors.push('Invalid timestamp: cannot be in the future');\n      item.isValid = false;\n    }\n  },\n  progress: () => {\n    // Validate completion percentage range\n    if (data.completionPercentage < 0 || data.completionPercentage > 100) {\n      errors.push('Completion percentage must be between 0 and 100');\n      item.isValid = false;\n    }\n  },\n  material: () => {\n    // Validate quantity is positive\n    if (data.quantity < 0) {\n      errors.push('Material quantity cannot be negative');\n      item.isValid = false;\n    }\n  }\n};\n\n// Determine data type and run business rules\nconst dataType = data.type || 'unknown';\nif (businessRules[dataType]) {\n  businessRules[dataType]();\n}\n\nreturn [{ json: item }];"
          }
        },
        {
          "id": "25",
          "name": "Sanitize Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            550
          ],
          "parameters": {
            "functionCode": "// Sanitize and normalize construction site data\nconst item = items[0].json;\nconst data = item.originalData;\nconst sanitizedData = {};\n\n// Copy all fields from original data\nObject.assign(sanitizedData, data);\n\n// Sanitization rules\nconst dataType = data.type || 'unknown';\n\n// Common sanitization for all types\nif (sanitizedData.notes) {\n  // Trim and sanitize text fields\n  sanitizedData.notes = sanitizedData.notes.trim();\n  // Remove any HTML tags\n  sanitizedData.notes = sanitizedData.notes.replace(/<[^>]*>/g, '');\n}\n\n// Type-specific sanitization\nswitch (dataType) {\n  case 'safety':\n    // Round numeric values to appropriate precision\n    if (typeof sanitizedData.value === 'number') {\n      sanitizedData.value = Number(sanitizedData.value.toFixed(2));\n    }\n    break;\n    \n  case 'progress':\n    // Ensure completion percentage is rounded to integers\n    if (typeof sanitizedData.completionPercentage === 'number') {\n      sanitizedData.completionPercentage = Math.round(sanitizedData.completionPercentage);\n    }\n    break;\n    \n  case 'material':\n    // Ensure material quantities are positive integers\n    if (typeof sanitizedData.quantity === 'number') {\n      sanitizedData.quantity = Math.max(0, Math.round(sanitizedData.quantity));\n    }\n    break;\n}\n\n// Add metadata\nsanitizedData.processedAt = new Date().toISOString();\n\n// Update the item\nitem.sanitizedData = sanitizedData;\n\nreturn [{ json: item }];"
          }
        },
        {
          "id": "26",
          "name": "Validation Decision",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            300,
            550
          ],
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $json.isValid }}",
                  "value2": true
                }
              ]
            }
          }
        },
        {
          "id": "27",
          "name": "Format Validation Errors",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            550
          ],
          "parameters": {
            "functionCode": "// Format validation errors for reporting\nconst item = items[0].json;\nconst errors = item.validationErrors;\n\n// Create structured error response\nreturn [{\n  json: {\n    success: false,\n    errorCount: errors.length,\n    errors: errors,\n    originalData: item.originalData,\n    message: 'Validation failed. Please correct the errors and try again.',\n    timestamp: new Date().toISOString()\n  }\n}];"
          }
        },
        {
          "id": "28",
          "name": "Prepare For Next Section",
          "type": "n8n-nodes-base.set",
          "typeVersion": 2,
          "position": [
            700,
            550
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": {
              "boolean": [],
              "number": [
                {
                  "name": "validationPassed",
                  "value": "={{ true }}"
                }
              ],
              "string": [],
              "object": [
                {
                  "name": "data",
                  "value": "={{ $json.sanitizedData }}"
                },
                {
                  "name": "originalData",
                  "value": "={{ $json.originalData }}"
                }
              ]
            },
            "options": {}
          }
        },
        {
          "id": "29",
          "name": "Data Processing Entry Point",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            550
          ],
          "parameters": {
            "functionCode": "// Entry point for data processing section\nconst inputData = items[0].json;\nreturn [\n  {\n    json: {\n      ...inputData,\n      processingStartTime: new Date().toISOString(),\n      processingSection: 'data-transformation'\n    }\n  }\n];"
          }
        },
        {
          "id": "30",
          "name": "Route By Data Type",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            1100,
            550
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{ $json.dataType }}",
            "rules": [
              {
                "value2": "safety",
                "output": 0
              },
              {
                "value2": "progress",
                "output": 1
              },
              {
                "value2": "inventory",
                "output": 2
              },
              {
                "value2": "weather",
                "output": 3
              }
            ],
            "fallbackOutput": 4
          }
        },
        {
          "id": "31",
          "name": "Transform Safety Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            550
          ],
          "parameters": {
            "functionCode": "// Transform safety monitoring data\nconst data = items[0].json;\nreturn [\n  {\n    json: {\n      ...data,\n      transformedData: {\n        safetyScore: data.readings ? Math.round((100 - (data.readings.violations || 0) * 10)) : 0,\n        criticalIssues: data.readings?.criticalIssues || [],\n        lastInspection: data.readings?.timestamp || new Date().toISOString(),\n        location: data.readings?.location || 'unknown'\n      },\n      dataCategory: 'safety'\n    }\n  }\n];"
          }
        },
        {
          "id": "32",
          "name": "Transform Progress Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            550
          ],
          "parameters": {
            "functionCode": "// Transform progress monitoring data\nconst data = items[0].json;\nreturn [\n  {\n    json: {\n      ...data,\n      transformedData: {\n        completionPercentage: data.readings?.completionPercentage || 0,\n        milestonesCompleted: data.readings?.milestonesCompleted || [],\n        nextMilestone: data.readings?.nextMilestone || 'unknown',\n        daysAhead: data.readings?.daysAhead || 0,\n        daysBehind: data.readings?.daysBehind || 0\n      },\n      dataCategory: 'progress'\n    }\n  }\n];"
          }
        },
        {
          "id": "33",
          "name": "Transform Inventory Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            700
          ],
          "parameters": {
            "functionCode": "// Transform inventory data\nconst data = items[0].json;\nreturn [\n  {\n    json: {\n      ...data,\n      transformedData: {\n        materialsInStock: data.readings?.materialsInStock || {},\n        lowStockItems: data.readings?.materialsInStock ? \n          Object.entries(data.readings.materialsInStock)\n            .filter(([_, qty]) => qty < (data.readings.thresholds?.[_] || 10))\n            .map(([item]) => item) : [],\n        totalValue: data.readings?.totalValue || 0,\n        lastUpdated: data.readings?.timestamp || new Date().toISOString()\n      },\n      dataCategory: 'inventory'\n    }\n  }\n];"
          }
        },
        {
          "id": "34",
          "name": "Transform Weather Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            700
          ],
          "parameters": {
            "functionCode": "// Transform weather data\nconst data = items[0].json;\nreturn [\n  {\n    json: {\n      ...data,\n      transformedData: {\n        windSpeed: data.readings?.windSpeed || 0,\n        temperature: data.readings?.temperature || 0,\n        precipitation: data.readings?.precipitation || 0,\n        isSafeForCranes: (data.readings?.windSpeed || 0) < 20,\n        isSafeForConcrete: (data.readings?.temperature || 0) > 5 && (data.readings?.precipitation || 0) < 5\n      },\n      dataCategory: 'weather'\n    }\n  }\n];"
          }
        },
        {
          "id": "35",
          "name": "Transform Unknown Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            700
          ],
          "parameters": {
            "functionCode": "// Handle unknown data type\nconst data = items[0].json;\nreturn [\n  {\n    json: {\n      ...data,\n      transformedData: {\n        message: 'Unknown data type received',\n        receivedType: data.dataType || 'undefined',\n        timestamp: new Date().toISOString()\n      },\n      dataCategory: 'unknown'\n    }\n  }\n];"
          }
        },
        {
          "id": "36",
          "name": "Merge Transformed Data",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            700,
            700
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "37",
          "name": "Enrich With Processing Metadata",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            700
          ],
          "parameters": {
            "functionCode": "// Add processing metadata\nconst data = items[0].json;\nreturn [\n  {\n    json: {\n      ...data,\n      processingMetadata: {\n        processorVersion: '1.0.0',\n        processingTimestamp: new Date().toISOString(),\n        processingNode: 'construction-monitoring-system',\n        dataCategory: data.dataCategory,\n        transformationApplied: true\n      }\n    }\n  }\n];"
          }
        },
        {
          "id": "38",
          "name": "Split Into Batches",
          "type": "n8n-nodes-base.splitInBatches",
          "typeVersion": 1,
          "position": [
            1100,
            700
          ],
          "parameters": {
            "batchSize": 10
          }
        },
        {
          "id": "39",
          "name": "Is Inventory Batch?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1300,
            700
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.dataCategory }}",
                  "operation": "equal",
                  "value2": "inventory"
                }
              ]
            }
          }
        },
        {
          "id": "40",
          "name": "Process Inventory Batch",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            700
          ],
          "parameters": {
            "functionCode": "// Special processing for inventory batches\nconst data = items[0].json;\n\n// Calculate reorder quantities\nconst reorderQuantities = {};\nif (data.transformedData && data.transformedData.materialsInStock) {\n  for (const [item, qty] of Object.entries(data.transformedData.materialsInStock)) {\n    const threshold = data.readings?.thresholds?.[item] || 10;\n    const targetStock = threshold * 2;\n    if (qty < threshold) {\n      reorderQuantities[item] = targetStock - qty;\n    }\n  }\n}\n\nreturn [\n  {\n    json: {\n      ...data,\n      inventoryAnalysis: {\n        reorderQuantities,\n        totalReorderItems: Object.keys(reorderQuantities).length,\n        estimatedReorderCost: Object.entries(reorderQuantities)\n          .reduce((sum, [item, qty]) => sum + (qty * (data.readings?.costs?.[item] || 100)), 0),\n        priorityItems: Object.entries(reorderQuantities)\n          .filter(([item, _]) => data.readings?.priority?.[item] === 'high')\n          .map(([item]) => item)\n      }\n    }\n  }\n];"
          }
        },
        {
          "id": "41",
          "name": "Process Other Batches",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            850
          ],
          "parameters": {
            "functionCode": "// Process non-inventory batches\nconst data = items[0].json;\n\n// Apply standard processing based on category\nlet analysis = {};\n\nswitch(data.dataCategory) {\n  case 'safety':\n    analysis = {\n      safetyRating: data.transformedData?.safetyScore > 90 ? 'excellent' : \n                    data.transformedData?.safetyScore > 70 ? 'good' : \n                    data.transformedData?.safetyScore > 50 ? 'concerning' : 'critical',\n      requiresImmediate: data.transformedData?.criticalIssues?.length > 0,\n      recommendedActions: data.transformedData?.criticalIssues?.length > 0 ? \n                         ['stop-work', 'safety-inspection'] : []\n    };\n    break;\n    \n  case 'progress':\n    analysis = {\n      status: data.transformedData?.daysBehind > 5 ? 'behind-schedule' :\n              data.transformedData?.daysAhead > 0 ? 'ahead-of-schedule' : 'on-track',\n      completionTrend: data.transformedData?.completionPercentage > 50 ? 'on-pace' : 'needs-acceleration',\n      milestoneFocus: data.transformedData?.nextMilestone || 'unknown'\n    };\n    break;\n    \n  case 'weather':\n    analysis = {\n      workImpact: !data.transformedData?.isSafeForCranes ? 'halt-crane-operations' :\n                 !data.transformedData?.isSafeForConcrete ? 'reschedule-concrete-work' : 'proceed-as-planned',\n      forecastConsideration: data.transformedData?.temperature < 0 ? 'prepare-for-freezing-conditions' :\n                            data.transformedData?.precipitation > 10 ? 'prepare-for-heavy-rain' : 'normal-conditions'\n    };\n    break;\n    \n  default:\n    analysis = {\n      status: 'processed',\n      notes: 'Standard processing applied to ' + (data.dataCategory || 'unknown') + ' data'\n    };\n}\n\nreturn [\n  {\n    json: {\n      ...data,\n      analysis\n    }\n  }\n];"
          }
        },
        {
          "id": "42",
          "name": "Merge Batch Results",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            300,
            850
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "43",
          "name": "Is Last Batch?",
          "type": "n8n-nodes-base.splitInBatches",
          "typeVersion": 1,
          "position": [
            500,
            850
          ],
          "parameters": {
            "batchSize": 1
          }
        },
        {
          "id": "44",
          "name": "Continue Batch Processing",
          "type": "n8n-nodes-base.noOp",
          "typeVersion": 1,
          "position": [
            700,
            850
          ],
          "parameters": {}
        },
        {
          "id": "45",
          "name": "Aggregate Batch Results",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            850
          ],
          "parameters": {
            "functionCode": "// Aggregate results from all batches\nconst allItems = items.map(item => item.json);\n\n// Group by data category\nconst categorized = {};\nfor (const item of allItems) {\n  const category = item.dataCategory || 'unknown';\n  if (!categorized[category]) {\n    categorized[category] = [];\n  }\n  categorized[category].push(item);\n}\n\n// Create summary for each category\nconst summary = {};\nfor (const [category, items] of Object.entries(categorized)) {\n  switch(category) {\n    case 'safety':\n      summary.safety = {\n        averageSafetyScore: Math.round(items.reduce((sum, item) => sum + (item.transformedData?.safetyScore || 0), 0) / items.length),\n        totalCriticalIssues: items.reduce((sum, item) => sum + (item.transformedData?.criticalIssues?.length || 0), 0),\n        locationsWithIssues: [...new Set(items.filter(item => (item.transformedData?.criticalIssues?.length || 0) > 0)\n                                        .map(item => item.transformedData?.location))]\n      };\n      break;\n      \n    case 'progress':\n      summary.progress = {\n        overallCompletion: Math.round(items.reduce((sum, item) => sum + (item.transformedData?.completionPercentage || 0), 0) / items.length),\n        milestonesCompleted: [...new Set(items.flatMap(item => item.transformedData?.milestonesCompleted || []))],\n        scheduleSummary: items.reduce((sum, item) => sum + ((item.transformedData?.daysAhead || 0) - (item.transformedData?.daysBehind || 0)), 0) > 0 ? \n                        'ahead-of-schedule' : 'behind-schedule'\n      };\n      break;\n      \n    case 'inventory':\n      const allLowStock = items.flatMap(item => item.transformedData?.lowStockItems || []);\n      summary.inventory = {\n        totalLowStockItems: [...new Set(allLowStock)].length,\n        criticalMaterials: [...new Set(allLowStock)].filter(item => \n          items.some(data => data.readings?.priority?.[item] === 'high')),\n        totalEstimatedReorderCost: items.reduce((sum, item) => sum + (item.inventoryAnalysis?.estimatedReorderCost || 0), 0)\n      };\n      break;\n      \n    case 'weather':\n      summary.weather = {\n        averageWindSpeed: Math.round(items.reduce((sum, item) => sum + (item.transformedData?.windSpeed || 0), 0) / items.length * 10) / 10,\n        averageTemperature: Math.round(items.reduce((sum, item) => sum + (item.transformedData?.temperature || 0), 0) / items.length * 10) / 10,\n        craneOperationStatus: items.every(item => item.transformedData?.isSafeForCranes) ? 'safe' : 'unsafe',\n        concreteWorkStatus: items.every(item => item.transformedData?.isSafeForConcrete) ? 'suitable' : 'unsuitable'\n      };\n      break;\n  }\n}\n\n// Add overall site status\nconst hasCriticalSafetyIssues = summary.safety?.totalCriticalIssues > 0;\nconst hasUnsafeCraneConditions = summary.weather?.craneOperationStatus === 'unsafe';\nconst hasCriticalMaterialShortage = (summary.inventory?.criticalMaterials?.length || 0) > 0;\n\nconst siteStatus = hasCriticalSafetyIssues ? 'safety-critical' :\n                  hasUnsafeCraneConditions ? 'weather-warning' :\n                  hasCriticalMaterialShortage ? 'inventory-critical' : 'normal-operation';\n\nreturn [\n  {\n    json: {\n      summary,\n      siteStatus,\n      processingCompleted: true,\n      timestamp: new Date().toISOString(),\n      originalCategories: Object.keys(categorized),\n      itemsProcessed: allItems.length\n    }\n  }\n];"
          }
        },
        {
          "id": "46",
          "name": "Has Critical Issues?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1100,
            850
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.siteStatus }}",
                  "operation": "notEqual",
                  "value2": "normal-operation"
                }
              ]
            }
          }
        },
        {
          "id": "47",
          "name": "Generate Critical Issues Summary",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            850
          ],
          "parameters": {
            "functionCode": "// Generate detailed critical issues summary\nconst data = items[0].json;\nconst { summary, siteStatus } = data;\n\nlet criticalDetails = {\n  alertLevel: 'critical',\n  timestamp: new Date().toISOString(),\n  issueType: siteStatus,\n  details: {}\n};\n\nswitch(siteStatus) {\n  case 'safety-critical':\n    criticalDetails.details = {\n      safetyScore: summary.safety.averageSafetyScore,\n      criticalIssuesCount: summary.safety.totalCriticalIssues,\n      affectedLocations: summary.safety.locationsWithIssues,\n      requiredAction: 'immediate-safety-inspection',\n      alertRecipients: ['safety-officer', 'site-manager', 'project-director']\n    };\n    break;\n    \n  case 'weather-warning':\n    criticalDetails.details = {\n      windSpeed: summary.weather.averageWindSpeed,\n      temperature: summary.weather.averageTemperature,\n      craneStatus: summary.weather.craneOperationStatus,\n      concreteStatus: summary.weather.concreteWorkStatus,\n      requiredAction: 'suspend-crane-operations',\n      alertRecipients: ['operations-manager', 'site-manager']\n    };\n    break;\n    \n  case 'inventory-critical':\n    criticalDetails.details = {\n      criticalMaterials: summary.inventory.criticalMaterials,\n      totalLowStockItems: summary.inventory.totalLowStockItems,\n      estimatedReorderCost: summary.inventory.totalEstimatedReorderCost,\n      requiredAction: 'emergency-procurement',\n      alertRecipients: ['procurement-manager', 'site-manager']\n    };\n    break;\n}\n\nreturn [\n  {\n    json: {\n      ...data,\n      criticalDetails\n    }\n  }\n];"
          }
        },
        {
          "id": "48",
          "name": "Generate Standard Summary",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            850
          ],
          "parameters": {
            "functionCode": "// Generate standard summary for normal operations\nconst data = items[0].json;\nconst { summary } = data;\n\nconst standardSummary = {\n  alertLevel: 'normal',\n  timestamp: new Date().toISOString(),\n  siteStatus: 'normal-operation',\n  details: {\n    safety: summary.safety ? {\n      safetyScore: summary.safety.averageSafetyScore,\n      status: summary.safety.averageSafetyScore > 90 ? 'excellent' : \n              summary.safety.averageSafetyScore > 70 ? 'good' : 'acceptable'\n    } : 'no-data',\n    progress: summary.progress ? {\n      completion: summary.progress.overallCompletion + '%',\n      schedule: summary.progress.scheduleSummary,\n      recentMilestones: summary.progress.milestonesCompleted.slice(0, 3)\n    } : 'no-data',\n    inventory: summary.inventory ? {\n      lowStockCount: summary.inventory.totalLowStockItems,\n      reorderCost: summary.inventory.totalEstimatedReorderCost\n    } : 'no-data',\n    weather: summary.weather ? {\n      conditions: summary.weather.craneOperationStatus === 'safe' && \n                 summary.weather.concreteWorkStatus === 'suitable' ? \n                 'favorable' : 'mixed'\n    } : 'no-data'\n  },\n  recommendedActions: []\n};\n\n// Add recommended actions based on data\nif (summary.inventory && summary.inventory.totalLowStockItems > 0) {\n  standardSummary.recommendedActions.push('review-inventory-levels');\n}\n\nif (summary.progress && summary.progress.scheduleSummary === 'behind-schedule') {\n  standardSummary.recommendedActions.push('review-project-timeline');\n}\n\nif (summary.safety && summary.safety.averageSafetyScore < 80) {\n  standardSummary.recommendedActions.push('schedule-safety-training');\n}\n\nreturn [\n  {\n    json: {\n      ...data,\n      standardSummary\n    }\n  }\n];"
          }
        },
        {
          "id": "49",
          "name": "Merge Summaries",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            100,
            1000
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "50",
          "name": "Fetch Weather Forecast",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            300,
            1000
          ],
          "parameters": {
            "url": "=https://api.example.com/weather?location={{ $json.siteLocation || 'default' }}",
            "method": "GET",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "X-API-Key",
                  "value": "={{ $env.WEATHER_API_KEY }}"
                }
              ]
            },
            "options": {
              "response": {
                "response": {
                  "fullResponse": true,
                  "responseFormat": "json"
                }
              }
            }
          }
        },
        {
          "id": "51",
          "name": "Fetch Supplier Inventory",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            500,
            1000
          ],
          "parameters": {
            "url": "https://api.example.com/supplier/inventory",
            "method": "GET",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "X-API-Key",
                  "value": "={{ $env.SUPPLIER_API_KEY }}"
                }
              ]
            },
            "options": {
              "response": {
                "response": {
                  "fullResponse": true,
                  "responseFormat": "json"
                }
              }
            }
          }
        },
        {
          "id": "52",
          "name": "Enrich With External Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            1000
          ],
          "parameters": {
            "functionCode": "// Enrich processed data with external API data\nconst data = items[0].json;\n\n// Extract data from API responses\nlet weatherForecast = {};\nlet supplierInventory = {};\n\ntry {\n  if (items[1] && items[1].json && items[1].json.body) {\n    weatherForecast = typeof items[1].json.body === 'string' ? \n                     JSON.parse(items[1].json.body) : items[1].json.body;\n  }\n} catch (error) {\n  weatherForecast = { error: 'Failed to parse weather data' };\n}\n\ntry {\n  if (items[2] && items[2].json && items[2].json.body) {\n    supplierInventory = typeof items[2].json.body === 'string' ? \n                       JSON.parse(items[2].json.body) : items[2].json.body;\n  }\n} catch (error) {\n  supplierInventory = { error: 'Failed to parse supplier data' };\n}\n\n// Create enriched data object\nconst externalData = {\n  weather: {\n    forecast: weatherForecast.forecast || {},\n    tomorrowConditions: weatherForecast.forecast?.tomorrow || 'unknown',\n    weekOutlook: weatherForecast.forecast?.weekSummary || 'unknown'\n  },\n  supplier: {\n    availability: supplierInventory.availability || {},\n    leadTimes: supplierInventory.leadTimes || {},\n    specialOffers: supplierInventory.specialOffers || []\n  }\n};\n\n// Add recommendations based on external data\nconst recommendations = [];\n\n// Weather-based recommendations\nif (externalData.weather.tomorrowConditions === 'heavy-rain' || \n    externalData.weather.tomorrowConditions === 'storm') {\n  recommendations.push({\n    type: 'weather-preparation',\n    action: 'secure-site-materials',\n    urgency: 'high',\n    details: 'Severe weather expected tomorrow'\n  });\n}\n\n// Inventory recommendations\nif (data.summary && data.summary.inventory) {\n  const criticalMaterials = data.summary.inventory.criticalMaterials || [];\n  for (const material of criticalMaterials) {\n    const availableFromSupplier = externalData.supplier.availability[material] > 0;\n    const leadTime = externalData.supplier.leadTimes[material] || 'unknown';\n    \n    recommendations.push({\n      type: 'inventory-action',\n      action: availableFromSupplier ? 'place-order' : 'find-alternative-supplier',\n      material,\n      urgency: 'high',\n      details: availableFromSupplier ? \n               `Available from supplier with ${leadTime} lead time` : \n               'Not available from primary supplier'\n    });\n  }\n}\n\nreturn [\n  {\n    json: {\n      ...data,\n      externalData,\n      recommendations,\n      enrichmentCompleted: true,\n      enrichmentTimestamp: new Date().toISOString()\n    }\n  }\n];"
          }
        },
        {
          "id": "53",
          "name": "Any Alerts To Process?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            900,
            1000
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.siteStatus }}",
                  "operation": "notEqual",
                  "value2": "normal-operation"
                }
              ]
            }
          }
        },
        {
          "id": "54",
          "name": "Format Alerts For Notification",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            1000
          ],
          "parameters": {
            "functionCode": "// Format alerts for notification systems\nconst data = items[0].json;\nconst { criticalDetails, siteStatus } = data;\n\n// Create standardized alert format for notification systems\nconst alert = {\n  id: 'alert-' + Date.now(),\n  timestamp: new Date().toISOString(),\n  level: criticalDetails.alertLevel,\n  type: siteStatus,\n  title: `ALERT: ${siteStatus.toUpperCase().replace(/-/g, ' ')}`,\n  message: '',\n  recipients: criticalDetails.details.alertRecipients || [],\n  actions: []\n};\n\n// Customize message based on alert type\nswitch(siteStatus) {\n  case 'safety-critical':\n    alert.message = `Safety critical issue detected at ${criticalDetails.details.affectedLocations.join(', ')}. ` +\n                   `Safety score: ${criticalDetails.details.safetyScore}. ` +\n                   `${criticalDetails.details.criticalIssuesCount} critical issues found.`;\n    alert.actions = [\n      { name: 'View Details', url: '/safety/incidents' },\n      { name: 'Dispatch Team', url: '/safety/dispatch' }\n    ];\n    break;\n    \n  case 'weather-warning':\n    alert.message = `Weather conditions unsafe for crane operations. ` +\n                   `Wind speed: ${criticalDetails.details.windSpeed}km/h. ` +\n                   `Temperature: ${criticalDetails.details.temperature}°C.`;\n    alert.actions = [\n      { name: 'View Forecast', url: '/weather/forecast' },\n      { name: 'Adjust Schedule', url: '/operations/schedule' }\n    ];\n    break;\n    \n  case 'inventory-critical':\n    alert.message = `Critical material shortage detected. ` +\n                   `Materials: ${criticalDetails.details.criticalMaterials.join(', ')}. ` +\n                   `Estimated reorder cost: $${criticalDetails.details.estimatedReorderCost}.`;\n    alert.actions = [\n      { name: 'View Inventory', url: '/inventory/status' },\n      { name: 'Place Order', url: '/inventory/order' }\n    ];\n    break;\n}\n\n// Add SMS-friendly short message\nalert.smsMessage = `SITE ALERT: ${alert.title}. ${alert.message.substring(0, 100)}...`;\n\n// Add email subject and body\nalert.emailSubject = alert.title;\nalert.emailBody = `<h2>${alert.title}</h2><p>${alert.message}</p><p>Required action: ${criticalDetails.details.requiredAction}</p>`;\n\nreturn [\n  {\n    json: {\n      ...data,\n      alert\n    }\n  }\n];"
          }
        },
        {
          "id": "55",
          "name": "Data Processing Output",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            1300,
            1000
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "56",
          "name": "Start External Integrations",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            1000
          ],
          "parameters": {
            "functionCode": "// Initialize external integrations section\nreturn {\n  json: {\n    taskType: $input.first().json.taskType || 'weather',\n    constructionSiteId: $input.first().json.constructionSiteId || '123',\n    timestamp: new Date().toISOString()\n  }\n};"
          }
        },
        {
          "id": "57",
          "name": "Route External Integration",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            100,
            1150
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{ $json.taskType }}",
            "rules": [
              {
                "value2": "weather",
                "output": 0
              },
              {
                "value2": "supplier",
                "output": 1
              },
              {
                "value2": "vibration",
                "output": 2
              }
            ],
            "fallbackOutput": 3
          }
        },
        {
          "id": "58",
          "name": "Weather API Authentication",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            300,
            1150
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": [
              {
                "name": "apiKey",
                "value": "={{ $env.WEATHER_API_KEY }}",
                "type": "string"
              },
              {
                "name": "baseUrl",
                "value": "https://api.weatherapi.com/v1",
                "type": "string"
              },
              {
                "name": "constructionSiteId",
                "value": "={{ $json.constructionSiteId }}",
                "type": "string"
              },
              {
                "name": "coordinates",
                "value": "={{ {\"lat\": 37.7749, \"lng\": -122.4194} }}",
                "type": "json"
              }
            ]
          }
        },
        {
          "id": "59",
          "name": "Supplier API Authentication",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            500,
            1150
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": [
              {
                "name": "apiKey",
                "value": "={{ $env.SUPPLIER_API_KEY }}",
                "type": "string"
              },
              {
                "name": "baseUrl",
                "value": "https://api.constructionsupplier.com/v2",
                "type": "string"
              },
              {
                "name": "constructionSiteId",
                "value": "={{ $json.constructionSiteId }}",
                "type": "string"
              }
            ]
          }
        },
        {
          "id": "60",
          "name": "Vibration API Authentication",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            700,
            1150
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": [
              {
                "name": "apiKey",
                "value": "={{ $env.VIBRATION_API_KEY }}",
                "type": "string"
              },
              {
                "name": "baseUrl",
                "value": "https://api.vibrationmonitoring.com/v1",
                "type": "string"
              },
              {
                "name": "constructionSiteId",
                "value": "={{ $json.constructionSiteId }}",
                "type": "string"
              },
              {
                "name": "sensorIds",
                "value": "={{ [\"SN001\", \"SN002\", \"SN003\"] }}",
                "type": "json"
              }
            ]
          }
        },
        {
          "id": "61",
          "name": "Fetch Weather Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            900,
            1150
          ],
          "parameters": {
            "url": "={{ $json.baseUrl }}/forecast.json",
            "method": "GET",
            "authentication": "predefinedCredentialType",
            "queryParameters": {
              "parameters": [
                {
                  "name": "key",
                  "value": "={{ $json.apiKey }}"
                },
                {
                  "name": "q",
                  "value": "={{ $json.coordinates.lat + ',' + $json.coordinates.lng }}"
                },
                {
                  "name": "days",
                  "value": "3"
                }
              ]
            },
            "options": {
              "timeout": 5000,
              "response": {
                "response": {
                  "fullResponse": true,
                  "responseFormat": "json"
                }
              }
            }
          }
        },
        {
          "id": "62",
          "name": "Fetch Supplier Inventory",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1100,
            1150
          ],
          "parameters": {
            "url": "={{ $json.baseUrl }}/inventory",
            "method": "GET",
            "authentication": "predefinedCredentialType",
            "queryParameters": {
              "parameters": [
                {
                  "name": "api_key",
                  "value": "={{ $json.apiKey }}"
                },
                {
                  "name": "site_id",
                  "value": "={{ $json.constructionSiteId }}"
                }
              ]
            },
            "options": {
              "timeout": 5000,
              "response": {
                "response": {
                  "fullResponse": true,
                  "responseFormat": "json"
                }
              }
            }
          }
        },
        {
          "id": "63",
          "name": "Fetch Vibration Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1300,
            1150
          ],
          "parameters": {
            "url": "={{ $json.baseUrl }}/readings",
            "method": "GET",
            "authentication": "predefinedCredentialType",
            "queryParameters": {
              "parameters": [
                {
                  "name": "api_key",
                  "value": "={{ $json.apiKey }}"
                },
                {
                  "name": "site_id",
                  "value": "={{ $json.constructionSiteId }}"
                },
                {
                  "name": "sensor_ids",
                  "value": "={{ $json.sensorIds.join(',') }}"
                }
              ]
            },
            "options": {
              "timeout": 5000,
              "response": {
                "response": {
                  "fullResponse": true,
                  "responseFormat": "json"
                }
              }
            }
          }
        },
        {
          "id": "64",
          "name": "Validate Weather Response",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1500,
            1150
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.status }}",
                  "operation": "equal",
                  "value2": "200"
                }
              ]
            }
          }
        },
        {
          "id": "65",
          "name": "Validate Supplier Response",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            100,
            1300
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.status }}",
                  "operation": "equal",
                  "value2": "200"
                }
              ]
            }
          }
        },
        {
          "id": "66",
          "name": "Validate Vibration Response",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            300,
            1300
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.status }}",
                  "operation": "equal",
                  "value2": "200"
                }
              ]
            }
          }
        },
        {
          "id": "67",
          "name": "Wait Before Weather Retry",
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1,
          "position": [
            500,
            1300
          ],
          "parameters": {
            "amount": 5,
            "unit": "seconds"
          }
        },
        {
          "id": "68",
          "name": "Wait Before Supplier Retry",
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1,
          "position": [
            700,
            1300
          ],
          "parameters": {
            "amount": 5,
            "unit": "seconds"
          }
        },
        {
          "id": "69",
          "name": "Wait Before Vibration Retry",
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1,
          "position": [
            900,
            1300
          ],
          "parameters": {
            "amount": 5,
            "unit": "seconds"
          }
        },
        {
          "id": "70",
          "name": "Map Weather Data",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            1100,
            1300
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": [
              {
                "name": "integrationType",
                "value": "weather",
                "type": "string"
              },
              {
                "name": "currentConditions",
                "value": "={{ $json.data.current }}",
                "type": "json"
              },
              {
                "name": "forecast",
                "value": "={{ $json.data.forecast }}",
                "type": "json"
              },
              {
                "name": "constructionSiteId",
                "value": "={{ $json.constructionSiteId }}",
                "type": "string"
              },
              {
                "name": "timestamp",
                "value": "={{ $json.timestamp }}",
                "type": "string"
              },
              {
                "name": "status",
                "value": "success",
                "type": "string"
              }
            ]
          }
        },
        {
          "id": "71",
          "name": "Map Supplier Data",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            1300,
            1300
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": [
              {
                "name": "integrationType",
                "value": "supplier",
                "type": "string"
              },
              {
                "name": "inventory",
                "value": "={{ $json.data.inventory }}",
                "type": "json"
              },
              {
                "name": "lowStockItems",
                "value": "={{ $json.data.inventory.filter(item => item.quantity < item.minThreshold) }}",
                "type": "json"
              },
              {
                "name": "constructionSiteId",
                "value": "={{ $json.constructionSiteId }}",
                "type": "string"
              },
              {
                "name": "timestamp",
                "value": "={{ $json.timestamp }}",
                "type": "string"
              },
              {
                "name": "status",
                "value": "success",
                "type": "string"
              }
            ]
          }
        },
        {
          "id": "72",
          "name": "Map Vibration Data",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            1500,
            1300
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": [
              {
                "name": "integrationType",
                "value": "vibration",
                "type": "string"
              },
              {
                "name": "readings",
                "value": "={{ $json.data.readings }}",
                "type": "json"
              },
              {
                "name": "exceededThresholds",
                "value": "={{ $json.data.readings.filter(reading => reading.value > reading.threshold) }}",
                "type": "json"
              },
              {
                "name": "constructionSiteId",
                "value": "={{ $json.constructionSiteId }}",
                "type": "string"
              },
              {
                "name": "timestamp",
                "value": "={{ $json.timestamp }}",
                "type": "string"
              },
              {
                "name": "status",
                "value": "success",
                "type": "string"
              }
            ]
          }
        },
        {
          "id": "73",
          "name": "Combine External Data",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            100,
            1450
          ],
          "parameters": {
            "mode": "append"
          }
        },
        {
          "id": "74",
          "name": "Classify Construction Error",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            1450
          ],
          "parameters": {
            "functionCode": "// Classify the error based on its type and severity\nconst error = $input.all()[0].json.error || {};\n\n// Default classification\nlet classification = {\n  type: 'unknown',\n  severity: 'medium',\n  source: 'system',\n  needsHumanIntervention: false,\n  retryable: true\n};\n\n// Determine error type\nif (error.message && error.message.includes('sensor')) {\n  classification.type = 'sensor_failure';\n  classification.source = 'hardware';\n} else if (error.message && error.message.includes('connection')) {\n  classification.type = 'connectivity';\n  classification.source = 'network';\n} else if (error.message && error.message.includes('weather')) {\n  classification.type = 'external_api';\n  classification.source = 'third_party';\n} else if (error.message && error.message.includes('vibration')) {\n  classification.type = 'safety_critical';\n  classification.source = 'monitoring';\n  classification.severity = 'high';\n  classification.needsHumanIntervention = true;\n} else if (error.message && error.message.includes('crane')) {\n  classification.type = 'equipment_failure';\n  classification.source = 'hardware';\n  classification.severity = 'high';\n  classification.needsHumanIntervention = true;\n}\n\n// Determine severity if not already set\nif (classification.severity !== 'high' && error.code) {\n  if (error.code >= 500) {\n    classification.severity = 'high';\n  } else if (error.code >= 400) {\n    classification.severity = 'medium';\n  } else {\n    classification.severity = 'low';\n  }\n}\n\n// Determine if error is retryable\nif (classification.type === 'connectivity' || \n    classification.type === 'external_api' || \n    (error.code && error.code >= 500)) {\n  classification.retryable = true;\n} else if (classification.type === 'safety_critical') {\n  classification.retryable = false;\n}\n\n// Add timestamp\nclassification.timestamp = new Date().toISOString();\n\n// Return the error with classification\nreturn {\n  json: {\n    error,\n    classification,\n    originalPayload: $input.all()[0].json.data || {}\n  }\n};"
          }
        },
        {
          "id": "75",
          "name": "Determine Recovery Strategy",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            500,
            1450
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{$json.classification.type}}",
            "rules": [
              {
                "value2": "sensor_failure",
                "output": 0
              },
              {
                "value2": "connectivity",
                "output": 1
              },
              {
                "value2": "external_api",
                "output": 1
              },
              {
                "value2": "safety_critical",
                "output": 2
              },
              {
                "value2": "equipment_failure",
                "output": 2
              }
            ],
            "fallbackOutput": 1
          }
        },
        {
          "id": "76",
          "name": "Execute Fallback Processing",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            1450
          ],
          "parameters": {
            "functionCode": "// Execute fallback processing based on error type\nconst { classification, error, originalPayload } = $input.all()[0].json;\n\nlet fallbackResult = {\n  success: false,\n  fallbackExecuted: true,\n  originalError: error,\n  classification,\n  recoveryAction: ''\n};\n\nswitch(classification.type) {\n  case 'sensor_failure':\n    // Use last known good value or default value\n    fallbackResult.recoveryAction = 'used_default_sensor_values';\n    fallbackResult.fallbackData = {\n      sensorId: originalPayload.sensorId || 'unknown',\n      defaultValue: 0,\n      timestamp: new Date().toISOString(),\n      isDefault: true\n    };\n    fallbackResult.success = true;\n    break;\n    \n  case 'connectivity':\n  case 'external_api':\n    // Set retry parameters\n    fallbackResult.recoveryAction = 'scheduled_retry';\n    fallbackResult.retryCount = (originalPayload.retryCount || 0) + 1;\n    fallbackResult.nextRetryTime = new Date(Date.now() + 5 * 60 * 1000).toISOString(); // 5 minutes later\n    fallbackResult.success = fallbackResult.retryCount <= 3; // Success if we can still retry\n    break;\n    \n  case 'safety_critical':\n  case 'equipment_failure':\n    // Safety critical issues require immediate human intervention\n    fallbackResult.recoveryAction = 'emergency_protocol_activated';\n    fallbackResult.requiresImmediate = true;\n    fallbackResult.success = false; // Always mark as unsuccessful\n    break;\n    \n  default:\n    // Generic fallback\n    fallbackResult.recoveryAction = 'generic_error_handling';\n    fallbackResult.success = false;\n}\n\nreturn { json: fallbackResult };"
          }
        },
        {
          "id": "77",
          "name": "Log Error Details",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            1450
          ],
          "parameters": {
            "functionCode": "// Prepare comprehensive error log\nconst input = $input.all()[0].json;\n\nconst logEntry = {\n  timestamp: new Date().toISOString(),\n  errorType: input.classification.type,\n  errorSeverity: input.classification.severity,\n  errorSource: input.classification.source,\n  originalError: input.originalError || input.error,\n  recoveryAction: input.recoveryAction,\n  recoverySuccess: input.success,\n  workflowName: 'Construction Site Safety and Progress Monitoring',\n  nodeId: input.originalError?.nodeId || 'unknown',\n  nodeName: input.originalError?.nodeName || 'unknown',\n  affectedSystems: []\n};\n\n// Determine affected systems based on error type\nswitch(input.classification.type) {\n  case 'sensor_failure':\n    logEntry.affectedSystems = ['monitoring_system', 'safety_alerts'];\n    break;\n  case 'connectivity':\n    logEntry.affectedSystems = ['data_collection', 'reporting'];\n    break;\n  case 'external_api':\n    logEntry.affectedSystems = ['weather_monitoring', 'external_integrations'];\n    break;\n  case 'safety_critical':\n    logEntry.affectedSystems = ['safety_alerts', 'emergency_protocols', 'site_operations'];\n    break;\n  case 'equipment_failure':\n    logEntry.affectedSystems = ['crane_operations', 'site_safety', 'project_timeline'];\n    break;\n  default:\n    logEntry.affectedSystems = ['general_system'];\n}\n\n// Add stack trace if available\nif (input.originalError && input.originalError.stack) {\n  logEntry.stackTrace = input.originalError.stack;\n}\n\n// Add context data for debugging\nlogEntry.contextData = {\n  inputData: input.originalPayload || {},\n  executionTime: new Date().toISOString(),\n  environment: 'production' // This would be dynamic in a real system\n};\n\nconsole.log('ERROR LOG:', JSON.stringify(logEntry, null, 2));\n\n// In a real implementation, you would store this in a database or logging system\n// For this example, we just pass it through\nreturn {\n  json: {\n    ...input,\n    logEntry\n  }\n};"
          }
        },
        {
          "id": "78",
          "name": "Notify Administrators",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            1100,
            1450
          ],
          "parameters": {
            "fromEmail": "{{$json.classification.severity === 'high' ? 'urgent-alerts@construction-site.com' : 'alerts@construction-site.com'}}",
            "toEmail": "{{$json.classification.severity === 'high' ? 'emergency@construction-site.com,site-manager@construction-site.com' : 'support@construction-site.com'}}",
            "subject": "{{$json.classification.severity === 'high' ? '🚨 URGENT: ' : '⚠️ '}}Construction Site Error: {{$json.classification.type}} - {{$json.recoveryAction}}",
            "text": "=Error Details:\n\nType: {{$json.classification.type}}\nSeverity: {{$json.classification.severity}}\nSource: {{$json.classification.source}}\nTimestamp: {{$json.classification.timestamp}}\n\nRecovery Action: {{$json.recoveryAction}}\nRecovery Success: {{$json.success}}\n\nOriginal Error: {{JSON.stringify($json.originalError, null, 2)}}\n\n{{$json.classification.severity === 'high' ? 'IMMEDIATE ACTION REQUIRED!' : 'Please review when convenient.'}}\n\nAffected Systems: {{$json.logEntry.affectedSystems.join(', ')}}\n\nFull Log Entry:\n{{JSON.stringify($json.logEntry, null, 2)}}",
            "options": {
              "attachments": "={{$json.classification.severity === 'high' ? [{name: 'error_details.json', content: Buffer.from(JSON.stringify($json.logEntry, null, 2)).toString('base64'), contentType: 'application/json'}] : []}}"
            }
          }
        },
        {
          "id": "79",
          "name": "Collect Activity & Performance Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            1450
          ],
          "parameters": {
            "functionCode": "// Collect all activity data and performance metrics\nconst inputData = $input.all();\nconst timestamp = new Date().toISOString();\n\n// Create activity log structure\nconst activityLog = {\n  timestamp,\n  executionId: $execution.id,\n  workflowId: $workflow.id,\n  inputDataSize: JSON.stringify(inputData).length,\n  processingTime: $execution.duration,\n  activityType: inputData[0]?.json?.taskType || 'unknown',\n  source: inputData[0]?.json?.source || 'system',\n  status: inputData[0]?.json?.status || 'completed',\n  details: inputData[0]?.json?.details || {}\n};\n\n// Performance metrics\nconst performanceMetrics = {\n  timestamp,\n  executionDuration: $execution.duration,\n  memoryUsage: process.memoryUsage().heapUsed,\n  nodeCount: $workflow.nodes.length,\n  dataSize: JSON.stringify(inputData).length,\n  // Construction site specific metrics\n  safetyIncidents: inputData[0]?.json?.safetyIncidents || 0,\n  progressPercentage: inputData[0]?.json?.progressPercentage || 0,\n  materialUsage: inputData[0]?.json?.materialUsage || {}\n};\n\nreturn {\n  activityLog,\n  performanceMetrics,\n  originalData: inputData[0]?.json || {}\n};"
          }
        },
        {
          "id": "80",
          "name": "Check For Critical Events",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1500,
            1450
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.activityLog.status }}",
                  "operation": "equals",
                  "value2": "error"
                }
              ],
              "number": [
                {
                  "value1": "={{ $json.performanceMetrics.safetyIncidents }}",
                  "operation": "larger",
                  "value2": 0
                }
              ]
            },
            "combineOperation": "any"
          }
        },
        {
          "id": "81",
          "name": "Create Critical Audit Trail",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            1600
          ],
          "parameters": {
            "functionCode": "// Create detailed audit trail for critical events\nconst data = $input.item;\n\nconst criticalAudit = {\n  timestamp: new Date().toISOString(),\n  severity: 'CRITICAL',\n  eventType: data.performanceMetrics.safetyIncidents > 0 ? 'SAFETY_INCIDENT' : 'SYSTEM_ERROR',\n  location: data.originalData.location || 'Unknown',\n  details: {\n    ...data.activityLog,\n    errorDetails: data.originalData.error || 'Unknown error',\n    affectedSystems: data.originalData.affectedSystems || [],\n    responsibleParty: data.originalData.responsibleParty || 'Unknown',\n    requiredAction: data.originalData.requiredAction || 'Immediate investigation required'\n  },\n  notificationSent: true,\n  escalationLevel: 'HIGH',\n  auditId: `CRIT-${Date.now()}-${Math.floor(Math.random() * 1000)}`\n};\n\n// Add construction site specific audit details\nif (data.originalData.constructionPhase) {\n  criticalAudit.constructionDetails = {\n    phase: data.originalData.constructionPhase,\n    area: data.originalData.constructionArea,\n    equipment: data.originalData.equipmentInvolved,\n    personnel: data.originalData.personnelInvolved\n  };\n}\n\nreturn {\n  ...data,\n  auditTrail: criticalAudit,\n  metrics: {\n    ...data.performanceMetrics,\n    criticalEventsCount: 1,\n    lastCriticalEvent: new Date().toISOString()\n  }\n};"
          }
        },
        {
          "id": "82",
          "name": "Create Standard Audit Trail",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            1600
          ],
          "parameters": {
            "functionCode": "// Create standard audit trail for normal operations\nconst data = $input.item;\n\nconst standardAudit = {\n  timestamp: new Date().toISOString(),\n  severity: 'NORMAL',\n  eventType: data.activityLog.activityType,\n  location: data.originalData.location || 'N/A',\n  details: {\n    ...data.activityLog,\n    constructionPhase: data.originalData.constructionPhase || 'N/A',\n    progressUpdate: data.originalData.progressUpdate || 'N/A',\n    weatherConditions: data.originalData.weatherConditions || 'N/A'\n  },\n  auditId: `STD-${Date.now()}-${Math.floor(Math.random() * 1000)}`\n};\n\n// Add construction site specific metrics\nconst metrics = {\n  ...data.performanceMetrics,\n  standardEventsCount: 1,\n  lastStandardEvent: new Date().toISOString(),\n  constructionMetrics: {\n    materialsUsed: data.originalData.materialsUsed || {},\n    laborHours: data.originalData.laborHours || 0,\n    equipmentUtilization: data.originalData.equipmentUtilization || 0,\n    qualityChecks: data.originalData.qualityChecks || []\n  }\n};\n\nreturn {\n  ...data,\n  auditTrail: standardAudit,\n  metrics\n};"
          }
        },
        {
          "id": "83",
          "name": "Store Audit Trail & Metrics",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            500,
            1600
          ],
          "parameters": {
            "mode": "passThrough",
            "joinMode": "mergeByPosition",
            "outputDataFrom": "input1"
          }
        }
      ],
      "connections": {
        "Schedule Trigger": {
          "main": [
            [
              {
                "node": "Route By Task Type",
                "type": "main",
                "index": 0
              },
              {
                "node": "Route By Task Type",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Route By Task Type": {
          "main": [
            [
              {
                "node": "Safety Monitoring",
                "type": "main",
                "index": 0
              },
              {
                "node": "Process Safety Monitoring",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Safety Monitoring": {
          "main": [
            [
              {
                "node": "Progress Monitoring",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Progress Monitoring": {
          "main": [
            [
              {
                "node": "Environment Monitoring",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Environment Monitoring": {
          "main": [
            [
              {
                "node": "Material Management",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Material Management": {
          "main": [
            [
              {
                "node": "Security Patrol",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Security Patrol": {
          "main": [
            [
              {
                "node": "Handle Unknown Task",
                "type": "main",
                "index": 0
              },
              {
                "node": "Handle Unknown Task",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge All Results": {
          "main": [
            [
              {
                "node": "Generate Daily Report",
                "type": "main",
                "index": 0
              },
              {
                "node": "Check For Critical Issues",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Safety Monitoring": {
          "main": [
            [
              {
                "node": "Process Progress Monitoring",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Progress Monitoring": {
          "main": [
            [
              {
                "node": "Process Environment Monitoring",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check For Critical Issues": {
          "main": [
            [
              {
                "node": "Send Critical Alert",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Error Trigger": {
          "main": [
            [
              {
                "node": "Prepare Data for Validation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Prepare Data for Validation": {
          "main": [
            [
              {
                "node": "Schema Validation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Schema Validation": {
          "main": [
            [
              {
                "node": "Type Checking",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Type Checking": {
          "main": [
            [
              {
                "node": "Business Rule Validation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Sanitize Data": {
          "main": [
            [
              {
                "node": "Validation Decision",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validation Decision": {
          "main": [
            [
              {
                "node": "Format Validation Errors",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Validation Errors": {
          "main": [
            [
              {
                "node": "Prepare For Next Section",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Prepare For Next Section": {
          "main": [
            [
              {
                "node": "Data Processing Entry Point",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Data Processing Entry Point": {
          "main": [
            [
              {
                "node": "Route By Data Type",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Route By Data Type": {
          "main": [
            [
              {
                "node": "Transform Safety Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Transform Safety Data": {
          "main": [
            [
              {
                "node": "Transform Progress Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Transform Inventory Data": {
          "main": [
            [
              {
                "node": "Transform Weather Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Transform Weather Data": {
          "main": [
            [
              {
                "node": "Transform Unknown Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Transform Unknown Data": {
          "main": [
            [
              {
                "node": "Merge Transformed Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Transformed Data": {
          "main": [
            [
              {
                "node": "Enrich With Processing Metadata",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Enrich With Processing Metadata": {
          "main": [
            [
              {
                "node": "Split Into Batches",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Split Into Batches": {
          "main": [
            [
              {
                "node": "Is Inventory Batch?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Inventory Batch?": {
          "main": [
            [
              {
                "node": "Process Inventory Batch",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Other Batches": {
          "main": [
            [
              {
                "node": "Merge Batch Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Batch Results": {
          "main": [
            [
              {
                "node": "Is Last Batch?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Last Batch?": {
          "main": [
            [
              {
                "node": "Continue Batch Processing",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Continue Batch Processing": {
          "main": [
            [
              {
                "node": "Aggregate Batch Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Aggregate Batch Results": {
          "main": [
            [
              {
                "node": "Has Critical Issues?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Has Critical Issues?": {
          "main": [
            [
              {
                "node": "Generate Critical Issues Summary",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Generate Critical Issues Summary": {
          "main": [
            [
              {
                "node": "Generate Standard Summary",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Summaries": {
          "main": [
            [
              {
                "node": "Fetch Weather Forecast",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Weather Forecast": {
          "main": [
            [
              {
                "node": "Fetch Supplier Inventory",
                "type": "main",
                "index": 0
              },
              {
                "node": "Fetch Supplier Inventory",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Supplier Inventory": {
          "main": [
            [
              {
                "node": "Enrich With External Data",
                "type": "main",
                "index": 0
              },
              {
                "node": "Fetch Vibration Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Enrich With External Data": {
          "main": [
            [
              {
                "node": "Any Alerts To Process?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Any Alerts To Process?": {
          "main": [
            [
              {
                "node": "Format Alerts For Notification",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Alerts For Notification": {
          "main": [
            [
              {
                "node": "Data Processing Output",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Data Processing Output": {
          "main": [
            [
              {
                "node": "Start External Integrations",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Route External Integration": {
          "main": [
            [
              {
                "node": "Weather API Authentication",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Weather API Authentication": {
          "main": [
            [
              {
                "node": "Supplier API Authentication",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Supplier API Authentication": {
          "main": [
            [
              {
                "node": "Vibration API Authentication",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Vibration API Authentication": {
          "main": [
            [
              {
                "node": "Fetch Weather Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Vibration Data": {
          "main": [
            [
              {
                "node": "Validate Weather Response",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate Supplier Response": {
          "main": [
            [
              {
                "node": "Validate Vibration Response",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate Vibration Response": {
          "main": [
            [
              {
                "node": "Wait Before Weather Retry",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wait Before Weather Retry": {
          "main": [
            [
              {
                "node": "Wait Before Supplier Retry",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wait Before Supplier Retry": {
          "main": [
            [
              {
                "node": "Wait Before Vibration Retry",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wait Before Vibration Retry": {
          "main": [
            [
              {
                "node": "Map Weather Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Map Weather Data": {
          "main": [
            [
              {
                "node": "Map Supplier Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Map Supplier Data": {
          "main": [
            [
              {
                "node": "Map Vibration Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Combine External Data": {
          "main": [
            [
              {
                "node": "Classify Construction Error",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Classify Construction Error": {
          "main": [
            [
              {
                "node": "Determine Recovery Strategy",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Determine Recovery Strategy": {
          "main": [
            [
              {
                "node": "Execute Fallback Processing",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Execute Fallback Processing": {
          "main": [
            [
              {
                "node": "Log Error Details",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Log Error Details": {
          "main": [
            [
              {
                "node": "Notify Administrators",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Notify Administrators": {
          "main": [
            [
              {
                "node": "Collect Activity & Performance Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Collect Activity & Performance Data": {
          "main": [
            [
              {
                "node": "Check For Critical Events",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create Critical Audit Trail": {
          "main": [
            [
              {
                "node": "Create Standard Audit Trail",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create Standard Audit Trail": {
          "main": [
            [
              {
                "node": "Store Audit Trail & Metrics",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {},
      "active": false
    },
    "provider": "anthropic",
    "model": "claude-3-7-sonnet-20250219",
    "timestamp": "2025-07-22T09:04:46.454Z",
    "nodeCount": 83,
    "connectionCount": 69
  },
  {
    "id": "204c2c0a-bbda-44fb-be00-85c29748900c",
    "prompt": "To implement a comprehensive workflow for Construction Site Safety and Progress Monitoring in n8n, we need to orchestrate multiple features together, ensuring all components interact seamlessly according to the specified architecture. Here's a detailed plan:\n\n### 1. **Main Entry Point**\n- **Node:** `n8n-nodes-base.webhook`\n  - **Purpose:** Serve as the main entry point for data inputs such as camera feeds, sensor data, and worker logs.\n\n### 2. **Central Router**\n- **Node:** `n8n-nodes-base.switch`\n  - **Purpose:** Route data to the appropriate feature branch based on input type (e.g., safety monitoring, progress tracking).\n  - **Connections:**\n    - Route to IoT Monitoring (Helmet/Seat Belt, Wind Sensors)\n    - Route to Worker Management (Entry/Exit, Timekeeping)\n    - Route to Progress Tracking (Drone Photography, Vibration Sensors)\n    - Route to Material Management (Stock Tracking, JIT Ordering)\n    - Route to Emergency Protocol\n\n### 3. **Feature Branches**\n\n#### **IoT/Sensor Management**\n- **Helmet and Seat Belt Monitoring**\n  - **Nodes:**\n    - `n8n-nodes-base.httpRequest` (for camera data retrieval)\n    - `n8n-nodes-base.code` (process image data)\n    - **Error Handling:** `n8n-nodes-base.errorTrigger`\n  \n- **Tower Crane Wind Sensors**\n  - **Nodes:**\n    - `n8n-nodes-base.mqtt` (receive wind data)\n    - `n8n-nodes-base.code` (analyze wind speed)\n    - **Action:** Automatic Shutdown if wind speed exceeds threshold\n    - **Error Handling:** `n8n-nodes-base.errorTrigger`\n\n#### **Order Management**\n- **Worker Entry and Exit**\n  - **Nodes:**\n    - `n8n-nodes-base.cron` (trigger daily at start/end times)\n    - `n8n-nodes-base.httpRequest` (worker log API)\n    - `n8n-nodes-base.set` (prepare data)\n    - **Error Handling:** `n8n-nodes-base.errorTrigger`\n\n#### **Progress Monitoring**\n- **Weekly Progress Photography with Drones**\n  - **Nodes:**\n    - `n8n-nodes-base.cron` (trigger weekly)\n    - `n8n-nodes-base.executeCommand` (initiate drone flight)\n    - `n8n-nodes-base.httpRequest` (upload photos)\n    - **Error Handling:** `n8n-nodes-base.errorTrigger`\n\n- **Vibration Sensor Monitoring**\n  - **Nodes:**\n    - `n8n-nodes-base.mqtt` (vibration data)\n    - `n8n-nodes-base.code` (analyze vibrations)\n    - **Error Handling:** `n8n-nodes-base.errorTrigger`\n\n#### **Safety Systems**\n- **Emergency Protocol**\n  - **Nodes:**\n    - `n8n-nodes-base.errorTrigger` (catch accident events)\n    - `n8n-nodes-base.emailSend` (notify emergency services)\n    - `n8n-nodes-base.twilio` (send SMS alerts)\n\n#### **Inventory Management**\n- **Material Stock Tracking and JIT Ordering**\n  - **Nodes:**\n    - `n8n-nodes-base.cron` (scheduled stock check)\n    - `n8n-nodes-base.httpRequest` (inventory API)\n    - `n8n-nodes-base.code` (calculate order needs)\n    - **Action:** Place order if stock below threshold\n    - **Error Handling:** `n8n-nodes-base.errorTrigger`\n\n### 4. **Central Merge Node**\n- **Node:** `n8n-nodes-base.merge`\n  - **Purpose:** Combine results from all feature branches into a cohesive workflow output.\n  - **Connections:** All branches route back here after processing.\n\n### 5. **Final Processing/Response**\n- **Node:** `n8n-nodes-base.set`\n  - **Purpose:** Format and prepare a final report or response based on merged data.\n- **Node:** `n8n-nodes-base.emailSend`\n  - **Purpose:** Send the final report to relevant stakeholders.\n\n### Additional Considerations:\n- **NLP Analysis:** For any text-based data or feedback, integrate NLP for sentiment analysis using `n8n-nodes-base.httpRequest` and `n8n-nodes-base.code`.\n- **Error Handling:** Ensure each critical operation includes an `n8n-nodes-base.errorTrigger` to manage and notify on errors.\n- **Security Patrol:** Track routes using GPS data and ensure any deviations trigger alerts via `n8n-nodes-base.twilio`.\n\n### Final Validation Checklist:\n☑ All nodes are properly connected with no isolated chains  \n☑ Each branch has comprehensive error handling  \n☑ Data flows logically and efficiently, with all branches merging back to the central flow  \n☑ All critical features are orchestrated as per the mandatory architecture  \n\nThis workflow ensures 360° management for construction site safety and progress monitoring while adhering to the best practices in workflow design using n8n.",
    "workflow": {
      "name": "Construction Site Safety",
      "nodes": [
        {
          "id": "1",
          "name": "Main Entry Trigger",
          "type": "n8n-nodes-base.webhook",
          "typeVersion": 1,
          "position": [
            100,
            100
          ],
          "parameters": {
            "path": "construction-safety",
            "responseMode": "lastNode",
            "options": {}
          }
        },
        {
          "id": "2",
          "name": "Validate Input Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            100
          ],
          "parameters": {
            "functionCode": "// Get the input data\nconst inputData = items[0].json;\n\n// Define validation rules\nconst requiredFields = ['dataType', 'timestamp'];\nlet isValid = true;\nlet validationErrors = [];\n\n// Check for required fields\nfor (const field of requiredFields) {\n  if (!inputData[field]) {\n    isValid = false;\n    validationErrors.push(`Missing required field: ${field}`);\n  }\n}\n\n// Validate data type\nconst validDataTypes = ['safety', 'worker', 'progress', 'material', 'emergency'];\nif (inputData.dataType && !validDataTypes.includes(inputData.dataType)) {\n  isValid = false;\n  validationErrors.push(`Invalid data type: ${inputData.dataType}. Must be one of: ${validDataTypes.join(', ')}`);\n}\n\n// Add validation result to the data\ninputData.isValid = isValid;\ninputData.validationErrors = validationErrors;\n\nreturn [{ json: inputData }];"
          }
        },
        {
          "id": "3",
          "name": "Is Data Valid?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            500,
            100
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{$json[\"isValid\"]}}",
                  "operation": "equal",
                  "value2": true
                }
              ]
            }
          }
        },
        {
          "id": "4",
          "name": "Prepare Error Response",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            700,
            100
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": [
              {
                "name": "success",
                "value": "false",
                "type": "boolean"
              },
              {
                "name": "message",
                "value": "=Validation failed: {{$json[\"validationErrors\"].join(\", \")}}",
                "type": "string"
              },
              {
                "name": "timestamp",
                "value": "={{Date.now()}}",
                "type": "number"
              }
            ]
          }
        },
        {
          "id": "5",
          "name": "Route By Data Type",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            900,
            100
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{$json[\"dataType\"]}}",
            "rules": [
              {
                "value2": "safety",
                "output": 0
              },
              {
                "value2": "worker",
                "output": 1
              },
              {
                "value2": "progress",
                "output": 2
              },
              {
                "value2": "material",
                "output": 3
              },
              {
                "value2": "emergency",
                "output": 4
              }
            ],
            "fallbackOutput": 5
          }
        },
        {
          "id": "6",
          "name": "Process Safety Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            100
          ],
          "parameters": {
            "functionCode": "// Process safety monitoring data\nconst data = items[0].json;\n\n// Check for safety issues\nlet hasSafetyIssue = false;\nlet safetyAlerts = [];\n\n// Process helmet detection data\nif (data.helmetDetection) {\n  if (data.helmetDetection.violationsDetected > 0) {\n    hasSafetyIssue = true;\n    safetyAlerts.push({\n      type: 'PPE_VIOLATION',\n      message: `${data.helmetDetection.violationsDetected} workers detected without proper helmets`,\n      location: data.location || 'Unknown',\n      timestamp: data.timestamp\n    });\n  }\n}\n\n// Process wind sensor data\nif (data.windSpeed && data.windSpeed > 25) {\n  hasSafetyIssue = true;\n  safetyAlerts.push({\n    type: 'HIGH_WIND',\n    message: `High wind speed detected: ${data.windSpeed} mph`,\n    location: data.location || 'Unknown',\n    timestamp: data.timestamp,\n    recommendation: 'Consider pausing crane operations'\n  });\n}\n\n// Add processing results\ndata.processed = true;\ndata.processingType = 'safety';\ndata.hasSafetyIssue = hasSafetyIssue;\ndata.safetyAlerts = safetyAlerts;\ndata.processingTimestamp = Date.now();\n\nreturn [{ json: data }];"
          }
        },
        {
          "id": "7",
          "name": "Process Worker Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            100
          ],
          "parameters": {
            "functionCode": "// Process worker management data\nconst data = items[0].json;\n\n// Check for worker-related issues\nlet hasWorkerIssue = false;\nlet workerAlerts = [];\n\n// Process entry/exit logs\nif (data.entryExit) {\n  // Calculate time on site\n  if (data.entryExit.type === 'exit' && data.entryExit.entryTime) {\n    const entryTime = new Date(data.entryExit.entryTime).getTime();\n    const exitTime = new Date(data.timestamp).getTime();\n    const hoursOnSite = (exitTime - entryTime) / (1000 * 60 * 60);\n    \n    // Check for excessive hours\n    if (hoursOnSite > 12) {\n      hasWorkerIssue = true;\n      workerAlerts.push({\n        type: 'EXCESSIVE_HOURS',\n        message: `Worker ${data.entryExit.workerId} has been on site for ${hoursOnSite.toFixed(1)} hours`,\n        timestamp: data.timestamp,\n        recommendation: 'Review for compliance with labor regulations'\n      });\n    }\n    \n    // Add time calculation to data\n    data.entryExit.hoursOnSite = hoursOnSite;\n  }\n}\n\n// Add processing results\ndata.processed = true;\ndata.processingType = 'worker';\ndata.hasWorkerIssue = hasWorkerIssue;\ndata.workerAlerts = workerAlerts;\ndata.processingTimestamp = Date.now();\n\nreturn [{ json: data }];"
          }
        },
        {
          "id": "8",
          "name": "Merge All Results",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            1500,
            100
          ],
          "parameters": {
            "mode": "passThrough",
            "joinMode": "keepKeyMatches",
            "outputDataFrom": "input1"
          }
        },
        {
          "id": "9",
          "name": "Check For Critical Issues",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            100,
            250
          ],
          "parameters": {
            "conditions": {
              "or": [
                {
                  "boolean": [
                    {
                      "value1": "={{$json[\"hasSafetyIssue\"]}}",
                      "operation": "equal",
                      "value2": true
                    }
                  ]
                },
                {
                  "boolean": [
                    {
                      "value1": "={{$json[\"hasWorkerIssue\"]}}",
                      "operation": "equal",
                      "value2": true
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "10",
          "name": "Format Response",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            300,
            250
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": [
              {
                "name": "success",
                "value": "true",
                "type": "boolean"
              },
              {
                "name": "message",
                "value": "=Data processed successfully",
                "type": "string"
              },
              {
                "name": "dataType",
                "value": "={{$json[\"dataType\"]}}",
                "type": "string"
              },
              {
                "name": "processed",
                "value": "={{$json[\"processed\"]}}",
                "type": "boolean"
              },
              {
                "name": "alerts",
                "value": "={{$json[\"safetyAlerts\"] || $json[\"workerAlerts\"] || []}}",
                "type": "json"
              },
              {
                "name": "hasCriticalIssues",
                "value": "={{$json[\"hasSafetyIssue\"] || $json[\"hasWorkerIssue\"] || false}}",
                "type": "boolean"
              },
              {
                "name": "timestamp",
                "value": "={{Date.now()}}",
                "type": "number"
              }
            ]
          }
        },
        {
          "id": "11",
          "name": "Main Entry Webhook",
          "type": "n8n-nodes-base.webhook",
          "typeVersion": 1,
          "position": [
            500,
            250
          ],
          "parameters": {
            "path": "construction-site-monitoring",
            "responseMode": "lastNode",
            "options": {}
          }
        },
        {
          "id": "12",
          "name": "Route By Input Type",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            700,
            250
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{ $json.dataType }}",
            "rules": {
              "rules": [
                {
                  "value2": "safety",
                  "output": 0
                },
                {
                  "value2": "progress",
                  "output": 1
                },
                {
                  "value2": "worker",
                  "output": 2
                },
                {
                  "value2": "material",
                  "output": 3
                }
              ]
            },
            "fallbackOutput": 4
          }
        },
        {
          "id": "13",
          "name": "Process Safety Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            250
          ],
          "parameters": {
            "functionCode": "// Process helmet and seat belt monitoring data\nconst data = $input.item.json;\nlet result = data;\n\nif (data.sensorType === 'camera') {\n  // Process image data for PPE compliance\n  result.compliant = data.detection && data.detection.helmet && data.detection.vestWorn;\n  result.timestamp = new Date().toISOString();\n  result.processedBy = 'safety-monitoring-system';\n}\n\nif (data.sensorType === 'wind') {\n  // Process wind sensor data\n  result.dangerLevel = data.windSpeed > 30 ? 'high' : 'normal';\n  result.shutdownRequired = data.windSpeed > 30;\n  result.timestamp = new Date().toISOString();\n}\n\nreturn [{json: result}];"
          }
        },
        {
          "id": "14",
          "name": "Process Progress Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            250
          ],
          "parameters": {
            "functionCode": "// Process construction progress data\nconst data = $input.item.json;\nlet result = data;\n\nif (data.source === 'drone') {\n  // Process drone photography data\n  result.processedImages = true;\n  result.progressEstimate = data.progressEstimate || 0;\n  result.timestamp = new Date().toISOString();\n}\n\nif (data.source === 'vibration') {\n  // Process vibration sensor data\n  result.vibrationLevel = data.reading;\n  result.isNormal = data.reading < data.threshold;\n  result.timestamp = new Date().toISOString();\n}\n\nreturn [{json: result}];"
          }
        },
        {
          "id": "15",
          "name": "Process Worker Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            250
          ],
          "parameters": {
            "functionCode": "// Process worker entry/exit and timekeeping\nconst data = $input.item.json;\nlet result = data;\n\nresult.processedAt = new Date().toISOString();\n\nif (data.action === 'entry') {\n  result.status = 'on-site';\n  result.entryTime = data.timestamp;\n}\n\nif (data.action === 'exit') {\n  result.status = 'off-site';\n  result.exitTime = data.timestamp;\n  \n  // Calculate hours if we have entry time\n  if (data.entryTime) {\n    const entry = new Date(data.entryTime);\n    const exit = new Date(data.timestamp);\n    const hours = (exit - entry) / (1000 * 60 * 60);\n    result.hoursWorked = hours.toFixed(2);\n  }\n}\n\nreturn [{json: result}];"
          }
        },
        {
          "id": "16",
          "name": "Process Material Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            250
          ],
          "parameters": {
            "functionCode": "// Process material inventory and JIT ordering\nconst data = $input.item.json;\nlet result = data;\n\nresult.processedAt = new Date().toISOString();\n\n// Check if stock level is below threshold\nif (data.currentStock < data.minThreshold) {\n  result.orderNeeded = true;\n  result.orderQuantity = data.optimalStock - data.currentStock;\n  result.priority = data.currentStock === 0 ? 'critical' : 'normal';\n} else {\n  result.orderNeeded = false;\n}\n\nreturn [{json: result}];"
          }
        },
        {
          "id": "17",
          "name": "Handle Unknown Input",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            400
          ],
          "parameters": {
            "functionCode": "// Handle unknown data type\nconst data = $input.item.json;\n\nreturn [{\n  json: {\n    originalData: data,\n    error: 'Unknown data type',\n    message: 'Could not route the input to appropriate processor',\n    timestamp: new Date().toISOString()\n  }\n}];"
          }
        },
        {
          "id": "18",
          "name": "Merge All Results",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            300,
            400
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "19",
          "name": "Format Response",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            400
          ],
          "parameters": {
            "functionCode": "// Format the final response\nconst data = $input.item.json;\n\nreturn [{\n  json: {\n    success: true,\n    data: data,\n    processedAt: new Date().toISOString(),\n    source: 'construction-site-monitoring-system'\n  }\n}];"
          }
        },
        {
          "id": "20",
          "name": "Error Handler",
          "type": "n8n-nodes-base.errorTrigger",
          "typeVersion": 1,
          "position": [
            700,
            400
          ],
          "parameters": {}
        },
        {
          "id": "21",
          "name": "Prepare Data for Validation",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            400
          ],
          "parameters": {
            "functionCode": "// Normalize data structure for validation\nconst inputData = items[0].json;\n\n// Ensure we have a standardized structure for validation\nconst dataToValidate = {\n  inputType: inputData.inputType || '',\n  sensorData: inputData.sensorData || {},\n  timestamp: inputData.timestamp || new Date().toISOString(),\n  sourceId: inputData.sourceId || '',\n  metadata: inputData.metadata || {}\n};\n\nreturn [{json: dataToValidate}];"
          }
        },
        {
          "id": "22",
          "name": "Schema Validation",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            400
          ],
          "parameters": {
            "functionCode": "// Validate schema structure\nconst data = items[0].json;\nlet errors = [];\n\n// Required fields check\nif (!data.inputType) errors.push('Missing required field: inputType');\nif (!data.sourceId) errors.push('Missing required field: sourceId');\n\n// Specific schema validation based on input type\nif (data.inputType === 'camera') {\n  if (!data.sensorData.imageUrl) errors.push('Camera data requires imageUrl');\n} else if (data.inputType === 'wind') {\n  if (data.sensorData.speed === undefined) errors.push('Wind data requires speed value');\n} else if (data.inputType === 'vibration') {\n  if (data.sensorData.magnitude === undefined) errors.push('Vibration data requires magnitude value');\n}\n\nreturn [{\n  json: {\n    ...data,\n    schemaValidation: {\n      valid: errors.length === 0,\n      errors: errors\n    }\n  }\n}];"
          }
        },
        {
          "id": "23",
          "name": "Type Checking",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            400
          ],
          "parameters": {
            "functionCode": "// Validate data types\nconst data = items[0].json;\nlet errors = data.schemaValidation.errors || [];\n\n// Type checking for common fields\nif (typeof data.inputType !== 'string') errors.push('inputType must be a string');\nif (typeof data.sourceId !== 'string') errors.push('sourceId must be a string');\n\n// Type checking based on input type\nif (data.inputType === 'camera') {\n  if (data.sensorData.imageUrl && typeof data.sensorData.imageUrl !== 'string') {\n    errors.push('imageUrl must be a string');\n  }\n} else if (data.inputType === 'wind') {\n  if (data.sensorData.speed !== undefined && typeof data.sensorData.speed !== 'number') {\n    errors.push('wind speed must be a number');\n  }\n} else if (data.inputType === 'vibration') {\n  if (data.sensorData.magnitude !== undefined && typeof data.sensorData.magnitude !== 'number') {\n    errors.push('vibration magnitude must be a number');\n  }\n}\n\nreturn [{\n  json: {\n    ...data,\n    typeValidation: {\n      valid: errors.length === data.schemaValidation.errors.length, // No new errors\n      errors: errors\n    }\n  }\n}];"
          }
        },
        {
          "id": "24",
          "name": "Business Rule Validation",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            400
          ],
          "parameters": {
            "functionCode": "// Validate business rules\nconst data = items[0].json;\nlet errors = data.typeValidation.errors || [];\n\n// Timestamp validation - must not be in the future\nconst now = new Date();\nconst timestamp = new Date(data.timestamp);\nif (timestamp > now) errors.push('Timestamp cannot be in the future');\n\n// Business rules by input type\nif (data.inputType === 'wind' && data.sensorData.speed !== undefined) {\n  // Wind speed must be within realistic range (0-200 km/h)\n  if (data.sensorData.speed < 0 || data.sensorData.speed > 200) {\n    errors.push('Wind speed must be between 0 and 200 km/h');\n  }\n  \n  // Critical safety check - high wind warning\n  if (data.sensorData.speed > 70) {\n    data.criticalSafety = true;\n    data.alertType = 'HIGH_WIND';\n  }\n} else if (data.inputType === 'vibration' && data.sensorData.magnitude !== undefined) {\n  // Vibration magnitude must be within realistic range (0-10 on Richter scale)\n  if (data.sensorData.magnitude < 0 || data.sensorData.magnitude > 10) {\n    errors.push('Vibration magnitude must be between 0 and 10');\n  }\n  \n  // Critical safety check - high vibration warning\n  if (data.sensorData.magnitude > 5) {\n    data.criticalSafety = true;\n    data.alertType = 'HIGH_VIBRATION';\n  }\n}\n\nreturn [{\n  json: {\n    ...data,\n    businessValidation: {\n      valid: errors.length === data.typeValidation.errors.length, // No new errors\n      errors: errors\n    }\n  }\n}];"
          }
        },
        {
          "id": "25",
          "name": "Sanitize Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            550
          ],
          "parameters": {
            "functionCode": "// Sanitize and normalize data\nconst data = items[0].json;\n\n// Clean up input type - lowercase and trim\ndata.inputType = (data.inputType || '').toLowerCase().trim();\n\n// Sanitize sourceId - remove special characters\ndata.sourceId = (data.sourceId || '').replace(/[^a-zA-Z0-9-_]/g, '');\n\n// Round numeric values to appropriate precision\nif (data.inputType === 'wind' && data.sensorData.speed !== undefined) {\n  data.sensorData.speed = Math.round(data.sensorData.speed * 10) / 10; // Round to 1 decimal place\n} else if (data.inputType === 'vibration' && data.sensorData.magnitude !== undefined) {\n  data.sensorData.magnitude = Math.round(data.sensorData.magnitude * 100) / 100; // Round to 2 decimal places\n}\n\n// Remove any sensitive information from metadata\nif (data.metadata) {\n  delete data.metadata.password;\n  delete data.metadata.secret;\n  delete data.metadata.token;\n  delete data.metadata.apiKey;\n}\n\n// Add processing timestamp\ndata.processedAt = new Date().toISOString();\n\nreturn [{json: data}];"
          }
        },
        {
          "id": "26",
          "name": "Validation Decision",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            300,
            550
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ !!$json.schemaValidation && !!$json.typeValidation && !!$json.businessValidation && $json.schemaValidation.valid && $json.typeValidation.valid && $json.businessValidation.valid }}",
                  "value2": "true"
                }
              ]
            }
          }
        },
        {
          "id": "27",
          "name": "Format Validation Errors",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            550
          ],
          "parameters": {
            "functionCode": "// Combine all validation errors into a structured format\nconst data = items[0].json;\n\n// Gather all errors\nconst allErrors = [\n  ...(data.schemaValidation?.errors || []),\n  ...(data.typeValidation?.errors || []),\n  ...(data.businessValidation?.errors || [])\n];\n\n// Create error response\nconst errorResponse = {\n  valid: false,\n  errors: allErrors,\n  errorCount: allErrors.length,\n  originalData: {\n    inputType: data.inputType,\n    sourceId: data.sourceId,\n    timestamp: data.timestamp\n  },\n  validationTimestamp: new Date().toISOString()\n};\n\nreturn [{json: errorResponse}];"
          }
        },
        {
          "id": "28",
          "name": "Prepare For Next Section",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            550
          ],
          "parameters": {
            "functionCode": "// Prepare validated data for the next workflow section\nconst data = items[0].json;\n\n// Remove validation metadata to clean up the payload\nconst cleanData = {...data};\ndelete cleanData.schemaValidation;\ndelete cleanData.typeValidation;\ndelete cleanData.businessValidation;\n\n// Add validation summary\ncleanData.validationSummary = {\n  valid: true,\n  validatedAt: new Date().toISOString()\n};\n\n// Enhance data with additional context\ncleanData.readyForProcessing = true;\n\nreturn [{json: cleanData}];"
          }
        },
        {
          "id": "29",
          "name": "Data Processing Entry Point",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            550
          ],
          "parameters": {
            "functionCode": "// Initialize processing metadata\nconst data = $input.item.json;\nconst metadata = {\n  processingStartTime: new Date().toISOString(),\n  sourceType: data.sourceType || 'unknown',\n  batchId: data.batchId || `batch-${Date.now()}`\n};\n\n// Return the data with processing metadata\nreturn [{json: {...data, processingMetadata: metadata}}];"
          }
        },
        {
          "id": "30",
          "name": "Route By Data Type",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            1100,
            550
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{$json.dataType}}",
            "rules": {
              "rules": [
                {
                  "value2": "safety",
                  "output": 0
                },
                {
                  "value2": "progress",
                  "output": 1
                },
                {
                  "value2": "inventory",
                  "output": 2
                },
                {
                  "value2": "weather",
                  "output": 3
                }
              ]
            },
            "fallbackOutput": 4
          }
        },
        {
          "id": "31",
          "name": "Transform Safety Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            550
          ],
          "parameters": {
            "functionCode": "const data = $input.item.json;\n\n// Transform safety data\nconst transformed = {\n  ...data,\n  safetyScore: data.safetyRating ? Math.round(data.safetyRating * 10) / 10 : 0,\n  complianceStatus: data.safetyRating > 8 ? 'compliant' : 'needs-review',\n  transformedAt: new Date().toISOString(),\n  dataCategory: 'safety'\n};\n\nreturn [{json: transformed}];"
          }
        },
        {
          "id": "32",
          "name": "Transform Progress Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            550
          ],
          "parameters": {
            "functionCode": "const data = $input.item.json;\n\n// Transform progress data\nconst transformed = {\n  ...data,\n  completionPercentage: data.progressValue ? Math.min(100, Math.max(0, data.progressValue)) : 0,\n  estimatedCompletion: data.progressValue >= 100 ? 'complete' : 'in-progress',\n  transformedAt: new Date().toISOString(),\n  dataCategory: 'progress'\n};\n\nreturn [{json: transformed}];"
          }
        },
        {
          "id": "33",
          "name": "Transform Inventory Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            700
          ],
          "parameters": {
            "functionCode": "const data = $input.item.json;\n\n// Transform inventory data\nconst transformed = {\n  ...data,\n  stockLevel: data.currentStock || 0,\n  needsReorder: (data.currentStock < data.minThreshold) ? true : false,\n  daysUntilDepletion: data.currentStock && data.dailyUsage ? Math.floor(data.currentStock / data.dailyUsage) : null,\n  transformedAt: new Date().toISOString(),\n  dataCategory: 'inventory'\n};\n\nreturn [{json: transformed}];"
          }
        },
        {
          "id": "34",
          "name": "Transform Weather Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            700
          ],
          "parameters": {
            "functionCode": "const data = $input.item.json;\n\n// Transform weather data\nconst transformed = {\n  ...data,\n  windCategory: data.windSpeed > 25 ? 'high' : data.windSpeed > 10 ? 'moderate' : 'low',\n  constructionSuitability: data.precipitation > 10 ? 'unsuitable' : data.windSpeed > 25 ? 'dangerous' : 'suitable',\n  transformedAt: new Date().toISOString(),\n  dataCategory: 'weather'\n};\n\nreturn [{json: transformed}];"
          }
        },
        {
          "id": "35",
          "name": "Transform Unknown Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            700
          ],
          "parameters": {
            "functionCode": "const data = $input.item.json;\n\n// Transform unknown data\nconst transformed = {\n  ...data,\n  transformedAt: new Date().toISOString(),\n  dataCategory: 'unknown',\n  processingNote: 'Data type not recognized, basic processing applied'\n};\n\nreturn [{json: transformed}];"
          }
        },
        {
          "id": "36",
          "name": "Merge Transformed Data",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            700,
            700
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "37",
          "name": "Enrich With Processing Metadata",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            700
          ],
          "parameters": {
            "functionCode": "const data = $input.item.json;\n\n// Add processing metadata\nconst enriched = {\n  ...data,\n  processingMetadata: {\n    ...data.processingMetadata,\n    transformationComplete: true,\n    transformationTimestamp: new Date().toISOString(),\n    processingStage: 'enrichment'\n  }\n};\n\nreturn [{json: enriched}];"
          }
        },
        {
          "id": "38",
          "name": "Split Into Batches",
          "type": "n8n-nodes-base.splitInBatches",
          "typeVersion": 1,
          "position": [
            1100,
            700
          ],
          "parameters": {
            "batchSize": 10
          }
        },
        {
          "id": "39",
          "name": "Is Inventory Batch?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1300,
            700
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{$json.dataCategory}}",
                  "operation": "equal",
                  "value2": "inventory"
                }
              ]
            }
          }
        },
        {
          "id": "40",
          "name": "Process Inventory Batch",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            700
          ],
          "parameters": {
            "functionCode": "const data = $input.item.json;\n\n// Special processing for inventory batches\nconst processed = {\n  ...data,\n  orderRecommendation: data.needsReorder ? {\n    materialId: data.materialId,\n    suggestedOrderQuantity: Math.max(data.minThreshold * 2 - data.currentStock, 0),\n    priority: data.daysUntilDepletion < 3 ? 'high' : 'normal'\n  } : null,\n  processingMetadata: {\n    ...data.processingMetadata,\n    batchProcessed: true,\n    processingType: 'inventory'\n  }\n};\n\nreturn [{json: processed}];"
          }
        },
        {
          "id": "41",
          "name": "Process Other Batches",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            850
          ],
          "parameters": {
            "functionCode": "const data = $input.item.json;\n\n// Standard processing for non-inventory batches\nconst processed = {\n  ...data,\n  batchProcessed: true,\n  processingTimestamp: new Date().toISOString(),\n  processingMetadata: {\n    ...data.processingMetadata,\n    batchProcessed: true,\n    processingType: data.dataCategory\n  }\n};\n\nreturn [{json: processed}];"
          }
        },
        {
          "id": "42",
          "name": "Merge Batch Results",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            300,
            850
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "43",
          "name": "Is Last Batch?",
          "type": "n8n-nodes-base.splitInBatches",
          "typeVersion": 1,
          "position": [
            500,
            850
          ],
          "parameters": {
            "batchSize": 10
          }
        },
        {
          "id": "44",
          "name": "Continue Batch Processing",
          "type": "n8n-nodes-base.noOp",
          "typeVersion": 1,
          "position": [
            700,
            850
          ],
          "parameters": {}
        },
        {
          "id": "45",
          "name": "Aggregate Batch Results",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            850
          ],
          "parameters": {
            "functionCode": "// Get all batches from the input\nconst items = $input.all();\n\n// Initialize aggregation variables\nlet safetyIssues = 0;\nlet progressTotal = 0;\nlet progressCount = 0;\nlet inventoryAlerts = 0;\nlet weatherWarnings = 0;\n\n// Process all items\nitems.forEach(item => {\n  const data = item.json;\n  \n  // Aggregate by data category\n  if (data.dataCategory === 'safety' && data.complianceStatus === 'needs-review') {\n    safetyIssues++;\n  }\n  \n  if (data.dataCategory === 'progress') {\n    progressTotal += data.completionPercentage || 0;\n    progressCount++;\n  }\n  \n  if (data.dataCategory === 'inventory' && data.needsReorder) {\n    inventoryAlerts++;\n  }\n  \n  if (data.dataCategory === 'weather' && data.constructionSuitability !== 'suitable') {\n    weatherWarnings++;\n  }\n});\n\n// Create aggregation result\nconst aggregated = {\n  aggregationTimestamp: new Date().toISOString(),\n  metrics: {\n    safetyIssuesCount: safetyIssues,\n    averageProgress: progressCount > 0 ? progressTotal / progressCount : 0,\n    inventoryAlertsCount: inventoryAlerts,\n    weatherWarningsCount: weatherWarnings,\n    totalItemsProcessed: items.length\n  },\n  processingMetadata: {\n    batchProcessingComplete: true,\n    processingStage: 'aggregation'\n  },\n  originalItems: items.map(item => item.json)\n};\n\nreturn [{json: aggregated}];"
          }
        },
        {
          "id": "46",
          "name": "Has Critical Issues?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1100,
            850
          ],
          "parameters": {
            "conditions": {
              "number": [
                {
                  "value1": "={{$json.metrics.safetyIssuesCount}}",
                  "operation": "larger",
                  "value2": 3
                }
              ],
              "boolean": [
                {
                  "value1": "={{$json.metrics.weatherWarningsCount > 0}}",
                  "operation": "equal",
                  "value2": true
                }
              ],
              "string": [],
              "dateTime": []
            },
            "combineOperation": "any"
          }
        },
        {
          "id": "47",
          "name": "Generate Critical Issues Summary",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            850
          ],
          "parameters": {
            "functionCode": "const data = $input.item.json;\n\n// Create critical issues summary\nconst critical = {\n  ...data,\n  summary: {\n    title: 'CRITICAL ISSUES DETECTED',\n    description: `Found ${data.metrics.safetyIssuesCount} safety issues and ${data.metrics.weatherWarningsCount} weather warnings that require immediate attention.`,\n    priority: 'high',\n    recommendedActions: [\n      'Review all safety compliance failures',\n      'Check weather conditions for construction suitability',\n      'Verify inventory levels for critical materials'\n    ]\n  },\n  alertRequired: true\n};\n\nreturn [{json: critical}];"
          }
        },
        {
          "id": "48",
          "name": "Generate Standard Summary",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            850
          ],
          "parameters": {
            "functionCode": "const data = $input.item.json;\n\n// Create standard summary\nconst standard = {\n  ...data,\n  summary: {\n    title: 'Processing Complete',\n    description: `Processed ${data.metrics.totalItemsProcessed} items with ${data.metrics.inventoryAlertsCount} inventory alerts.`,\n    priority: 'normal',\n    recommendedActions: data.metrics.inventoryAlertsCount > 0 ? ['Review inventory levels'] : []\n  },\n  alertRequired: false\n};\n\nreturn [{json: standard}];"
          }
        },
        {
          "id": "49",
          "name": "Merge Summaries",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            100,
            1000
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "50",
          "name": "Fetch Weather Forecast",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            300,
            1000
          ],
          "parameters": {
            "url": "=https://api.example.com/weather?location={{$json.siteLocation || 'default'}}",
            "method": "GET",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "options": {
              "timeout": 5000
            }
          }
        },
        {
          "id": "51",
          "name": "Fetch Supplier Inventory",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            500,
            1000
          ],
          "parameters": {
            "url": "https://api.example.com/suppliers/inventory",
            "method": "GET",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "options": {
              "timeout": 5000
            }
          }
        },
        {
          "id": "52",
          "name": "Enrich With External Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            1000
          ],
          "parameters": {
            "functionCode": "const data = $input.item.json;\n\n// Extract data from HTTP responses\nlet weatherData = {};\nlet supplierData = {};\n\ntry {\n  if ($node['Fetch Weather Forecast'].json && $node['Fetch Weather Forecast'].json.forecast) {\n    weatherData = $node['Fetch Weather Forecast'].json;\n  }\n} catch (error) {\n  weatherData = { error: 'Failed to fetch weather data' };\n}\n\ntry {\n  if ($node['Fetch Supplier Inventory'].json && $node['Fetch Supplier Inventory'].json.inventory) {\n    supplierData = $node['Fetch Supplier Inventory'].json;\n  }\n} catch (error) {\n  supplierData = { error: 'Failed to fetch supplier data' };\n}\n\n// Enrich the data\nconst enriched = {\n  ...data,\n  externalData: {\n    weather: weatherData,\n    supplierInventory: supplierData\n  },\n  processingMetadata: {\n    ...data.processingMetadata,\n    enrichmentComplete: true,\n    externalDataFetched: new Date().toISOString()\n  }\n};\n\nreturn [{json: enriched}];"
          }
        },
        {
          "id": "53",
          "name": "Any Alerts To Process?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            900,
            1000
          ],
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{$json.alertRequired}}",
                  "operation": "equal",
                  "value2": true
                }
              ]
            }
          }
        },
        {
          "id": "54",
          "name": "Format Alerts For Notification",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            1000
          ],
          "parameters": {
            "functionCode": "const data = $input.item.json;\n\n// Format alerts for notification systems\nconst alerts = {\n  ...data,\n  notifications: {\n    email: {\n      subject: `ALERT: ${data.summary.title}`,\n      body: `${data.summary.description}\\n\\nRecommended Actions:\\n${data.summary.recommendedActions.join('\\n')}`,\n      recipients: ['site-manager@example.com', 'safety-team@example.com']\n    },\n    sms: {\n      message: `CONSTRUCTION SITE ALERT: ${data.summary.title} - ${data.summary.description.substring(0, 100)}...`,\n      recipients: ['+15551234567']\n    }\n  },\n  processingMetadata: {\n    ...data.processingMetadata,\n    alertsFormatted: true\n  }\n};\n\nreturn [{json: alerts}];"
          }
        },
        {
          "id": "55",
          "name": "Data Processing Output",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            1300,
            1000
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "56",
          "name": "Start External Integrations",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            1000
          ],
          "parameters": {
            "functionCode": "// Initialize external integration process\nconst data = $input.item.json;\nreturn [{json: {\n  ...data,\n  integration_started: true,\n  timestamp: new Date().toISOString()\n}}];"
          }
        },
        {
          "id": "57",
          "name": "Route External Integration",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            100,
            1150
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{$json.integration_type}}",
            "rules": [
              {
                "value2": "weather",
                "output": 0
              },
              {
                "value2": "supplier",
                "output": 1
              },
              {
                "value2": "vibration",
                "output": 2
              }
            ],
            "fallbackOutput": 3
          }
        },
        {
          "id": "58",
          "name": "Weather API Authentication",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            300,
            1150
          ],
          "parameters": {
            "url": "https://weather-api.example.com/auth",
            "method": "POST",
            "authentication": "basicAuth",
            "username": "={{$env.WEATHER_API_KEY}}",
            "password": "={{$env.WEATHER_API_SECRET}}",
            "options": {
              "timeout": 5000
            }
          }
        },
        {
          "id": "59",
          "name": "Fetch Weather Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            500,
            1150
          ],
          "parameters": {
            "url": "https://weather-api.example.com/forecast",
            "method": "GET",
            "authentication": "headerAuth",
            "headerAuthKey": "Authorization",
            "headerAuthValue": "Bearer {{$json.access_token}}",
            "options": {
              "timeout": 10000
            }
          }
        },
        {
          "id": "60",
          "name": "Validate Weather Response",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            700,
            1150
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{$json.hasOwnProperty('error')}}",
                  "operation": "equal",
                  "value2": "true"
                }
              ]
            }
          }
        },
        {
          "id": "61",
          "name": "Wait Before Weather Retry",
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1,
          "position": [
            900,
            1150
          ],
          "parameters": {
            "amount": 1,
            "unit": "minutes"
          }
        },
        {
          "id": "62",
          "name": "Map Weather Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            1150
          ],
          "parameters": {
            "functionCode": "// Transform and clean weather data\nconst data = $input.item.json;\nreturn [{json: {\n  source: 'weather_api',\n  location: data.location,\n  forecast: data.forecast.map(f => ({\n    date: f.date,\n    temperature: f.temp_c,\n    wind_speed: f.wind_kph,\n    conditions: f.condition.text,\n    is_safe_for_crane: f.wind_kph < 40\n  })),\n  site_safety_status: data.forecast[0].wind_kph < 40 ? 'safe' : 'unsafe',\n  processed_at: new Date().toISOString()\n}}];"
          }
        },
        {
          "id": "63",
          "name": "Supplier API Authentication",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            1300,
            1150
          ],
          "parameters": {
            "url": "https://supplier-api.example.com/login",
            "method": "POST",
            "jsonParameters": true,
            "bodyParametersJson": "={ \"username\": \"{{$env.SUPPLIER_USERNAME}}\", \"password\": \"{{$env.SUPPLIER_PASSWORD}}\" }",
            "options": {
              "timeout": 5000
            }
          }
        },
        {
          "id": "64",
          "name": "Fetch Supplier Inventory",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            1500,
            1150
          ],
          "parameters": {
            "url": "https://supplier-api.example.com/inventory",
            "method": "GET",
            "authentication": "headerAuth",
            "headerAuthKey": "X-API-Token",
            "headerAuthValue": "={{$json.token}}",
            "options": {
              "timeout": 10000
            }
          }
        },
        {
          "id": "65",
          "name": "Validate Supplier Response",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            100,
            1300
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{$json.status}}",
                  "operation": "notEqual",
                  "value2": "success"
                }
              ]
            }
          }
        },
        {
          "id": "66",
          "name": "Wait Before Supplier Retry",
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1,
          "position": [
            300,
            1300
          ],
          "parameters": {
            "amount": 1,
            "unit": "minutes"
          }
        },
        {
          "id": "67",
          "name": "Map Supplier Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            1300
          ],
          "parameters": {
            "functionCode": "// Transform supplier inventory data\nconst data = $input.item.json;\nreturn [{json: {\n  source: 'supplier_api',\n  materials: data.inventory.map(item => ({\n    id: item.sku,\n    name: item.name,\n    quantity_available: item.qty,\n    unit_price: item.price,\n    delivery_time_days: item.delivery_time,\n    needs_ordering: item.qty < item.reorder_level\n  })),\n  low_stock_items: data.inventory.filter(item => item.qty < item.reorder_level).length,\n  processed_at: new Date().toISOString()\n}}];"
          }
        },
        {
          "id": "68",
          "name": "Vibration API Authentication",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            700,
            1300
          ],
          "parameters": {
            "url": "https://vibration-api.example.com/auth",
            "method": "POST",
            "authentication": "basicAuth",
            "username": "={{$env.VIBRATION_API_KEY}}",
            "password": "={{$env.VIBRATION_API_SECRET}}",
            "options": {
              "timeout": 5000
            }
          }
        },
        {
          "id": "69",
          "name": "Fetch Vibration Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            900,
            1300
          ],
          "parameters": {
            "url": "https://vibration-api.example.com/sensors/data",
            "method": "GET",
            "authentication": "headerAuth",
            "headerAuthKey": "Authorization",
            "headerAuthValue": "Bearer {{$json.token}}",
            "options": {
              "timeout": 10000
            }
          }
        },
        {
          "id": "70",
          "name": "Validate Vibration Response",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1100,
            1300
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{$json.hasOwnProperty('error')}}",
                  "operation": "equal",
                  "value2": "true"
                }
              ]
            }
          }
        },
        {
          "id": "71",
          "name": "Wait Before Vibration Retry",
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1,
          "position": [
            1300,
            1300
          ],
          "parameters": {
            "amount": 1,
            "unit": "minutes"
          }
        },
        {
          "id": "72",
          "name": "Map Vibration Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            1300
          ],
          "parameters": {
            "functionCode": "// Transform vibration sensor data\nconst data = $input.item.json;\n\n// Calculate safety threshold violations\nconst thresholds = {\n  foundation: 2.5,  // mm/s\n  structure: 5.0,   // mm/s\n  equipment: 10.0   // mm/s\n};\n\nconst violations = data.sensors.filter(s => {\n  const threshold = thresholds[s.type] || 5.0;\n  return s.value > threshold;\n});\n\nreturn [{json: {\n  source: 'vibration_api',\n  timestamp: new Date().toISOString(),\n  sensors: data.sensors.map(s => ({\n    id: s.id,\n    location: s.location,\n    type: s.type,\n    value: s.value,\n    unit: 'mm/s',\n    exceeds_threshold: s.value > (thresholds[s.type] || 5.0),\n    last_reading: s.timestamp\n  })),\n  violations: violations.length,\n  requires_inspection: violations.length > 0,\n  highest_reading: Math.max(...data.sensors.map(s => s.value))\n}}];"
          }
        },
        {
          "id": "73",
          "name": "Combine External Data",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            100,
            1450
          ],
          "parameters": {
            "mode": "mergeByPosition"
          }
        },
        {
          "parameters": {
            "mode": "runOnceForEachItem",
            "jsCode": "// Classify the error based on type, source, and severity\nconst error = $input.item.json.error || {};\nconst errorTypes = {\n  API_ERROR: ['connection refused', 'timeout', 'rate limit', '429', '503', 'service unavailable'],\n  DATA_ERROR: ['invalid format', 'missing field', 'validation', 'schema', 'malformed'],\n  SECURITY_ERROR: ['unauthorized', 'forbidden', '401', '403', 'authentication'],\n  SYSTEM_ERROR: ['out of memory', 'disk space', 'internal server', '500']\n};\n\n// Determine error type\nlet errorType = 'UNKNOWN_ERROR';\nlet errorSource = error.source || 'unknown';\nlet errorMessage = error.message || 'Unknown error occurred';\nlet errorSeverity = 'medium';\n\n// Classify error type\nfor (const [type, keywords] of Object.entries(errorTypes)) {\n  if (keywords.some(keyword => errorMessage.toLowerCase().includes(keyword))) {\n    errorType = type;\n    break;\n  }\n}\n\n// Determine severity\nif (errorMessage.toLowerCase().includes('critical') || \n    errorType === 'SECURITY_ERROR' || \n    errorSource === 'safety_monitoring' ||\n    errorSource === 'emergency_protocol') {\n  errorSeverity = 'high';\n} else if (errorMessage.toLowerCase().includes('warning')) {\n  errorSeverity = 'low';\n}\n\nreturn [{\n  json: {\n    ...error,\n    errorType,\n    errorSource,\n    errorSeverity,\n    timestamp: new Date().toISOString(),\n    constructionSite: error.constructionSite || $input.item.json.constructionSite || 'unknown'\n  }\n}];"
          },
          "id": "74",
          "name": "Classify Error",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            1450
          ]
        },
        {
          "parameters": {
            "mode": "runOnceForEachItem",
            "jsCode": "// Determine recovery strategy based on error classification\nconst error = $input.item.json;\nlet recoveryStrategy = 'notify_only';\nlet retryAttempts = 0;\nlet retryDelay = 0;\nlet fallbackAction = null;\n\n// Set recovery strategy based on error type and severity\nswitch(error.errorType) {\n  case 'API_ERROR':\n    recoveryStrategy = 'retry';\n    retryAttempts = 3;\n    retryDelay = 5000; // 5 seconds\n    fallbackAction = 'use_cached_data';\n    break;\n  \n  case 'DATA_ERROR':\n    recoveryStrategy = 'validate_and_fix';\n    fallbackAction = 'use_default_values';\n    break;\n  \n  case 'SECURITY_ERROR':\n    recoveryStrategy = 'refresh_credentials';\n    retryAttempts = 1;\n    retryDelay = 2000; // 2 seconds\n    fallbackAction = 'escalate_to_admin';\n    break;\n  \n  case 'SYSTEM_ERROR':\n    recoveryStrategy = 'failover';\n    fallbackAction = 'use_backup_system';\n    break;\n  \n  default:\n    recoveryStrategy = 'notify_only';\n    fallbackAction = 'manual_intervention';\n}\n\n// Adjust strategy based on severity\nif (error.errorSeverity === 'high') {\n  // For high severity, prioritize safety and notification\n  if (error.errorSource === 'safety_monitoring' || error.errorSource === 'emergency_protocol') {\n    recoveryStrategy = 'emergency_protocol';\n    fallbackAction = 'activate_safety_measures';\n  }\n}\n\nreturn [{\n  json: {\n    ...error,\n    recoveryStrategy,\n    retryAttempts,\n    retryDelay,\n    fallbackAction,\n    recoveryInitiated: new Date().toISOString()\n  }\n}];"
          },
          "id": "75",
          "name": "Determine Recovery Strategy",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            1450
          ]
        },
        {
          "parameters": {
            "mode": "runOnceForEachItem",
            "jsCode": "// Execute fallback processing based on determined strategy\nconst error = $input.item.json;\nlet fallbackResult = {};\nlet fallbackSuccess = false;\nlet fallbackMessage = '';\n\n// Implement fallback actions based on the determined strategy\nswitch(error.fallbackAction) {\n  case 'use_cached_data':\n    // Simulate retrieving cached data\n    fallbackResult = {\n      data: { source: 'cache', timestamp: new Date(Date.now() - 3600000).toISOString() },\n      message: 'Using cached data from previous successful request'\n    };\n    fallbackSuccess = true;\n    fallbackMessage = 'Successfully retrieved cached data';\n    break;\n  \n  case 'use_default_values':\n    // Provide default values based on context\n    fallbackResult = {\n      data: { \n        source: 'defaults',\n        safetyStatus: 'unknown',\n        progressPercentage: null,\n        materialStock: 'unknown'\n      },\n      message: 'Using default values due to data error'\n    };\n    fallbackSuccess = true;\n    fallbackMessage = 'Applied default values to continue operation';\n    break;\n  \n  case 'activate_safety_measures':\n    // Simulate activating emergency safety protocols\n    fallbackResult = {\n      data: { \n        emergencyProtocol: 'activated',\n        alertLevel: 'high',\n        requiredAction: 'immediate_evacuation',\n        timestamp: new Date().toISOString()\n      },\n      message: 'CRITICAL: Safety measures activated due to system failure'\n    };\n    fallbackSuccess = true;\n    fallbackMessage = 'Emergency protocols activated successfully';\n    break;\n  \n  case 'use_backup_system':\n    // Simulate switching to backup system\n    fallbackResult = {\n      data: { \n        system: 'backup',\n        capabilities: 'limited',\n        expectedRecoveryTime: '2 hours'\n      },\n      message: 'Primary system failure - switched to backup systems'\n    };\n    fallbackSuccess = true;\n    fallbackMessage = 'Successfully switched to backup system';\n    break;\n  \n  default:\n    // Default fallback for unknown strategies\n    fallbackResult = {\n      data: null,\n      message: 'No automated recovery possible - manual intervention required'\n    };\n    fallbackSuccess = false;\n    fallbackMessage = 'Fallback failed, escalating to manual intervention';\n}\n\nreturn [{\n  json: {\n    ...error,\n    fallbackResult,\n    fallbackSuccess,\n    fallbackMessage,\n    fallbackTimestamp: new Date().toISOString(),\n    requiresFollowUp: !fallbackSuccess\n  }\n}];"
          },
          "id": "76",
          "name": "Execute Fallback Processing",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            1450
          ]
        },
        {
          "parameters": {
            "mode": "runOnceForEachItem",
            "jsCode": "// Log comprehensive error details for analysis and auditing\nconst error = $input.item.json;\n\n// Create detailed log entry\nconst logEntry = {\n  timestamp: new Date().toISOString(),\n  errorId: `ERR-${Date.now()}-${Math.floor(Math.random() * 1000)}`,\n  errorType: error.errorType,\n  errorSource: error.errorSource,\n  errorSeverity: error.errorSeverity,\n  originalError: {\n    message: error.message,\n    stack: error.stack,\n    code: error.code\n  },\n  recoveryStrategy: error.recoveryStrategy,\n  fallbackAction: error.fallbackAction,\n  fallbackSuccess: error.fallbackSuccess,\n  fallbackMessage: error.fallbackMessage,\n  constructionSite: error.constructionSite,\n  affectedSystems: [\n    error.errorSource,\n    error.errorSource === 'safety_monitoring' ? 'emergency_protocols' : null,\n    error.errorSource === 'tower_crane' ? 'heavy_equipment' : null\n  ].filter(Boolean),\n  contextData: {\n    workflow: 'Construction Site Safety and Progress Monitoring',\n    nodeId: error.nodeId || 'unknown',\n    inputData: error.inputData || 'not_available',\n    executionId: error.executionId || `EXEC-${Date.now()}`\n  }\n};\n\n// Simulate writing to log storage\nconsole.log('ERROR LOG:', JSON.stringify(logEntry, null, 2));\n\n// Return the error with log information\nreturn [{\n  json: {\n    ...error,\n    logEntry,\n    loggedAt: new Date().toISOString(),\n    logReference: logEntry.errorId\n  }\n}];"
          },
          "id": "77",
          "name": "Log Error Details",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            1450
          ]
        },
        {
          "parameters": {
            "operation": "send",
            "authentication": "genericCredentialType",
            "sendWith": "sendGrid",
            "subject": "=ALERT: {{$json[\"errorSeverity\"]}} Error in Construction Site Monitoring - {{$json[\"errorType\"]}}",
            "html": "=<h2>Construction Site Monitoring System Error</h2>\n<p><strong>Error occurred at:</strong> {{$json[\"timestamp\"]}}</p>\n<p><strong>Site:</strong> {{$json[\"constructionSite\"]}}</p>\n<p><strong>Error Type:</strong> {{$json[\"errorType\"]}}</p>\n<p><strong>Severity:</strong> {{$json[\"errorSeverity\"]}}</p>\n<p><strong>Source:</strong> {{$json[\"errorSource\"]}}</p>\n<p><strong>Message:</strong> {{$json[\"message\"]}}</p>\n\n<h3>Recovery Information</h3>\n<p><strong>Strategy Applied:</strong> {{$json[\"recoveryStrategy\"]}}</p>\n<p><strong>Fallback Action:</strong> {{$json[\"fallbackAction\"]}}</p>\n<p><strong>Fallback Success:</strong> {{$json[\"fallbackSuccess\"]}}</p>\n<p><strong>Fallback Message:</strong> {{$json[\"fallbackMessage\"]}}</p>\n\n<h3>Action Required</h3>\n<p>{{$json[\"fallbackSuccess\"] ? \"The system has recovered automatically, but please review the incident.\" : \"IMMEDIATE ACTION REQUIRED: The system could not recover automatically.\"}}</p>\n\n<p><strong>Log Reference:</strong> {{$json[\"logReference\"]}}</p>\n\n<p>Please check the monitoring dashboard for more details.</p>",
            "toEmail": "=site.admin@construction.example.com, safety.officer@construction.example.com{{$json[\"errorSeverity\"] === \"high\" ? \", emergency@construction.example.com\" : \"\"}}",
            "options": {}
          },
          "id": "78",
          "name": "Notify Administrators",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            1100,
            1450
          ],
          "credentials": {
            "smtp": {
              "id": "123",
              "name": "SMTP account"
            }
          }
        },
        {
          "id": "79",
          "name": "Collect Activity & Performance Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            1450
          ],
          "parameters": {
            "functionCode": "// Collect all activity data and performance metrics\nconst inputData = $input.all();\nconst timestamp = new Date().toISOString();\n\nconst activityData = {\n  timestamp,\n  executionId: $execution.id,\n  workflowId: $workflow.id,\n  inputSize: JSON.stringify(inputData).length,\n  processingTime: Date.now() - new Date(timestamp).getTime(),\n  nodeCount: Object.keys($nodes).length,\n  dataTypes: inputData.map(item => Object.keys(item.json)).flat(),\n  activityType: inputData[0]?.json?.activityType || 'standard',\n  source: inputData[0]?.json?.source || 'system'\n};\n\nreturn [{ json: activityData }];"
          }
        },
        {
          "id": "80",
          "name": "Check For Critical Events",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1500,
            1450
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.activityType }}",
                  "operation": "contains",
                  "value2": "critical"
                }
              ]
            }
          }
        },
        {
          "id": "81",
          "name": "Create Critical Audit Trail",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            1600
          ],
          "parameters": {
            "functionCode": "// Create detailed audit trail for critical events\nconst data = $input.item.json;\n\nconst criticalAuditTrail = {\n  ...data,\n  auditLevel: 'CRITICAL',\n  alertRequired: true,\n  retentionPeriod: '7 years',\n  securityLevel: 'high',\n  complianceFlags: ['safety-critical', 'regulatory-required'],\n  notificationTargets: ['site-manager', 'safety-officer', 'regulatory-compliance'],\n  detailedMetrics: {\n    responseTime: data.processingTime,\n    severity: 'high',\n    impact: 'potential-safety-hazard',\n    mitigationStatus: 'pending'\n  }\n};\n\nreturn [{ json: criticalAuditTrail }];"
          }
        },
        {
          "id": "82",
          "name": "Create Standard Audit Trail",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            1600
          ],
          "parameters": {
            "functionCode": "// Create standard audit trail for normal operations\nconst data = $input.item.json;\n\nconst standardAuditTrail = {\n  ...data,\n  auditLevel: 'STANDARD',\n  alertRequired: false,\n  retentionPeriod: '1 year',\n  securityLevel: 'normal',\n  complianceFlags: ['operational-record'],\n  notificationTargets: [],\n  metrics: {\n    responseTime: data.processingTime,\n    dataVolume: data.inputSize,\n    processingEfficiency: data.nodeCount > 0 ? data.processingTime / data.nodeCount : 0\n  }\n};\n\nreturn [{ json: standardAuditTrail }];"
          }
        },
        {
          "id": "83",
          "name": "Store Audit Trail & Metrics",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            500,
            1600
          ],
          "parameters": {
            "mode": "passThrough",
            "joinMode": "keepKeyMatches",
            "join": {
              "output": "mergeAllItems"
            },
            "property": {
              "value": "json"
            }
          }
        }
      ],
      "connections": {
        "Main Entry Trigger": {
          "main": [
            [
              {
                "node": "Validate Input Data",
                "type": "main",
                "index": 0
              },
              {
                "node": "Validate Input Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate Input Data": {
          "main": [
            [
              {
                "node": "Is Data Valid?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Data Valid?": {
          "main": [
            [
              {
                "node": "Prepare Error Response",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Prepare Error Response": {
          "main": [
            [
              {
                "node": "Route By Data Type",
                "type": "main",
                "index": 0
              },
              {
                "node": "Route By Data Type",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Route By Data Type": {
          "main": [
            [
              {
                "node": "Process Safety Data",
                "type": "main",
                "index": 0
              },
              {
                "node": "Process Safety Data",
                "type": "main",
                "index": 0
              },
              {
                "node": "Transform Safety Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Safety Data": {
          "main": [
            [
              {
                "node": "Process Worker Data",
                "type": "main",
                "index": 0
              },
              {
                "node": "Process Progress Data",
                "type": "main",
                "index": 0
              },
              {
                "node": "Process Worker Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Worker Data": {
          "main": [
            [
              {
                "node": "Merge All Results",
                "type": "main",
                "index": 0
              },
              {
                "node": "Process Material Data",
                "type": "main",
                "index": 0
              },
              {
                "node": "Merge All Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check For Critical Issues": {
          "main": [
            [
              {
                "node": "Format Response",
                "type": "main",
                "index": 0
              },
              {
                "node": "Format Response",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Main Entry Webhook": {
          "main": [
            [
              {
                "node": "Validate Input Data",
                "type": "main",
                "index": 0
              },
              {
                "node": "Route By Input Type",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Response": {
          "main": [
            [
              {
                "node": "Main Entry Webhook",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Error Handler": {
          "main": [
            [
              {
                "node": "Prepare Data for Validation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Prepare Data for Validation": {
          "main": [
            [
              {
                "node": "Schema Validation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Schema Validation": {
          "main": [
            [
              {
                "node": "Type Checking",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Type Checking": {
          "main": [
            [
              {
                "node": "Business Rule Validation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Sanitize Data": {
          "main": [
            [
              {
                "node": "Validation Decision",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validation Decision": {
          "main": [
            [
              {
                "node": "Format Validation Errors",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Validation Errors": {
          "main": [
            [
              {
                "node": "Prepare For Next Section",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Prepare For Next Section": {
          "main": [
            [
              {
                "node": "Data Processing Entry Point",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Transform Safety Data": {
          "main": [
            [
              {
                "node": "Transform Progress Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Transform Inventory Data": {
          "main": [
            [
              {
                "node": "Transform Weather Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Transform Weather Data": {
          "main": [
            [
              {
                "node": "Transform Unknown Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Transform Unknown Data": {
          "main": [
            [
              {
                "node": "Merge Transformed Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Transformed Data": {
          "main": [
            [
              {
                "node": "Enrich With Processing Metadata",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Enrich With Processing Metadata": {
          "main": [
            [
              {
                "node": "Split Into Batches",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Split Into Batches": {
          "main": [
            [
              {
                "node": "Is Inventory Batch?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Inventory Batch?": {
          "main": [
            [
              {
                "node": "Process Inventory Batch",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Other Batches": {
          "main": [
            [
              {
                "node": "Merge Batch Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Batch Results": {
          "main": [
            [
              {
                "node": "Is Last Batch?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Last Batch?": {
          "main": [
            [
              {
                "node": "Continue Batch Processing",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Continue Batch Processing": {
          "main": [
            [
              {
                "node": "Aggregate Batch Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Aggregate Batch Results": {
          "main": [
            [
              {
                "node": "Has Critical Issues?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Has Critical Issues?": {
          "main": [
            [
              {
                "node": "Generate Critical Issues Summary",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Generate Critical Issues Summary": {
          "main": [
            [
              {
                "node": "Generate Standard Summary",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Summaries": {
          "main": [
            [
              {
                "node": "Fetch Weather Forecast",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Weather Forecast": {
          "main": [
            [
              {
                "node": "Fetch Supplier Inventory",
                "type": "main",
                "index": 0
              },
              {
                "node": "Fetch Supplier Inventory",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Supplier Inventory": {
          "main": [
            [
              {
                "node": "Enrich With External Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Enrich With External Data": {
          "main": [
            [
              {
                "node": "Any Alerts To Process?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Any Alerts To Process?": {
          "main": [
            [
              {
                "node": "Format Alerts For Notification",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Alerts For Notification": {
          "main": [
            [
              {
                "node": "Data Processing Output",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Data Processing Output": {
          "main": [
            [
              {
                "node": "Start External Integrations",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Route External Integration": {
          "main": [
            [
              {
                "node": "Weather API Authentication",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Weather API Authentication": {
          "main": [
            [
              {
                "node": "Fetch Weather Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Weather Data": {
          "main": [
            [
              {
                "node": "Validate Weather Response",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate Weather Response": {
          "main": [
            [
              {
                "node": "Wait Before Weather Retry",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wait Before Weather Retry": {
          "main": [
            [
              {
                "node": "Map Weather Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Map Weather Data": {
          "main": [
            [
              {
                "node": "Supplier API Authentication",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate Supplier Response": {
          "main": [
            [
              {
                "node": "Wait Before Supplier Retry",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wait Before Supplier Retry": {
          "main": [
            [
              {
                "node": "Map Supplier Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Map Supplier Data": {
          "main": [
            [
              {
                "node": "Vibration API Authentication",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Vibration API Authentication": {
          "main": [
            [
              {
                "node": "Fetch Vibration Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Vibration Data": {
          "main": [
            [
              {
                "node": "Validate Vibration Response",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate Vibration Response": {
          "main": [
            [
              {
                "node": "Wait Before Vibration Retry",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wait Before Vibration Retry": {
          "main": [
            [
              {
                "node": "Map Vibration Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Combine External Data": {
          "main": [
            [
              {
                "node": "Classify Error",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Classify Error": {
          "main": [
            [
              {
                "node": "Determine Recovery Strategy",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Determine Recovery Strategy": {
          "main": [
            [
              {
                "node": "Execute Fallback Processing",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Execute Fallback Processing": {
          "main": [
            [
              {
                "node": "Log Error Details",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Log Error Details": {
          "main": [
            [
              {
                "node": "Notify Administrators",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Notify Administrators": {
          "main": [
            [
              {
                "node": "Collect Activity & Performance Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Collect Activity & Performance Data": {
          "main": [
            [
              {
                "node": "Check For Critical Events",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create Critical Audit Trail": {
          "main": [
            [
              {
                "node": "Create Standard Audit Trail",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create Standard Audit Trail": {
          "main": [
            [
              {
                "node": "Store Audit Trail & Metrics",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {},
      "active": false
    },
    "provider": "anthropic",
    "model": "claude-3-7-sonnet-20250219",
    "timestamp": "2025-07-22T15:04:26.403Z",
    "nodeCount": 83,
    "connectionCount": 67
  },
  {
    "id": "1ad32d38-a99d-489f-91fd-0e46677e0c0b",
    "prompt": "To create a comprehensive n8n workflow for the Construction Site Safety and Progress Monitoring system, we will orchestrate multiple features together using a central routing mechanism. This workflow will ensure seamless integration and monitoring of safety and progress on a construction site. Here’s how we can structure the workflow:\n\n### Workflow Structure:\n\n1. **Main Entry Point**\n   - **Trigger Node:** n8n-nodes-base.cron\n     - Schedule for regular checks (e.g., every hour, daily, weekly).\n     - Connection: Start the workflow to initiate periodic monitoring and management tasks.\n\n2. **Central Router**\n   - **Switch Node:** n8n-nodes-base.switch\n     - Directs the flow to different branches based on the task required (e.g., safety checks, progress monitoring, material tracking).\n     - Connection: Route to each feature branch based on the task identifier.\n\n3. **Feature Branches**\n\n   **Safety Monitoring:**\n   - **Helmet and Seat Belt Monitoring**\n     - **HTTP Request Node:** n8n-nodes-base.httpRequest\n       - Connect to camera systems to fetch data.\n     - **Function Node:** n8n-nodes-base.code\n       - Analyze image data for compliance.\n     - **Set Node:** n8n-nodes-base.set\n       - Prepare data for logging and alerts.\n   - **Emergency Protocol Activation**\n     - **Error Trigger Node:** n8n-nodes-base.errorTrigger\n     - **Email Node:** n8n-nodes-base.emailSend\n       - Notify relevant authorities in case of detected accidents.\n\n   **Progress Monitoring:**\n   - **Weekly Drone Photography**\n     - **Execute Command Node:** n8n-nodes-base.executeCommand\n       - Schedule drone flights and capture images.\n   - **Contractor Progress Payment Documentation**\n     - **HTTP Request Node:** n8n-nodes-base.httpRequest\n       - Upload and document images for payments.\n\n   **Environmental Monitoring:**\n   - **Weather Monitoring**\n     - **HTTP Request Node:** n8n-nodes-base.httpRequest\n       - Fetch weather data.\n     - **Function Node:** n8n-nodes-base.code\n       - Analyze for concrete pouring conditions.\n   - **Tower Crane Wind Sensors**\n     - **MQTT Node:** n8n-nodes-base.mqtt\n       - Monitor wind speed and shutdown if necessary.\n\n   **Inventory Management:**\n   - **Material Stock Tracking**\n     - **RFID/Barcode Scanning Node:** Custom Node (if needed)\n     - **HTTP Request Node:** n8n-nodes-base.httpRequest\n       - JIT ordering based on stock levels.\n\n   **Security and Vibration Monitoring:**\n   - **Night Security Patrol Tracking**\n     - **GPS Tracking Node:** Custom Node (if needed)\n   - **Vibration Sensor Monitoring**\n     - **HTTP Request Node:** n8n-nodes-base.httpRequest\n       - Fetch and analyze vibration data.\n   \n4. **Central Merge Node**\n   - **Merge Node:** n8n-nodes-base.merge\n     - Combine results from all branches.\n     - Ensure all processes report back and can trigger combined actions or reports.\n\n5. **Final Processing/Response**\n   - **Function Node:** n8n-nodes-base.code\n     - Compile and summarize all results.\n   - **Email Node:** n8n-nodes-base.emailSend\n     - Send consolidated report to stakeholders.\n\n### Error Handling\n- **Error Trigger Node:** n8n-nodes-base.errorTrigger\n  - Capture any errors during execution.\n  - **Email Node:** n8n-nodes-base.emailSend\n    - Notify team of issues immediately.\n\n### Validation Checklist:\n- ☑ All nodes connected with no isolated chains\n- ☑ Central router directs correctly to each branch\n- ☑ All branches merge back into the central flow\n- ☑ Comprehensive error handling in place\n- ☑ Data transformation and visualization nodes included\n- ☑ Regular reports generated and sent to stakeholders\n\nBy following this structure, you can ensure that the construction site safety and progress monitoring system operates efficiently, providing critical insights and maintaining high safety standards.",
    "workflow": {
      "name": "Construction Site Safety and Progress",
      "nodes": [
        {
          "id": "1",
          "name": "Schedule Trigger",
          "type": "n8n-nodes-base.cron",
          "typeVersion": 1,
          "position": [
            100,
            100
          ],
          "parameters": {
            "triggerTimes": {
              "item": [
                {
                  "mode": "everyHour"
                }
              ]
            }
          }
        },
        {
          "id": "2",
          "name": "Central Router",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            300,
            100
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{ $json.taskType || 'safety' }}",
            "rules": {
              "rules": [
                {
                  "value2": "safety",
                  "output": 0
                },
                {
                  "value2": "progress",
                  "output": 1
                },
                {
                  "value2": "inventory",
                  "output": 2
                },
                {
                  "value2": "environmental",
                  "output": 3
                }
              ]
            },
            "fallbackOutput": 4
          }
        },
        {
          "id": "3",
          "name": "Safety Monitoring",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            500,
            100
          ],
          "parameters": {
            "url": "=https://api.construction-site.example/safety-sensors",
            "method": "GET",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "options": {
              "timeout": 5000
            }
          }
        },
        {
          "id": "4",
          "name": "Progress Monitoring",
          "type": "n8n-nodes-base.executeCommand",
          "typeVersion": 1,
          "position": [
            700,
            100
          ],
          "parameters": {
            "command": "python3 /scripts/fetch_drone_imagery.py --site=main --date={{ $today }}",
            "executeTimeout": 120
          }
        },
        {
          "id": "5",
          "name": "Inventory Management",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            900,
            100
          ],
          "parameters": {
            "url": "=https://api.construction-site.example/inventory",
            "method": "GET",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "options": {
              "timeout": 5000
            }
          }
        },
        {
          "id": "6",
          "name": "Environmental Monitoring",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            1100,
            100
          ],
          "parameters": {
            "url": "=https://api.weather.example/forecast?lat=12.34&lon=56.78",
            "method": "GET",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "options": {
              "timeout": 5000
            }
          }
        },
        {
          "id": "7",
          "name": "Unknown Task Handler",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            100
          ],
          "parameters": {
            "functionCode": "// Handle unknown task types\nconst taskType = $input.first().json.taskType || 'unknown';\n\nreturn [{\n  json: {\n    status: 'error',\n    message: `Unknown task type: ${taskType}`,\n    timestamp: new Date().toISOString()\n  }\n}];"
          }
        },
        {
          "id": "8",
          "name": "Merge Results",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            1500,
            100
          ],
          "parameters": {
            "mode": "mergeByPosition"
          }
        },
        {
          "id": "9",
          "name": "Generate Report",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            250
          ],
          "parameters": {
            "functionCode": "// Process and format all monitoring data into a comprehensive report\nconst data = $input.all();\nconst timestamp = new Date().toISOString();\n\n// Initialize report sections\nlet safetyStatus = 'unknown';\nlet progressStatus = 'unknown';\nlet inventoryStatus = 'unknown';\nlet weatherStatus = 'unknown';\nlet criticalIssues = [];\n\n// Process each input based on available data\ndata.forEach(item => {\n  const input = item.json;\n  \n  // Safety data processing\n  if (input.safetyData || input.url?.includes('safety')) {\n    const safetyData = input.safetyData || input;\n    safetyStatus = safetyData.status || 'normal';\n    \n    // Check for critical safety issues\n    if (safetyData.alerts && safetyData.alerts.length > 0) {\n      safetyData.alerts.forEach(alert => {\n        if (alert.severity === 'critical') {\n          criticalIssues.push({\n            type: 'safety',\n            message: alert.message,\n            location: alert.location\n          });\n        }\n      });\n    }\n  }\n  \n  // Progress data processing\n  if (input.progressData || input.commandResult) {\n    const progressData = input.progressData || input;\n    progressStatus = progressData.status || 'on-schedule';\n    \n    // Check for schedule issues\n    if (progressData.behindSchedule) {\n      criticalIssues.push({\n        type: 'progress',\n        message: 'Project behind schedule',\n        details: progressData.details\n      });\n    }\n  }\n  \n  // Inventory data processing\n  if (input.inventoryData || input.url?.includes('inventory')) {\n    const inventoryData = input.inventoryData || input;\n    inventoryStatus = inventoryData.status || 'adequate';\n    \n    // Check for low stock issues\n    if (inventoryData.lowStock && inventoryData.lowStock.length > 0) {\n      inventoryData.lowStock.forEach(item => {\n        criticalIssues.push({\n          type: 'inventory',\n          message: `Low stock: ${item.name}`,\n          quantity: item.quantity,\n          threshold: item.threshold\n        });\n      });\n    }\n  }\n  \n  // Weather data processing\n  if (input.weather || input.url?.includes('weather')) {\n    const weatherData = input.weather || input;\n    weatherStatus = weatherData.forecast || 'unknown';\n    \n    // Check for severe weather\n    if (weatherData.alerts && weatherData.alerts.length > 0) {\n      weatherData.alerts.forEach(alert => {\n        criticalIssues.push({\n          type: 'weather',\n          message: alert.description,\n          severity: alert.severity\n        });\n      });\n    }\n  }\n});\n\n// Compile the final report\nconst report = {\n  timestamp,\n  summary: {\n    safety: safetyStatus,\n    progress: progressStatus,\n    inventory: inventoryStatus,\n    weather: weatherStatus\n  },\n  criticalIssues,\n  hasCriticalIssues: criticalIssues.length > 0,\n  rawData: data.map(item => item.json)\n};\n\nreturn [{ json: report }];"
          }
        },
        {
          "id": "10",
          "name": "Email Report",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            300,
            250
          ],
          "parameters": {
            "fromEmail": "monitoring@construction-site.example",
            "toEmail": "=project-manager@construction-site.example",
            "subject": "={{ $json.hasCriticalIssues ? '🚨 CRITICAL: Construction Site Status Report' : 'Daily Construction Site Status Report' }}",
            "text": "={{ \n`Construction Site Status Report\n\nTime: ${$json.timestamp}\n\nSummary:\n- Safety: ${$json.summary.safety}\n- Progress: ${$json.summary.progress}\n- Inventory: ${$json.summary.inventory}\n- Weather: ${$json.summary.weather}\n\n${$json.hasCriticalIssues ? 'CRITICAL ISSUES:\\n' + $json.criticalIssues.map(issue => `- ${issue.type.toUpperCase()}: ${issue.message}`).join('\\n') : 'No critical issues detected.'}\n\nThis is an automated report.\n`\n}}",
            "options": {
              "attachments": "={{ $json.hasCriticalIssues ? [{name: 'critical_issues.json', content: JSON.stringify($json.criticalIssues, null, 2)}] : [] }}"
            }
          }
        },
        {
          "id": "11",
          "name": "Schedule Trigger",
          "type": "n8n-nodes-base.cron",
          "typeVersion": 1,
          "position": [
            500,
            250
          ],
          "parameters": {
            "triggerTimes": {
              "item": [
                {
                  "hour": 8,
                  "minute": 0
                }
              ]
            }
          }
        },
        {
          "id": "12",
          "name": "Central Router",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            700,
            250
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{ $json.taskType }}",
            "rules": {
              "rules": [
                {
                  "value2": "safety",
                  "output": 0
                },
                {
                  "value2": "progress",
                  "output": 1
                },
                {
                  "value2": "inventory",
                  "output": 2
                },
                {
                  "value2": "environmental",
                  "output": 3
                },
                {
                  "value2": "security",
                  "output": 4
                }
              ]
            },
            "fallbackOutput": 5
          }
        },
        {
          "id": "13",
          "name": "Process Safety Monitoring",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            250
          ],
          "parameters": {
            "functionCode": "// Process safety data from cameras and sensors\nconst safetyData = $input.item.json;\n\n// Check for helmet and seatbelt compliance\nconst complianceCheck = {\n  helmetDetected: safetyData.helmetDetected || false,\n  seatbeltFastened: safetyData.seatbeltFastened || false,\n  safetyViolations: []\n};\n\nif (!complianceCheck.helmetDetected) {\n  complianceCheck.safetyViolations.push('Helmet not detected');\n}\n\nif (!complianceCheck.seatbeltFastened) {\n  complianceCheck.safetyViolations.push('Seatbelt not fastened');\n}\n\nconst result = {\n  ...safetyData,\n  complianceCheck,\n  processingType: 'safety',\n  timestamp: new Date().toISOString(),\n  requiresAlert: complianceCheck.safetyViolations.length > 0\n};\n\nreturn [{ json: result }];"
          }
        },
        {
          "id": "14",
          "name": "Process Progress Monitoring",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            250
          ],
          "parameters": {
            "functionCode": "// Process construction progress data from drone photography\nconst progressData = $input.item.json;\n\n// Calculate completion percentage based on milestones\nconst completedMilestones = progressData.completedMilestones || 0;\nconst totalMilestones = progressData.totalMilestones || 1;\nconst completionPercentage = (completedMilestones / totalMilestones) * 100;\n\n// Check if progress is on schedule\nconst currentDate = new Date();\nconst projectStartDate = new Date(progressData.projectStartDate || currentDate);\nconst projectEndDate = new Date(progressData.projectEndDate || currentDate);\n\nconst totalProjectDays = Math.floor((projectEndDate - projectStartDate) / (1000 * 60 * 60 * 24));\nconst daysElapsed = Math.floor((currentDate - projectStartDate) / (1000 * 60 * 60 * 24));\nconst expectedCompletion = (daysElapsed / totalProjectDays) * 100;\n\nconst behindSchedule = completionPercentage < expectedCompletion;\n\nconst result = {\n  ...progressData,\n  completionPercentage,\n  expectedCompletion,\n  behindSchedule,\n  processingType: 'progress',\n  timestamp: new Date().toISOString(),\n  requiresAlert: behindSchedule && (expectedCompletion - completionPercentage > 10)\n};\n\nreturn [{ json: result }];"
          }
        },
        {
          "id": "15",
          "name": "Process Environmental Monitoring",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            250
          ],
          "parameters": {
            "functionCode": "// Process environmental data including weather and vibration\nconst environmentalData = $input.item.json;\n\n// Check weather conditions for concrete pouring\nconst temperature = environmentalData.temperature || 20;\nconst windSpeed = environmentalData.windSpeed || 0;\nconst precipitation = environmentalData.precipitation || 0;\n\nconst suitableForConcrete = temperature >= 5 && temperature <= 30 && windSpeed < 20 && precipitation < 5;\n\n// Check tower crane wind speed safety\nconst craneWindSafe = windSpeed < 35; // Most cranes should not operate above 35 mph wind\n\nconst result = {\n  ...environmentalData,\n  suitableForConcrete,\n  craneWindSafe,\n  processingType: 'environmental',\n  timestamp: new Date().toISOString(),\n  requiresAlert: !craneWindSafe || (environmentalData.vibrationLevel && environmentalData.vibrationLevel > environmentalData.vibrationThreshold)\n};\n\nreturn [{ json: result }];"
          }
        },
        {
          "id": "16",
          "name": "Merge All Results",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            1500,
            250
          ],
          "parameters": {
            "mode": "mergeByPosition"
          }
        },
        {
          "id": "17",
          "name": "Check For Critical Issues",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            100,
            400
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.requiresAlert }}",
                  "operation": "equal",
                  "value2": true
                }
              ]
            }
          }
        },
        {
          "id": "18",
          "name": "Send Critical Alert",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            300,
            400
          ],
          "parameters": {
            "fromEmail": "alerts@constructionsafety.com",
            "toEmail": "sitemanager@construction.com",
            "subject": "=ALERT: Construction Site Issue - {{ $json.processingType }}",
            "text": "=Critical issue detected in {{ $json.processingType }} monitoring:\n\n{{ JSON.stringify($json, null, 2) }}\n\nPlease take immediate action."
          }
        },
        {
          "id": "19",
          "name": "Generate Daily Report",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            400
          ],
          "parameters": {
            "functionCode": "// Compile daily report from monitoring data\nconst data = $input.item.json;\n\nconst report = {\n  date: new Date().toISOString().split('T')[0],\n  summary: {\n    processingType: data.processingType,\n    requiresAttention: data.requiresAlert,\n    details: {}\n  }\n};\n\n// Add specific details based on processing type\nswitch(data.processingType) {\n  case 'safety':\n    report.summary.details = {\n      complianceIssues: data.complianceCheck?.safetyViolations || [],\n      recommendations: 'Enforce safety gear compliance'\n    };\n    break;\n  case 'progress':\n    report.summary.details = {\n      completionPercentage: data.completionPercentage,\n      behindSchedule: data.behindSchedule,\n      recommendations: data.behindSchedule ? 'Consider adding resources to catch up' : 'Project on track'\n    };\n    break;\n  case 'environmental':\n    report.summary.details = {\n      suitableForConcrete: data.suitableForConcrete,\n      craneWindSafe: data.craneWindSafe,\n      recommendations: !data.craneWindSafe ? 'Suspend crane operations' : 'Normal operations can continue'\n    };\n    break;\n  default:\n    report.summary.details = {\n      genericInfo: 'Processed construction site data',\n      recommendations: 'Review complete data for details'\n    };\n}\n\nreturn [{ json: report }];"
          }
        },
        {
          "id": "20",
          "name": "Error Handler",
          "type": "n8n-nodes-base.errorTrigger",
          "typeVersion": 1,
          "position": [
            700,
            400
          ],
          "parameters": {}
        },
        {
          "id": "21",
          "name": "Prepare Data for Validation",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            400
          ],
          "parameters": {
            "functionCode": "// Prepare and structure the incoming data for validation\nconst inputData = items[0].json;\n\n// Create a standardized format for validation\nconst dataToValidate = {\n  // Construction site data structure\n  siteData: inputData.siteData || {},\n  safetyMetrics: inputData.safetyMetrics || {},\n  progressData: inputData.progressData || {},\n  environmentalData: inputData.environmentalData || {},\n  inventoryData: inputData.inventoryData || {},\n  timestamp: inputData.timestamp || new Date().toISOString(),\n  source: inputData.source || 'unknown',\n  requestId: inputData.requestId || `req-${Date.now()}`\n};\n\nreturn [{ json: dataToValidate }];"
          }
        },
        {
          "id": "22",
          "name": "Schema Validation",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            400
          ],
          "parameters": {
            "functionCode": "// Validate the data structure against expected schema\nconst data = items[0].json;\nconst errors = [];\n\n// Required fields validation\nconst requiredFields = [\n  'siteData',\n  'timestamp',\n  'source',\n  'requestId'\n];\n\nrequiredFields.forEach(field => {\n  if (!data[field]) {\n    errors.push(`Missing required field: ${field}`);\n  }\n});\n\n// Site data structure validation\nif (data.siteData) {\n  if (!data.siteData.siteId) {\n    errors.push('Missing siteId in siteData');\n  }\n  if (!data.siteData.siteName) {\n    errors.push('Missing siteName in siteData');\n  }\n}\n\n// Safety metrics validation if present\nif (data.safetyMetrics && Object.keys(data.safetyMetrics).length > 0) {\n  if (typeof data.safetyMetrics.helmetCompliance !== 'number') {\n    errors.push('helmetCompliance must be a number in safetyMetrics');\n  }\n  if (typeof data.safetyMetrics.seatBeltCompliance !== 'number') {\n    errors.push('seatBeltCompliance must be a number in safetyMetrics');\n  }\n}\n\n// Add validation result to the payload\ndata.validationErrors = errors;\ndata.isSchemaValid = errors.length === 0;\n\nreturn [{ json: data }];"
          }
        },
        {
          "id": "23",
          "name": "Type Checking",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            400
          ],
          "parameters": {
            "functionCode": "// Perform type checking on key data fields\nconst data = items[0].json;\nconst errors = data.validationErrors || [];\n\n// Type checking functions\nconst typeChecks = {\n  // Check if timestamp is a valid ISO date string\n  isValidTimestamp: (timestamp) => {\n    try {\n      return !isNaN(Date.parse(timestamp));\n    } catch (e) {\n      return false;\n    }\n  },\n  \n  // Check if value is a number\n  isNumber: (value) => typeof value === 'number' && !isNaN(value),\n  \n  // Check if value is a string\n  isString: (value) => typeof value === 'string',\n  \n  // Check if value is a boolean\n  isBoolean: (value) => typeof value === 'boolean',\n  \n  // Check if value is an object\n  isObject: (value) => typeof value === 'object' && value !== null && !Array.isArray(value)\n};\n\n// Check timestamp\nif (!typeChecks.isValidTimestamp(data.timestamp)) {\n  errors.push('timestamp must be a valid ISO date string');\n}\n\n// Check source and requestId are strings\nif (!typeChecks.isString(data.source)) {\n  errors.push('source must be a string');\n}\nif (!typeChecks.isString(data.requestId)) {\n  errors.push('requestId must be a string');\n}\n\n// Check siteData is an object\nif (!typeChecks.isObject(data.siteData)) {\n  errors.push('siteData must be an object');\n}\n\n// Check numeric values in progress data if present\nif (data.progressData) {\n  if (data.progressData.percentComplete !== undefined && !typeChecks.isNumber(data.progressData.percentComplete)) {\n    errors.push('percentComplete must be a number in progressData');\n  }\n}\n\n// Check environmental data types if present\nif (data.environmentalData) {\n  if (data.environmentalData.temperature !== undefined && !typeChecks.isNumber(data.environmentalData.temperature)) {\n    errors.push('temperature must be a number in environmentalData');\n  }\n  if (data.environmentalData.windSpeed !== undefined && !typeChecks.isNumber(data.environmentalData.windSpeed)) {\n    errors.push('windSpeed must be a number in environmentalData');\n  }\n}\n\n// Update validation status\ndata.validationErrors = errors;\ndata.isTypeValid = errors.length === data.validationErrors.length;\n\nreturn [{ json: data }];"
          }
        },
        {
          "id": "24",
          "name": "Business Rule Validation",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            400
          ],
          "parameters": {
            "functionCode": "// Validate business rules for construction site data\nconst data = items[0].json;\nconst errors = data.validationErrors || [];\n\n// Business rule validation\n\n// Check if timestamp is not in the future\nif (new Date(data.timestamp) > new Date()) {\n  errors.push('timestamp cannot be in the future');\n}\n\n// Safety metrics validation\nif (data.safetyMetrics) {\n  // Helmet compliance must be between 0-100%\n  if (data.safetyMetrics.helmetCompliance !== undefined) {\n    if (data.safetyMetrics.helmetCompliance < 0 || data.safetyMetrics.helmetCompliance > 100) {\n      errors.push('helmetCompliance must be between 0 and 100');\n    }\n  }\n  \n  // Seat belt compliance must be between 0-100%\n  if (data.safetyMetrics.seatBeltCompliance !== undefined) {\n    if (data.safetyMetrics.seatBeltCompliance < 0 || data.safetyMetrics.seatBeltCompliance > 100) {\n      errors.push('seatBeltCompliance must be between 0 and 100');\n    }\n  }\n}\n\n// Progress data validation\nif (data.progressData) {\n  // Percent complete must be between 0-100%\n  if (data.progressData.percentComplete !== undefined) {\n    if (data.progressData.percentComplete < 0 || data.progressData.percentComplete > 100) {\n      errors.push('percentComplete must be between 0 and 100');\n    }\n  }\n}\n\n// Environmental data validation\nif (data.environmentalData) {\n  // Wind speed validation for crane operations\n  if (data.environmentalData.windSpeed !== undefined && data.environmentalData.windSpeed > 35) {\n    // Add a warning flag for high wind conditions\n    data.warnings = data.warnings || [];\n    data.warnings.push('WARNING: Wind speed exceeds safe crane operation limit (35 mph)');\n  }\n}\n\n// Update validation status\ndata.validationErrors = errors;\ndata.isBusinessRulesValid = errors.length === data.validationErrors.length;\n\nreturn [{ json: data }];"
          }
        },
        {
          "id": "25",
          "name": "Sanitize Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            550
          ],
          "parameters": {
            "functionCode": "// Sanitize data to prevent injection and ensure data quality\nconst data = items[0].json;\n\n// Helper function to sanitize strings\nfunction sanitizeString(str) {\n  if (typeof str !== 'string') return str;\n  // Remove any potentially dangerous HTML/script tags\n  return str.replace(/<[^>]*>/g, '')\n    // Trim whitespace\n    .trim()\n    // Limit string length\n    .substring(0, 1000);\n}\n\n// Helper function to sanitize numbers\nfunction sanitizeNumber(num) {\n  if (typeof num !== 'number') return num;\n  // Ensure number is finite and not NaN\n  return isFinite(num) ? num : 0;\n}\n\n// Sanitize site data\nif (data.siteData) {\n  data.siteData.siteId = sanitizeString(data.siteData.siteId);\n  data.siteData.siteName = sanitizeString(data.siteData.siteName);\n  if (data.siteData.location) {\n    data.siteData.location = sanitizeString(data.siteData.location);\n  }\n}\n\n// Sanitize safety metrics\nif (data.safetyMetrics) {\n  data.safetyMetrics.helmetCompliance = sanitizeNumber(data.safetyMetrics.helmetCompliance);\n  data.safetyMetrics.seatBeltCompliance = sanitizeNumber(data.safetyMetrics.seatBeltCompliance);\n  // Round percentages to 2 decimal places\n  if (typeof data.safetyMetrics.helmetCompliance === 'number') {\n    data.safetyMetrics.helmetCompliance = Math.round(data.safetyMetrics.helmetCompliance * 100) / 100;\n  }\n  if (typeof data.safetyMetrics.seatBeltCompliance === 'number') {\n    data.safetyMetrics.seatBeltCompliance = Math.round(data.safetyMetrics.seatBeltCompliance * 100) / 100;\n  }\n}\n\n// Sanitize progress data\nif (data.progressData) {\n  data.progressData.percentComplete = sanitizeNumber(data.progressData.percentComplete);\n  // Round to 2 decimal places\n  if (typeof data.progressData.percentComplete === 'number') {\n    data.progressData.percentComplete = Math.round(data.progressData.percentComplete * 100) / 100;\n  }\n}\n\n// Sanitize environmental data\nif (data.environmentalData) {\n  data.environmentalData.temperature = sanitizeNumber(data.environmentalData.temperature);\n  data.environmentalData.windSpeed = sanitizeNumber(data.environmentalData.windSpeed);\n}\n\n// Sanitize general fields\ndata.source = sanitizeString(data.source);\ndata.requestId = sanitizeString(data.requestId);\n\n// Mark data as sanitized\ndata.isSanitized = true;\n\nreturn [{ json: data }];"
          }
        },
        {
          "id": "26",
          "name": "Validation Decision",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            300,
            550
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.validationErrors.length }}",
                  "operation": "equal",
                  "value2": "0"
                }
              ]
            }
          }
        },
        {
          "id": "27",
          "name": "Format Validation Errors",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            550
          ],
          "parameters": {
            "functionCode": "// Format validation errors for clear reporting\nconst data = items[0].json;\n\n// Create a structured error response\nconst errorResponse = {\n  status: 'error',\n  requestId: data.requestId,\n  timestamp: new Date().toISOString(),\n  message: 'Input validation failed',\n  errors: data.validationErrors,\n  errorCount: data.validationErrors.length,\n  originalData: {\n    source: data.source,\n    timestamp: data.timestamp,\n    requestId: data.requestId\n  }\n};\n\n// Add validation stage information\nif (!data.isSchemaValid) {\n  errorResponse.validationStage = 'Schema Validation';\n} else if (!data.isTypeValid) {\n  errorResponse.validationStage = 'Type Checking';\n} else if (!data.isBusinessRulesValid) {\n  errorResponse.validationStage = 'Business Rule Validation';\n}\n\n// Add any warnings that were generated during validation\nif (data.warnings && data.warnings.length > 0) {\n  errorResponse.warnings = data.warnings;\n}\n\nreturn [{ json: errorResponse }];"
          }
        },
        {
          "id": "28",
          "name": "Prepare For Next Section",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            550
          ],
          "parameters": {
            "functionCode": "// Prepare validated data for the next processing section\nconst data = items[0].json;\n\n// Remove validation metadata to clean up the payload\nconst cleanData = { ...data };\ndelete cleanData.validationErrors;\ndelete cleanData.isSchemaValid;\ndelete cleanData.isTypeValid;\ndelete cleanData.isBusinessRulesValid;\n\n// Add validation success metadata\ncleanData.validation = {\n  status: 'success',\n  timestamp: new Date().toISOString()\n};\n\n// Add any warnings that were generated during validation\nif (data.warnings && data.warnings.length > 0) {\n  cleanData.validation.warnings = data.warnings;\n}\n\n// Add metadata for tracking through the workflow\ncleanData.processingMetadata = {\n  stage: 'validation_complete',\n  nextStage: 'data_processing',\n  processedAt: new Date().toISOString()\n};\n\nreturn [{ json: cleanData }];"
          }
        },
        {
          "id": "29",
          "name": "Receive Input Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            550
          ],
          "parameters": {
            "functionCode": "// Simulate receiving data from previous section\nconst inputData = {\n  constructionSiteId: 'CS-10293',\n  timestamp: new Date().toISOString(),\n  dataType: 'mixed',\n  safetyReadings: [\n    { sensorId: 'HELMET-01', status: 'compliant', count: 23 },\n    { sensorId: 'SEATBELT-02', status: 'violation', count: 3 }\n  ],\n  progressData: {\n    completionPercentage: 68.5,\n    milestonesCompleted: 7,\n    milestonesTotal: 12,\n    lastUpdate: new Date().toISOString()\n  },\n  environmentalData: {\n    temperature: 28.5,\n    humidity: 65,\n    windSpeed: 12.3,\n    precipitation: 0\n  },\n  materialInventory: [\n    { materialId: 'CONCRETE-A', currentStock: 120, minRequired: 50 },\n    { materialId: 'STEEL-BEAM-B', currentStock: 35, minRequired: 40 },\n    { materialId: 'LUMBER-C', currentStock: 200, minRequired: 100 }\n  ]\n};\n\nreturn [{ json: inputData }];"
          }
        },
        {
          "id": "30",
          "name": "Validate Data Schema",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            550
          ],
          "parameters": {
            "functionCode": "// Validate the structure of incoming data\nconst item = $input.item.json;\nlet isValid = true;\nlet validationErrors = [];\n\n// Check required properties\nif (!item.constructionSiteId) {\n  isValid = false;\n  validationErrors.push('Missing constructionSiteId');\n}\n\nif (!item.timestamp) {\n  isValid = false;\n  validationErrors.push('Missing timestamp');\n}\n\n// Check arrays\nif (!Array.isArray(item.safetyReadings)) {\n  isValid = false;\n  validationErrors.push('safetyReadings must be an array');\n}\n\nif (!Array.isArray(item.materialInventory)) {\n  isValid = false;\n  validationErrors.push('materialInventory must be an array');\n}\n\nitem.isValid = isValid;\nitem.validationErrors = validationErrors;\n\nreturn [{ json: item }];"
          }
        },
        {
          "id": "31",
          "name": "Is Data Valid?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1300,
            550
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.isValid }}",
                  "operation": "equal",
                  "value2": true
                }
              ]
            }
          }
        },
        {
          "id": "32",
          "name": "Format Validation Errors",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            550
          ],
          "parameters": {
            "functionCode": "// Format validation errors for reporting\nconst item = $input.item.json;\n\nconst errorReport = {\n  timestamp: new Date().toISOString(),\n  constructionSiteId: item.constructionSiteId || 'UNKNOWN',\n  status: 'VALIDATION_FAILED',\n  errors: item.validationErrors,\n  originalData: item\n};\n\nreturn [{ json: errorReport }];"
          }
        },
        {
          "id": "33",
          "name": "Route By Data Type",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            100,
            700
          ],
          "parameters": {
            "rules": {
              "rules": [
                {
                  "value": "safety",
                  "conditions": [
                    {
                      "value1": "={{ Array.isArray($json.safetyReadings) && $json.safetyReadings.length > 0 }}",
                      "operation": "equal",
                      "value2": true
                    }
                  ]
                },
                {
                  "value": "progress",
                  "conditions": [
                    {
                      "value1": "={{ $json.progressData && $json.progressData.completionPercentage !== undefined }}",
                      "operation": "equal",
                      "value2": true
                    }
                  ]
                },
                {
                  "value": "inventory",
                  "conditions": [
                    {
                      "value1": "={{ Array.isArray($json.materialInventory) && $json.materialInventory.length > 0 }}",
                      "operation": "equal",
                      "value2": true
                    }
                  ]
                }
              ]
            },
            "fallbackOutput": "3"
          }
        },
        {
          "id": "34",
          "name": "Process Safety Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            700
          ],
          "parameters": {
            "functionCode": "// Process safety readings\nconst item = $input.item.json;\nconst safetyData = item.safetyReadings;\n\n// Calculate compliance metrics\nlet totalReadings = 0;\nlet complianceCount = 0;\nlet violationCount = 0;\n\nsafetyData.forEach(reading => {\n  const count = reading.count || 1;\n  totalReadings += count;\n  \n  if (reading.status === 'compliant') {\n    complianceCount += count;\n  } else if (reading.status === 'violation') {\n    violationCount += count;\n  }\n});\n\nconst complianceRate = totalReadings > 0 ? (complianceCount / totalReadings) * 100 : 0;\n\n// Add processed data\nitem.safetyMetrics = {\n  totalReadings,\n  complianceCount,\n  violationCount,\n  complianceRate: parseFloat(complianceRate.toFixed(2)),\n  complianceStatus: complianceRate >= 95 ? 'GOOD' : complianceRate >= 85 ? 'WARNING' : 'CRITICAL',\n  processedAt: new Date().toISOString()\n};\n\nreturn [{ json: item }];"
          }
        },
        {
          "id": "35",
          "name": "Process Progress Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            700
          ],
          "parameters": {
            "functionCode": "// Process construction progress data\nconst item = $input.item.json;\nconst progressData = item.progressData;\n\n// Calculate additional metrics\nconst remainingMilestones = progressData.milestonesTotal - progressData.milestonesCompleted;\nconst milestoneCompletionRate = (progressData.milestonesCompleted / progressData.milestonesTotal) * 100;\n\n// Estimate completion date (simplified example)\nconst today = new Date();\nconst avgMilestoneTimeInDays = 7; // Assuming each milestone takes 7 days on average\nconst estimatedRemainingDays = remainingMilestones * avgMilestoneTimeInDays;\nconst estimatedCompletionDate = new Date(today.getTime() + (estimatedRemainingDays * 24 * 60 * 60 * 1000));\n\n// Add processed data\nitem.progressMetrics = {\n  completionPercentage: parseFloat(progressData.completionPercentage.toFixed(2)),\n  milestoneCompletionRate: parseFloat(milestoneCompletionRate.toFixed(2)),\n  remainingMilestones,\n  estimatedCompletionDate: estimatedCompletionDate.toISOString(),\n  onSchedule: progressData.completionPercentage >= 65, // Example threshold\n  processedAt: new Date().toISOString()\n};\n\nreturn [{ json: item }];"
          }
        },
        {
          "id": "36",
          "name": "Process Inventory Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            700
          ],
          "parameters": {
            "functionCode": "// Process material inventory data\nconst item = $input.item.json;\nconst inventoryData = item.materialInventory;\n\n// Identify low stock items and calculate metrics\nlet lowStockItems = [];\nlet criticalStockItems = [];\nlet totalItems = inventoryData.length;\nlet stockHealthyCount = 0;\n\ninventoryData.forEach(material => {\n  // Calculate stock ratio\n  const stockRatio = material.currentStock / material.minRequired;\n  material.stockRatio = parseFloat(stockRatio.toFixed(2));\n  \n  // Determine stock status\n  if (stockRatio < 0.8) {\n    material.stockStatus = 'LOW';\n    lowStockItems.push(material);\n    \n    if (stockRatio < 1) {\n      material.stockStatus = 'CRITICAL';\n      criticalStockItems.push(material);\n    }\n  } else {\n    material.stockStatus = 'HEALTHY';\n    stockHealthyCount++;\n  }\n});\n\n// Add processed data\nitem.inventoryMetrics = {\n  totalMaterials: totalItems,\n  lowStockCount: lowStockItems.length,\n  criticalStockCount: criticalStockItems.length,\n  stockHealthPercentage: parseFloat(((stockHealthyCount / totalItems) * 100).toFixed(2)),\n  lowStockItems: lowStockItems.map(m => m.materialId),\n  criticalStockItems: criticalStockItems.map(m => m.materialId),\n  requiresAttention: criticalStockItems.length > 0,\n  processedAt: new Date().toISOString()\n};\n\nreturn [{ json: item }];"
          }
        },
        {
          "id": "37",
          "name": "Process Unknown Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            700
          ],
          "parameters": {
            "functionCode": "// Handle unknown data types\nconst item = $input.item.json;\n\nitem.unknownDataProcessed = {\n  status: 'UNRECOGNIZED_DATA_TYPE',\n  message: 'The data type could not be categorized as safety, progress, or inventory',\n  receivedDataKeys: Object.keys(item),\n  processedAt: new Date().toISOString()\n};\n\nreturn [{ json: item }];"
          }
        },
        {
          "id": "38",
          "name": "Merge Processed Data",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            1100,
            700
          ],
          "parameters": {
            "mode": "passThrough",
            "joinMode": "keepKeyMatches",
            "outputDataFrom": "input1"
          }
        },
        {
          "id": "39",
          "name": "Check For Alerts",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            700
          ],
          "parameters": {
            "functionCode": "// Check for conditions that require alerts\nconst item = $input.item.json;\nlet alerts = [];\n\n// Safety alerts\nif (item.safetyMetrics && item.safetyMetrics.complianceStatus === 'CRITICAL') {\n  alerts.push({\n    type: 'SAFETY',\n    severity: 'HIGH',\n    message: `Critical safety compliance issue: ${item.safetyMetrics.complianceRate}% compliance rate`,\n    details: `${item.safetyMetrics.violationCount} violations detected`\n  });\n} else if (item.safetyMetrics && item.safetyMetrics.complianceStatus === 'WARNING') {\n  alerts.push({\n    type: 'SAFETY',\n    severity: 'MEDIUM',\n    message: `Safety compliance warning: ${item.safetyMetrics.complianceRate}% compliance rate`,\n    details: `${item.safetyMetrics.violationCount} violations detected`\n  });\n}\n\n// Inventory alerts\nif (item.inventoryMetrics && item.inventoryMetrics.criticalStockCount > 0) {\n  alerts.push({\n    type: 'INVENTORY',\n    severity: 'HIGH',\n    message: `Critical inventory levels for ${item.inventoryMetrics.criticalStockCount} materials`,\n    details: `Critical items: ${item.inventoryMetrics.criticalStockItems.join(', ')}`\n  });\n} else if (item.inventoryMetrics && item.inventoryMetrics.lowStockCount > 0) {\n  alerts.push({\n    type: 'INVENTORY',\n    severity: 'MEDIUM',\n    message: `Low inventory levels for ${item.inventoryMetrics.lowStockCount} materials`,\n    details: `Low stock items: ${item.inventoryMetrics.lowStockItems.join(', ')}`\n  });\n}\n\n// Progress alerts\nif (item.progressMetrics && !item.progressMetrics.onSchedule) {\n  alerts.push({\n    type: 'PROGRESS',\n    severity: 'MEDIUM',\n    message: `Project behind schedule: ${item.progressMetrics.completionPercentage}% complete`,\n    details: `Estimated completion date: ${new Date(item.progressMetrics.estimatedCompletionDate).toLocaleDateString()}`\n  });\n}\n\nitem.alerts = alerts;\nitem.hasAlerts = alerts.length > 0;\nitem.hasCriticalAlerts = alerts.some(alert => alert.severity === 'HIGH');\n\nreturn [{ json: item }];"
          }
        },
        {
          "id": "40",
          "name": "Has Alerts?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1500,
            700
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.hasAlerts }}",
                  "operation": "equal",
                  "value2": true
                }
              ]
            }
          }
        },
        {
          "id": "41",
          "name": "Format Alerts",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            850
          ],
          "parameters": {
            "functionCode": "// Format alerts for notification\nconst item = $input.item.json;\n\nconst formattedAlerts = {\n  siteId: item.constructionSiteId,\n  timestamp: new Date().toISOString(),\n  alertCount: item.alerts.length,\n  criticalAlertCount: item.alerts.filter(a => a.severity === 'HIGH').length,\n  alerts: item.alerts.map(alert => ({\n    type: alert.type,\n    severity: alert.severity,\n    message: alert.message,\n    details: alert.details\n  })),\n  requiresImmediate: item.hasCriticalAlerts\n};\n\nitem.formattedAlerts = formattedAlerts;\n\nreturn [{ json: item }];"
          }
        },
        {
          "id": "42",
          "name": "Split Into Batches",
          "type": "n8n-nodes-base.splitInBatches",
          "typeVersion": 1,
          "position": [
            300,
            850
          ],
          "parameters": {
            "batchSize": 10
          }
        },
        {
          "id": "43",
          "name": "Enrich With Weather Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            850
          ],
          "parameters": {
            "functionCode": "// Simulate enriching with weather data\nconst item = $input.item.json;\n\n// Mock weather data (in a real scenario, this would be an API call)\nconst weatherData = {\n  temperature: item.environmentalData?.temperature || 25,\n  humidity: item.environmentalData?.humidity || 60,\n  windSpeed: item.environmentalData?.windSpeed || 10,\n  precipitation: item.environmentalData?.precipitation || 0,\n  weatherCondition: ['Sunny', 'Cloudy', 'Partly Cloudy', 'Rainy'][Math.floor(Math.random() * 4)],\n  forecastNext24h: {\n    maxTemp: (item.environmentalData?.temperature || 25) + 2,\n    minTemp: (item.environmentalData?.temperature || 25) - 3,\n    precipitationChance: Math.floor(Math.random() * 100),\n    windSpeedMax: (item.environmentalData?.windSpeed || 10) + 5\n  }\n};\n\n// Determine if weather affects construction\nconst affectsConstruction = \n  weatherData.weatherCondition === 'Rainy' ||\n  weatherData.windSpeed > 20 ||\n  weatherData.forecastNext24h.precipitationChance > 70;\n\n// Add enriched data\nitem.weatherData = weatherData;\nitem.weatherImpact = {\n  affectsConstruction,\n  safeForCraneOperation: weatherData.windSpeed < 15,\n  safeForConcretePouring: weatherData.weatherCondition !== 'Rainy' && weatherData.forecastNext24h.precipitationChance < 50,\n  recommendation: affectsConstruction ? 'Consider adjusting schedule for weather conditions' : 'Weather conditions favorable for construction'\n};\n\nreturn [{ json: item }];"
          }
        },
        {
          "id": "44",
          "name": "Enrich With Reference Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            850
          ],
          "parameters": {
            "functionCode": "// Enrich with reference data for materials and safety standards\nconst item = $input.item.json;\n\n// Mock reference data (in a real scenario, this would be from a database)\nconst materialReferenceData = {\n  'CONCRETE-A': {\n    fullName: 'High-Strength Concrete Mix Type A',\n    supplier: 'BuildWell Materials Inc.',\n    leadTimeInDays: 3,\n    unitOfMeasure: 'cubic yards',\n    standardOrderSize: 50\n  },\n  'STEEL-BEAM-B': {\n    fullName: 'Structural Steel I-Beam Type B',\n    supplier: 'SteelWorks Manufacturing',\n    leadTimeInDays: 7,\n    unitOfMeasure: 'pieces',\n    standardOrderSize: 20\n  },\n  'LUMBER-C': {\n    fullName: 'Pressure-Treated Lumber Type C',\n    supplier: 'Forest Products Co.',\n    leadTimeInDays: 2,\n    unitOfMeasure: 'boards',\n    standardOrderSize: 100\n  }\n};\n\n// Enrich inventory data with reference information\nif (item.materialInventory && Array.isArray(item.materialInventory)) {\n  item.materialInventory = item.materialInventory.map(material => {\n    const referenceData = materialReferenceData[material.materialId];\n    if (referenceData) {\n      return { ...material, ...referenceData };\n    }\n    return material;\n  });\n}\n\n// Add safety compliance reference data\nitem.safetyReferenceData = {\n  requiredComplianceRate: 95,\n  inspectionFrequency: 'daily',\n  regulatoryStandards: ['OSHA-1926', 'ANSI-A10.8', 'NFPA-241'],\n  emergencyContactName: 'John Safety-Officer',\n  emergencyContactPhone: '555-123-4567'\n};\n\nreturn [{ json: item }];"
          }
        },
        {
          "id": "45",
          "name": "Last Batch?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            900,
            850
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.splitInBatches }}",
                  "operation": "equal",
                  "value2": false
                }
              ]
            }
          }
        },
        {
          "id": "46",
          "name": "Continue Processing",
          "type": "n8n-nodes-base.noOp",
          "typeVersion": 1,
          "position": [
            1100,
            850
          ],
          "parameters": {}
        },
        {
          "id": "47",
          "name": "Aggregate Batch Results",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            850
          ],
          "parameters": {
            "functionCode": "// Aggregate all processed batches\nconst item = $input.item.json;\n\n// In a real scenario, this would combine data from all batches\n// For this example, we'll just use the current batch data\n\nconst summary = {\n  constructionSiteId: item.constructionSiteId,\n  processingCompleted: true,\n  timestamp: new Date().toISOString(),\n  batchesProcessed: true,\n  safetyStatus: item.safetyMetrics?.complianceStatus || 'UNKNOWN',\n  inventoryStatus: item.inventoryMetrics?.criticalStockCount > 0 ? 'NEEDS_ATTENTION' : 'ADEQUATE',\n  progressStatus: item.progressMetrics?.onSchedule ? 'ON_SCHEDULE' : 'BEHIND_SCHEDULE',\n  weatherImpact: item.weatherImpact?.affectsConstruction ? 'ADVERSE' : 'FAVORABLE',\n  alertCount: item.alerts?.length || 0,\n  requiresImmediate: item.hasCriticalAlerts || false\n};\n\nitem.processingComplete = true;\nitem.summary = summary;\n\nreturn [{ json: item }];"
          }
        },
        {
          "id": "48",
          "name": "Calculate Risk Score",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            850
          ],
          "parameters": {
            "functionCode": "// Calculate overall site risk score based on all metrics\nconst item = $input.item.json;\n\n// Initialize risk factors\nlet riskFactors = [];\nlet riskScore = 0;\n\n// Safety risk\nif (item.safetyMetrics) {\n  const safetyRisk = {\n    factor: 'Safety Compliance',\n    score: 0,\n    weight: 0.4 // Safety has highest weight\n  };\n  \n  if (item.safetyMetrics.complianceStatus === 'CRITICAL') {\n    safetyRisk.score = 10; // Highest risk\n  } else if (item.safetyMetrics.complianceStatus === 'WARNING') {\n    safetyRisk.score = 6;\n  } else {\n    safetyRisk.score = 2;\n  }\n  \n  safetyRisk.weightedScore = safetyRisk.score * safetyRisk.weight;\n  riskScore += safetyRisk.weightedScore;\n  riskFactors.push(safetyRisk);\n}\n\n// Inventory risk\nif (item.inventoryMetrics) {\n  const inventoryRisk = {\n    factor: 'Material Inventory',\n    score: 0,\n    weight: 0.2\n  };\n  \n  if (item.inventoryMetrics.criticalStockCount > 0) {\n    inventoryRisk.score = 8;\n  } else if (item.inventoryMetrics.lowStockCount > 0) {\n    inventoryRisk.score = 5;\n  } else {\n    inventoryRisk.score = 1;\n  }\n  \n  inventoryRisk.weightedScore = inventoryRisk.score * inventoryRisk.weight;\n  riskScore += inventoryRisk.weightedScore;\n  riskFactors.push(inventoryRisk);\n}\n\n// Progress risk\nif (item.progressMetrics) {\n  const progressRisk = {\n    factor: 'Project Schedule',\n    score: 0,\n    weight: 0.2\n  };\n  \n  if (!item.progressMetrics.onSchedule) {\n    progressRisk.score = 7;\n  } else {\n    progressRisk.score = 2;\n  }\n  \n  progressRisk.weightedScore = progressRisk.score * progressRisk.weight;\n  riskScore += progressRisk.weightedScore;\n  riskFactors.push(progressRisk);\n}\n\n// Weather risk\nif (item.weatherImpact) {\n  const weatherRisk = {\n    factor: 'Weather Conditions',\n    score: 0,\n    weight: 0.2\n  };\n  \n  if (item.weatherImpact.affectsConstruction) {\n    weatherRisk.score = 7;\n  } else {\n    weatherRisk.score = 1;\n  }\n  \n  weatherRisk.weightedScore = weatherRisk.score * weatherRisk.weight;\n  riskScore += weatherRisk.weightedScore;\n  riskFactors.push(weatherRisk);\n}\n\n// Determine overall risk level\nlet riskLevel;\nif (riskScore >= 7) {\n  riskLevel = 'HIGH';\n} else if (riskScore >= 4) {\n  riskLevel = 'MEDIUM';\n} else {\n  riskLevel = 'LOW';\n}\n\n// Add risk assessment to item\nitem.riskAssessment = {\n  overallRiskScore: parseFloat(riskScore.toFixed(2)),\n  riskLevel,\n  riskFactors,\n  recommendedActions: riskLevel === 'HIGH' ? [\n    'Immediate safety inspection required',\n    'Order critical inventory items',\n    'Review project schedule'\n  ] : riskLevel === 'MEDIUM' ? [\n    'Schedule safety review within 48 hours',\n    'Monitor inventory levels',\n    'Evaluate weather impact on schedule'\n  ] : [\n    'Continue regular monitoring',\n    'No immediate actions required'\n  ],\n  assessedAt: new Date().toISOString()\n};\n\nreturn [{ json: item }];"
          }
        },
        {
          "id": "49",
          "name": "Generate Insights",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            1000
          ],
          "parameters": {
            "functionCode": "// Generate actionable insights from processed data\nconst item = $input.item.json;\n\nlet insights = [];\n\n// Safety insights\nif (item.safetyMetrics) {\n  if (item.safetyMetrics.complianceStatus === 'CRITICAL') {\n    insights.push({\n      category: 'SAFETY',\n      priority: 'HIGH',\n      insight: 'Critical safety compliance issues require immediate attention',\n      recommendation: 'Deploy safety officer for immediate site inspection and corrective actions'\n    });\n  } else if (item.safetyMetrics.complianceStatus === 'WARNING') {\n    insights.push({\n      category: 'SAFETY',\n      priority: 'MEDIUM',\n      insight: 'Safety compliance is below target threshold',\n      recommendation: 'Schedule additional safety training and increase monitoring frequency'\n    });\n  } else {\n    insights.push({\n      category: 'SAFETY',\n      priority: 'LOW',\n      insight: 'Safety compliance is at acceptable levels',\n      recommendation: 'Maintain current safety protocols and monitoring'\n    });\n  }\n}\n\n// Inventory insights\nif (item.inventoryMetrics) {\n  if (item.inventoryMetrics.criticalStockCount > 0) {\n    insights.push({\n      category: 'INVENTORY',\n      priority: 'HIGH',\n      insight: `${item.inventoryMetrics.criticalStockCount} materials are below minimum required levels`,\n      recommendation: `Place immediate orders for: ${item.inventoryMetrics.criticalStockItems.join(', ')}`\n    });\n  } else if (item.inventoryMetrics.lowStockCount > 0) {\n    insights.push({\n      category: 'INVENTORY',\n      priority: 'MEDIUM',\n      insight: `${item.inventoryMetrics.lowStockCount} materials are approaching minimum levels`,\n      recommendation: 'Review procurement schedule and consider advancing orders'\n    });\n  } else {\n    insights.push({\n      category: 'INVENTORY',\n      priority: 'LOW',\n      insight: 'All material inventory levels are adequate',\n      recommendation: 'Continue with standard procurement schedule'\n    });\n  }\n}\n\n// Progress insights\nif (item.progressMetrics) {\n  if (!item.progressMetrics.onSchedule) {\n    insights.push({\n      category: 'PROGRESS',\n      priority: 'MEDIUM',\n      insight: 'Project is behind schedule',\n      recommendation: 'Review critical path and consider resource reallocation or schedule adjustment'\n    });\n  } else {\n    insights.push({\n      category: 'PROGRESS',\n      priority: 'LOW',\n      insight: 'Project is progressing according to schedule',\n      recommendation: 'Continue with current resource allocation and timeline'\n    });\n  }\n}\n\n// Weather insights\nif (item.weatherImpact) {\n  if (item.weatherImpact.affectsConstruction) {\n    insights.push({\n      category: 'WEATHER',\n      priority: 'MEDIUM',\n      insight: 'Current or forecasted weather conditions may impact construction activities',\n      recommendation: item.weatherImpact.safeForCraneOperation ? \n        'Adjust outdoor activities while maintaining crane operations' : \n        'Suspend crane operations and focus on indoor tasks'\n    });\n  } else {\n    insights.push({\n      category: 'WEATHER',\n      priority: 'LOW',\n      insight: 'Weather conditions are favorable for all construction activities',\n      recommendation: 'Proceed with all planned outdoor and indoor activities'\n    });\n  }\n}\n\n// Add insights to item\nitem.insights = insights;\nitem.highPriorityInsightsCount = insights.filter(i => i.priority === 'HIGH').length;\n\nreturn [{ json: item }];"
          }
        },
        {
          "id": "50",
          "name": "Prepare Final Output",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            1000
          ],
          "parameters": {
            "functionCode": "// Prepare final output with all processed data\nconst item = $input.item.json;\n\n// Create a well-structured output\nconst processedData = {\n  metadata: {\n    constructionSiteId: item.constructionSiteId,\n    processedAt: new Date().toISOString(),\n    dataTypes: []\n  },\n  summary: {\n    riskLevel: item.riskAssessment?.riskLevel || 'UNKNOWN',\n    riskScore: item.riskAssessment?.overallRiskScore || 0,\n    alertCount: item.alerts?.length || 0,\n    hasCriticalAlerts: item.hasCriticalAlerts || false,\n    highPriorityInsightsCount: item.highPriorityInsightsCount || 0,\n    requiresImmediate: (item.hasCriticalAlerts || item.riskAssessment?.riskLevel === 'HIGH') || false\n  },\n  metrics: {}\n};\n\n// Add safety data if available\nif (item.safetyMetrics) {\n  processedData.metadata.dataTypes.push('SAFETY');\n  processedData.metrics.safety = item.safetyMetrics;\n}\n\n// Add progress data if available\nif (item.progressMetrics) {\n  processedData.metadata.dataTypes.push('PROGRESS');\n  processedData.metrics.progress = item.progressMetrics;\n}\n\n// Add inventory data if available\nif (item.inventoryMetrics) {\n  processedData.metadata.dataTypes.push('INVENTORY');\n  processedData.metrics.inventory = item.inventoryMetrics;\n}\n\n// Add weather data if available\nif (item.weatherData) {\n  processedData.metadata.dataTypes.push('WEATHER');\n  processedData.metrics.weather = {\n    ...item.weatherData,\n    impact: item.weatherImpact\n  };\n}\n\n// Add alerts if any\nif (item.alerts && item.alerts.length > 0) {\n  processedData.alerts = item.alerts;\n}\n\n// Add insights if any\nif (item.insights && item.insights.length > 0) {\n  processedData.insights = item.insights;\n}\n\n// Add risk assessment if available\nif (item.riskAssessment) {\n  processedData.riskAssessment = item.riskAssessment;\n}\n\n// For error handling\nprocessedData.processingStatus = 'SUCCESS';\n\nreturn [{ json: processedData }];"
          }
        },
        {
          "id": "51",
          "name": "Merge Validation Errors",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            500,
            1000
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "52",
          "name": "Format Error Output",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            1000
          ],
          "parameters": {
            "functionCode": "// Format error output in consistent structure\nconst item = $input.item.json;\n\nconst errorOutput = {\n  metadata: {\n    constructionSiteId: item.constructionSiteId || 'UNKNOWN',\n    processedAt: new Date().toISOString(),\n    dataTypes: []\n  },\n  summary: {\n    status: 'ERROR',\n    errorCount: item.errors ? item.errors.length : 1\n  },\n  errors: item.errors || [{\n    message: 'Unknown validation error',\n    timestamp: new Date().toISOString()\n  }],\n  processingStatus: 'FAILED'\n};\n\nreturn [{ json: errorOutput }];"
          }
        },
        {
          "id": "53",
          "name": "Merge All Outputs",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            900,
            1000
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "54",
          "name": "Add Processing Metadata",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            1000
          ],
          "parameters": {
            "functionCode": "// Add final processing metadata\nconst item = $input.item.json;\n\n// Add execution metadata\nitem.executionMetadata = {\n  section: 'Data Processing',\n  executionId: `exec-${Date.now()}-${Math.floor(Math.random() * 1000)}`,\n  startTime: new Date().toISOString(),\n  processingTimeMs: Math.floor(Math.random() * 500) + 100, // Simulated processing time\n  nodeCount: 28,\n  status: item.processingStatus || 'SUCCESS'\n};\n\n// Add data lineage information\nitem.dataLineage = {\n  source: 'Construction Site Sensors and Systems',\n  processingSteps: [\n    'Data Validation',\n    'Type-specific Processing',\n    'Alert Detection',\n    'Data Enrichment',\n    'Risk Assessment',\n    'Insight Generation'\n  ],\n  nextSection: 'Reporting and Notification'\n};\n\nreturn [{ json: item }];"
          }
        },
        {
          "id": "55",
          "name": "Data Processing Complete",
          "type": "n8n-nodes-base.noOp",
          "typeVersion": 1,
          "position": [
            1300,
            1000
          ],
          "parameters": {}
        },
        {
          "id": "56",
          "name": "Cleanup Temporary Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            1000
          ],
          "parameters": {
            "functionCode": "// Clean up temporary processing data for final output\nconst item = $input.item.json;\n\n// Remove internal processing flags and temporary data\nconst cleanedItem = { ...item };\n\n// List of temporary properties to remove\nconst tempProps = [\n  'isValid',\n  'validationErrors',\n  'splitInBatches',\n  'processingComplete',\n  'unknownDataProcessed',\n  'formattedAlerts'\n];\n\n// Remove each temporary property\ntempProps.forEach(prop => {\n  if (prop in cleanedItem) {\n    delete cleanedItem[prop];\n  }\n});\n\n// Ensure the output has a status indicating processing is complete\ncleanedItem.status = 'PROCESSING_COMPLETE';\ncleanedItem.readyForNextSection = true;\n\nreturn [{ json: cleanedItem }];"
          }
        },
        {
          "id": "57",
          "name": "Start External Integrations",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            1150
          ],
          "parameters": {
            "functionCode": "// Initialize external integration process\nconst inputData = items[0].json;\nreturn [{\n  json: {\n    ...inputData,\n    integrationStart: new Date().toISOString(),\n    integrationsToRun: ['weather', 'supplier', 'equipment']\n  }\n}];"
          }
        },
        {
          "id": "58",
          "name": "Route External Integration",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            300,
            1150
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{$json.integrationType || $json.integrationsToRun[0]}}",
            "rules": [
              {
                "value2": "weather",
                "output": 0
              },
              {
                "value2": "supplier",
                "output": 1
              },
              {
                "value2": "equipment",
                "output": 2
              }
            ],
            "fallbackOutput": 3
          }
        },
        {
          "id": "59",
          "name": "Weather API Authentication",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            500,
            1150
          ],
          "parameters": {
            "url": "https://api.weatherapi.com/v1/auth",
            "method": "POST",
            "authentication": "genericCredentialType",
            "genericCredentialType": "weatherApiCredentials",
            "bodyParameters": {
              "parameters": [
                {
                  "name": "api_key",
                  "value": "={{$credentials.apiKey}}"
                }
              ]
            },
            "options": {
              "timeout": 5000
            }
          }
        },
        {
          "id": "60",
          "name": "Supplier API Authentication",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            700,
            1150
          ],
          "parameters": {
            "url": "https://api.constructionsupplier.com/auth",
            "method": "POST",
            "authentication": "genericCredentialType",
            "genericCredentialType": "supplierApiCredentials",
            "bodyParameters": {
              "parameters": [
                {
                  "name": "client_id",
                  "value": "={{$credentials.clientId}}"
                },
                {
                  "name": "client_secret",
                  "value": "={{$credentials.clientSecret}}"
                }
              ]
            },
            "options": {
              "timeout": 5000
            }
          }
        },
        {
          "id": "61",
          "name": "Equipment API Authentication",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            900,
            1150
          ],
          "parameters": {
            "url": "https://api.constructionequipment.com/v2/authenticate",
            "method": "POST",
            "authentication": "genericCredentialType",
            "genericCredentialType": "equipmentApiCredentials",
            "bodyParameters": {
              "parameters": [
                {
                  "name": "username",
                  "value": "={{$credentials.username}}"
                },
                {
                  "name": "password",
                  "value": "={{$credentials.password}}"
                }
              ]
            },
            "options": {
              "timeout": 5000
            }
          }
        },
        {
          "id": "62",
          "name": "Fetch Weather Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            1100,
            1150
          ],
          "parameters": {
            "url": "https://api.weatherapi.com/v1/forecast.json",
            "method": "GET",
            "authentication": "genericCredentialType",
            "genericCredentialType": "weatherApiCredentials",
            "queryParameters": {
              "parameters": [
                {
                  "name": "q",
                  "value": "={{$json.siteLocation || '40.7128,-74.0060'}}"
                },
                {
                  "name": "days",
                  "value": "3"
                },
                {
                  "name": "token",
                  "value": "={{$json.token}}"
                }
              ]
            },
            "options": {
              "timeout": 5000
            }
          }
        },
        {
          "id": "63",
          "name": "Fetch Supplier Inventory",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            1300,
            1150
          ],
          "parameters": {
            "url": "https://api.constructionsupplier.com/inventory",
            "method": "GET",
            "authentication": "genericCredentialType",
            "genericCredentialType": "supplierApiCredentials",
            "queryParameters": {
              "parameters": [
                {
                  "name": "project_id",
                  "value": "={{$json.projectId || 'DEFAULT_PROJECT'}}"
                },
                {
                  "name": "access_token",
                  "value": "={{$json.access_token}}"
                }
              ]
            },
            "options": {
              "timeout": 5000
            }
          }
        },
        {
          "id": "64",
          "name": "Fetch Equipment Status",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            1500,
            1150
          ],
          "parameters": {
            "url": "https://api.constructionequipment.com/v2/status",
            "method": "GET",
            "authentication": "genericCredentialType",
            "genericCredentialType": "equipmentApiCredentials",
            "queryParameters": {
              "parameters": [
                {
                  "name": "site_id",
                  "value": "={{$json.siteId || 'MAIN_SITE'}}"
                },
                {
                  "name": "auth_token",
                  "value": "={{$json.authToken}}"
                }
              ]
            },
            "options": {
              "timeout": 5000
            }
          }
        },
        {
          "id": "65",
          "name": "Validate Weather Response",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            100,
            1300
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{$json.error}}",
                  "operation": "exists"
                }
              ]
            }
          }
        },
        {
          "id": "66",
          "name": "Validate Supplier Response",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            300,
            1300
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{$json.status}}",
                  "value2": "error",
                  "operation": "equals"
                }
              ]
            }
          }
        },
        {
          "id": "67",
          "name": "Validate Equipment Response",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            500,
            1300
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{$json.success}}",
                  "value2": "false",
                  "operation": "equals"
                }
              ]
            }
          }
        },
        {
          "id": "68",
          "name": "Wait Before Weather Retry",
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1,
          "position": [
            700,
            1300
          ],
          "parameters": {
            "amount": 5,
            "unit": "seconds"
          }
        },
        {
          "id": "69",
          "name": "Wait Before Supplier Retry",
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1,
          "position": [
            900,
            1300
          ],
          "parameters": {
            "amount": 5,
            "unit": "seconds"
          }
        },
        {
          "id": "70",
          "name": "Wait Before Equipment Retry",
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1,
          "position": [
            1100,
            1300
          ],
          "parameters": {
            "amount": 5,
            "unit": "seconds"
          }
        },
        {
          "id": "71",
          "name": "Map Weather Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            1300
          ],
          "parameters": {
            "functionCode": "// Map weather data to standardized format\nconst data = items[0].json;\n\nreturn [{\n  json: {\n    sourceType: 'weather',\n    forecast: data.forecast?.forecastday?.map(day => ({\n      date: day.date,\n      maxTemp: day.day.maxtemp_c,\n      minTemp: day.day.mintemp_c,\n      precipitation: day.day.totalprecip_mm,\n      windSpeed: day.day.maxwind_kph,\n      condition: day.day.condition.text\n    })) || [],\n    current: {\n      temp: data.current?.temp_c,\n      humidity: data.current?.humidity,\n      windSpeed: data.current?.wind_kph,\n      condition: data.current?.condition?.text\n    },\n    suitableForConcrete: data.current?.temp_c > 5 && data.current?.temp_c < 32 && data.current?.humidity < 80,\n    suitableForOutdoorWork: !['Heavy rain', 'Thunderstorm', 'Blizzard'].includes(data.current?.condition?.text),\n    originalData: data\n  }\n}];"
          }
        },
        {
          "id": "72",
          "name": "Map Supplier Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            1300
          ],
          "parameters": {
            "functionCode": "// Map supplier data to standardized format\nconst data = items[0].json;\n\nreturn [{\n  json: {\n    sourceType: 'supplier',\n    inventory: data.items?.map(item => ({\n      id: item.id,\n      name: item.name,\n      quantity: item.quantity,\n      unit: item.unit,\n      status: item.quantity < item.reorderLevel ? 'low' : 'ok',\n      reorderNeeded: item.quantity < item.reorderLevel,\n      expectedDelivery: item.nextDelivery\n    })) || [],\n    lowStockItems: data.items?.filter(item => item.quantity < item.reorderLevel).length || 0,\n    totalItems: data.items?.length || 0,\n    lastUpdated: data.lastUpdated || new Date().toISOString(),\n    originalData: data\n  }\n}];"
          }
        },
        {
          "id": "73",
          "name": "Map Equipment Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            1450
          ],
          "parameters": {
            "functionCode": "// Map equipment data to standardized format\nconst data = items[0].json;\n\nreturn [{\n  json: {\n    sourceType: 'equipment',\n    equipment: data.equipment?.map(eq => ({\n      id: eq.id,\n      name: eq.name,\n      type: eq.type,\n      status: eq.operational ? 'operational' : 'maintenance',\n      location: eq.location,\n      lastMaintenance: eq.lastMaintenance,\n      nextMaintenance: eq.nextMaintenance,\n      operator: eq.currentOperator,\n      fuelLevel: eq.fuelPercentage\n    })) || [],\n    operationalCount: data.equipment?.filter(eq => eq.operational).length || 0,\n    maintenanceCount: data.equipment?.filter(eq => !eq.operational).length || 0,\n    criticalAlerts: data.alerts?.filter(alert => alert.severity === 'critical').length || 0,\n    originalData: data\n  }\n}];"
          }
        },
        {
          "id": "74",
          "name": "Combine External Data",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            300,
            1450
          ],
          "parameters": {
            "mode": "mergeByPosition"
          }
        },
        {
          "id": "75",
          "name": "Process External Integrations",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            1450
          ],
          "parameters": {
            "functionCode": "// Process and combine all external integration data\nconst results = {};\n\n// Group data by source type\nitems.forEach(item => {\n  if (item.json.sourceType) {\n    results[item.json.sourceType] = item.json;\n  }\n});\n\n// Create a comprehensive site status assessment\nconst weatherSuitable = results.weather?.suitableForOutdoorWork || false;\nconst materialStatus = results.supplier?.lowStockItems > 0 ? 'attention_needed' : 'good';\nconst equipmentStatus = results.equipment?.criticalAlerts > 0 ? 'critical' : 'normal';\n\nreturn [{\n  json: {\n    integrationsCompleted: Object.keys(results),\n    siteStatus: {\n      weather: {\n        suitable: weatherSuitable,\n        forecast: results.weather?.forecast || [],\n        current: results.weather?.current || {}\n      },\n      materials: {\n        status: materialStatus,\n        lowStockCount: results.supplier?.lowStockItems || 0,\n        inventory: results.supplier?.inventory || []\n      },\n      equipment: {\n        status: equipmentStatus,\n        operational: results.equipment?.operationalCount || 0,\n        maintenance: results.equipment?.maintenanceCount || 0,\n        equipment: results.equipment?.equipment || []\n      },\n      overallStatus: weatherSuitable && materialStatus !== 'critical' && equipmentStatus !== 'critical' ? 'operational' : 'issues_detected',\n      recommendations: []\n    },\n    timestamp: new Date().toISOString(),\n    rawData: results\n  }\n}];"
          }
        },
        {
          "id": "76",
          "name": "Classify Error",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            1450
          ],
          "parameters": {
            "functionCode": "// Classify the incoming error\nconst error = $input.all()[0].json.error || {};\nconst errorType = error.name || 'UnknownError';\nconst errorMessage = error.message || 'An unknown error occurred';\nconst errorStack = error.stack || '';\n\n// Classify error by type\nlet errorCategory = 'GENERAL';\nlet severity = 'MEDIUM';\nlet requiresImmediate = false;\n\nif (errorMessage.includes('API') || errorMessage.includes('HTTP') || errorMessage.includes('request')) {\n  errorCategory = 'EXTERNAL_SERVICE';\n  severity = 'HIGH';\n} else if (errorMessage.includes('timeout') || errorMessage.includes('timed out')) {\n  errorCategory = 'TIMEOUT';\n  severity = 'MEDIUM';\n} else if (errorMessage.includes('permission') || errorMessage.includes('access') || errorMessage.includes('auth')) {\n  errorCategory = 'AUTHENTICATION';\n  severity = 'HIGH';\n} else if (errorMessage.includes('database') || errorMessage.includes('DB') || errorMessage.includes('query')) {\n  errorCategory = 'DATABASE';\n  severity = 'CRITICAL';\n  requiresImmediate = true;\n} else if (errorMessage.includes('safety') || errorMessage.includes('emergency')) {\n  errorCategory = 'SAFETY_CRITICAL';\n  severity = 'CRITICAL';\n  requiresImmediate = true;\n}\n\nreturn [{\n  json: {\n    error,\n    errorType,\n    errorMessage,\n    errorCategory,\n    severity,\n    requiresImmediate,\n    timestamp: new Date().toISOString(),\n    constructionSite: $input.all()[0].json.constructionSite || 'UNKNOWN',\n    errorStack\n  }\n}];"
          }
        },
        {
          "id": "77",
          "name": "Determine Recovery Strategy",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            900,
            1450
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{ $json.errorCategory }}",
            "rules": [
              {
                "value2": "EXTERNAL_SERVICE",
                "output": 0
              },
              {
                "value2": "TIMEOUT",
                "output": 1
              },
              {
                "value2": "AUTHENTICATION",
                "output": 2
              },
              {
                "value2": "DATABASE",
                "output": 3
              },
              {
                "value2": "SAFETY_CRITICAL",
                "output": 4
              }
            ],
            "fallbackOutput": 5
          }
        },
        {
          "id": "78",
          "name": "Execute Fallback Processing",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            1450
          ],
          "parameters": {
            "functionCode": "// Implement recovery strategy based on error category\nconst { errorCategory, severity, requiresImmediate } = $input.all()[0].json;\n\n// Define recovery actions\nlet recoveryActions = [];\nlet recoverySuccessful = false;\nlet fallbackData = null;\n\nswitch (errorCategory) {\n  case 'EXTERNAL_SERVICE':\n    recoveryActions.push('Retry API call with exponential backoff');\n    recoveryActions.push('Switch to backup service if available');\n    fallbackData = { status: 'using_cached_data', lastUpdated: new Date(Date.now() - 3600000).toISOString() };\n    recoverySuccessful = true;\n    break;\n  \n  case 'TIMEOUT':\n    recoveryActions.push('Retry operation with increased timeout');\n    recoveryActions.push('Use simplified request with fewer parameters');\n    fallbackData = { status: 'partial_data_available', isComplete: false };\n    recoverySuccessful = true;\n    break;\n  \n  case 'AUTHENTICATION':\n    recoveryActions.push('Attempt to refresh authentication tokens');\n    recoveryActions.push('Switch to alternative credentials if available');\n    fallbackData = { status: 'auth_recovery_attempted', useBackupAuth: true };\n    recoverySuccessful = false; // Auth usually needs manual intervention\n    break;\n  \n  case 'DATABASE':\n    recoveryActions.push('Switch to read-only operations');\n    recoveryActions.push('Use in-memory cache if available');\n    fallbackData = { status: 'using_backup_storage', readOnly: true };\n    recoverySuccessful = severity !== 'CRITICAL';\n    break;\n  \n  case 'SAFETY_CRITICAL':\n    recoveryActions.push('Activate emergency protocols');\n    recoveryActions.push('Notify site safety officer immediately');\n    fallbackData = { status: 'emergency_protocol_activated', requiresHumanIntervention: true };\n    recoverySuccessful = false; // Safety issues always need human review\n    break;\n  \n  default:\n    recoveryActions.push('Apply general error recovery procedure');\n    fallbackData = { status: 'general_recovery_applied' };\n    recoverySuccessful = true;\n}\n\nreturn [{\n  json: {\n    ...$input.all()[0].json,\n    recoveryActions,\n    recoverySuccessful,\n    fallbackData,\n    recoveryTimestamp: new Date().toISOString()\n  }\n}];"
          }
        },
        {
          "id": "79",
          "name": "Log Error Details",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            1450
          ],
          "parameters": {
            "functionCode": "// Prepare comprehensive error log\nconst errorData = $input.all()[0].json;\n\n// Create structured log entry\nconst logEntry = {\n  timestamp: new Date().toISOString(),\n  errorId: `ERR-${Date.now()}-${Math.floor(Math.random() * 1000)}`,\n  errorType: errorData.errorType,\n  errorMessage: errorData.errorMessage,\n  errorCategory: errorData.errorCategory,\n  severity: errorData.severity,\n  constructionSite: errorData.constructionSite,\n  recoveryAttempted: true,\n  recoveryActions: errorData.recoveryActions,\n  recoverySuccessful: errorData.recoverySuccessful,\n  fallbackImplemented: !!errorData.fallbackData,\n  fallbackDetails: errorData.fallbackData,\n  errorStack: errorData.errorStack,\n  // Additional context that would be useful for debugging\n  context: {\n    workflow: 'Construction Site Safety and Progress Monitoring',\n    nodeId: $input.all()[0].json.nodeId || 'UNKNOWN',\n    executionId: $input.all()[0].json.executionId || 'UNKNOWN',\n    inputData: $input.all()[0].json.inputSample || 'NOT_AVAILABLE'\n  }\n};\n\n// In a real implementation, this would write to a database or logging service\nconsole.log('ERROR LOG:', JSON.stringify(logEntry, null, 2));\n\nreturn [{\n  json: {\n    ...errorData,\n    logEntry,\n    loggedAt: new Date().toISOString(),\n    logSuccess: true\n  }\n}];"
          }
        },
        {
          "id": "80",
          "name": "Notify Administrators",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            1500,
            1450
          ],
          "parameters": {
            "fromEmail": "{{ $json.requiresImmediate ? 'urgent-alerts@construction-monitor.com' : 'alerts@construction-monitor.com' }}",
            "toEmail": "{{ $json.requiresImmediate ? 'emergency@construction-site.com,admin@construction-site.com' : 'admin@construction-site.com' }}",
            "subject": "{{ $json.requiresImmediate ? '🚨 URGENT: ' : '⚠️ ' }}Construction Site Error: {{ $json.errorCategory }} - {{ $json.constructionSite }}",
            "text": "=Error Details:\n\nSite: {{ $json.constructionSite }}\nError Category: {{ $json.errorCategory }}\nSeverity: {{ $json.severity }}\nTimestamp: {{ $json.timestamp }}\nMessage: {{ $json.errorMessage }}\n\nRecovery Attempted: {{ $json.recoveryActions.join(', ') }}\nRecovery Status: {{ $json.recoverySuccessful ? 'Successful' : 'Failed' }}\n\nFallback Measure: {{ $json.fallbackData.status }}\n\n{{ $json.requiresImmediate ? 'IMMEDIATE ACTION REQUIRED!' : 'Please review when convenient.' }}\n\nError ID: {{ $json.logEntry.errorId }}\n\nThis is an automated message from the Construction Site Monitoring System.",
            "options": {
              "priority": "={{ $json.requiresImmediate ? 'high' : 'normal' }}"
            }
          }
        },
        {
          "id": "81",
          "name": "Collect Activity & Metrics",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            1600
          ],
          "parameters": {
            "functionCode": "// Collect all activity data and metrics from workflow execution\nconst inputData = $input.all();\nconst timestamp = new Date().toISOString();\n\nconst activityLog = {\n  timestamp,\n  workflowId: $workflow.id,\n  executionId: $execution.id,\n  operation: inputData[0]?.json?.operation || 'unknown',\n  duration: inputData[0]?.json?.duration || 0,\n  status: inputData[0]?.json?.status || 'completed',\n  metrics: {\n    responseTime: inputData[0]?.json?.responseTime || 0,\n    dataProcessed: inputData[0]?.json?.dataProcessed || 0,\n    resourceUsage: inputData[0]?.json?.resourceUsage || 'normal'\n  }\n};\n\nreturn [{ json: activityLog }];"
          }
        },
        {
          "id": "82",
          "name": "Check For Critical Events",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            300,
            1600
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.status }}",
                  "operation": "contains",
                  "value2": "error"
                }
              ],
              "or": [
                {
                  "number": [
                    {
                      "value1": "={{ $json.metrics.responseTime }}",
                      "operation": "larger",
                      "value2": 5000
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "83",
          "name": "Create Critical Audit Trail",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            1600
          ],
          "parameters": {
            "functionCode": "// Create detailed audit trail for critical events\nconst data = $input.item.json;\n\nconst criticalAudit = {\n  ...data,\n  auditLevel: 'CRITICAL',\n  alertRequired: true,\n  details: {\n    errorDetails: data.errorDetails || 'Performance threshold exceeded',\n    affectedSystems: data.affectedSystems || ['construction-monitoring'],\n    priority: 'high',\n    remediationSteps: [\n      'Check system logs',\n      'Verify sensor connectivity',\n      'Inspect affected construction area'\n    ]\n  }\n};\n\nreturn [{ json: criticalAudit }];"
          }
        },
        {
          "id": "84",
          "name": "Create Standard Audit Trail",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            1600
          ],
          "parameters": {
            "functionCode": "// Create standard audit trail for normal operations\nconst data = $input.item.json;\n\nconst standardAudit = {\n  ...data,\n  auditLevel: 'STANDARD',\n  alertRequired: false,\n  details: {\n    operationSummary: `Successfully processed ${data.operation} operation`,\n    performanceMetrics: {\n      responseTime: data.metrics.responseTime,\n      dataProcessed: data.metrics.dataProcessed,\n      resourceUsage: data.metrics.resourceUsage\n    },\n    recommendations: data.metrics.responseTime > 3000 ? ['Consider optimization'] : []\n  }\n};\n\nreturn [{ json: standardAudit }];"
          }
        },
        {
          "id": "85",
          "name": "Store Audit Trail & Metrics",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            1600
          ],
          "parameters": {
            "functionCode": "// Store audit trail and metrics in database (simulated)\nconst data = $input.item.json;\nconst timestamp = new Date().toISOString();\n\n// Prepare data for storage\nconst storageData = {\n  ...data,\n  storedAt: timestamp,\n  retentionPeriod: data.auditLevel === 'CRITICAL' ? '365 days' : '90 days',\n  storageReference: `audit-${$workflow.id}-${timestamp.replace(/[:.]/g, '-')}`,\n  dashboardReady: true,\n  notificationSent: data.alertRequired\n};\n\n// In a real scenario, this would connect to a database\n// For simulation, we'll just return the data that would be stored\nconsole.log(`Storing ${data.auditLevel} audit trail and metrics`);\n\nreturn [{ json: storageData }];"
          }
        }
      ],
      "connections": {
        "Schedule Trigger": {
          "main": [
            [
              {
                "node": "Central Router",
                "type": "main",
                "index": 0
              },
              {
                "node": "Central Router",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Central Router": {
          "main": [
            [
              {
                "node": "Safety Monitoring",
                "type": "main",
                "index": 0
              },
              {
                "node": "Process Safety Monitoring",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Safety Monitoring": {
          "main": [
            [
              {
                "node": "Progress Monitoring",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Progress Monitoring": {
          "main": [
            [
              {
                "node": "Inventory Management",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Inventory Management": {
          "main": [
            [
              {
                "node": "Environmental Monitoring",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Environmental Monitoring": {
          "main": [
            [
              {
                "node": "Unknown Task Handler",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Unknown Task Handler": {
          "main": [
            [
              {
                "node": "Merge Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Generate Report": {
          "main": [
            [
              {
                "node": "Email Report",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Safety Monitoring": {
          "main": [
            [
              {
                "node": "Process Progress Monitoring",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Progress Monitoring": {
          "main": [
            [
              {
                "node": "Process Environmental Monitoring",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Environmental Monitoring": {
          "main": [
            [
              {
                "node": "Merge All Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check For Critical Issues": {
          "main": [
            [
              {
                "node": "Send Critical Alert",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Critical Alert": {
          "main": [
            [
              {
                "node": "Generate Daily Report",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Error Handler": {
          "main": [
            [
              {
                "node": "Prepare Data for Validation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Prepare Data for Validation": {
          "main": [
            [
              {
                "node": "Schema Validation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Schema Validation": {
          "main": [
            [
              {
                "node": "Type Checking",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Type Checking": {
          "main": [
            [
              {
                "node": "Business Rule Validation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Sanitize Data": {
          "main": [
            [
              {
                "node": "Validation Decision",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validation Decision": {
          "main": [
            [
              {
                "node": "Format Validation Errors",
                "type": "main",
                "index": 0
              },
              {
                "node": "Format Validation Errors",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Validation Errors": {
          "main": [
            [
              {
                "node": "Prepare For Next Section",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Prepare For Next Section": {
          "main": [
            [
              {
                "node": "Receive Input Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Receive Input Data": {
          "main": [
            [
              {
                "node": "Validate Data Schema",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate Data Schema": {
          "main": [
            [
              {
                "node": "Is Data Valid?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Route By Data Type": {
          "main": [
            [
              {
                "node": "Process Safety Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Safety Data": {
          "main": [
            [
              {
                "node": "Process Progress Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Progress Data": {
          "main": [
            [
              {
                "node": "Process Inventory Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Inventory Data": {
          "main": [
            [
              {
                "node": "Process Unknown Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Unknown Data": {
          "main": [
            [
              {
                "node": "Merge Processed Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Processed Data": {
          "main": [
            [
              {
                "node": "Check For Alerts",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check For Alerts": {
          "main": [
            [
              {
                "node": "Has Alerts?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Alerts": {
          "main": [
            [
              {
                "node": "Split Into Batches",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Split Into Batches": {
          "main": [
            [
              {
                "node": "Enrich With Weather Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Enrich With Weather Data": {
          "main": [
            [
              {
                "node": "Enrich With Reference Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Enrich With Reference Data": {
          "main": [
            [
              {
                "node": "Last Batch?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Last Batch?": {
          "main": [
            [
              {
                "node": "Continue Processing",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Continue Processing": {
          "main": [
            [
              {
                "node": "Aggregate Batch Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Aggregate Batch Results": {
          "main": [
            [
              {
                "node": "Calculate Risk Score",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Generate Insights": {
          "main": [
            [
              {
                "node": "Prepare Final Output",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Prepare Final Output": {
          "main": [
            [
              {
                "node": "Merge Validation Errors",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Validation Errors": {
          "main": [
            [
              {
                "node": "Format Error Output",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Error Output": {
          "main": [
            [
              {
                "node": "Merge All Outputs",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge All Outputs": {
          "main": [
            [
              {
                "node": "Add Processing Metadata",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Add Processing Metadata": {
          "main": [
            [
              {
                "node": "Data Processing Complete",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Data Processing Complete": {
          "main": [
            [
              {
                "node": "Cleanup Temporary Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Start External Integrations": {
          "main": [
            [
              {
                "node": "Route External Integration",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Route External Integration": {
          "main": [
            [
              {
                "node": "Weather API Authentication",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Weather API Authentication": {
          "main": [
            [
              {
                "node": "Supplier API Authentication",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Supplier API Authentication": {
          "main": [
            [
              {
                "node": "Equipment API Authentication",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Equipment API Authentication": {
          "main": [
            [
              {
                "node": "Fetch Weather Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Weather Data": {
          "main": [
            [
              {
                "node": "Fetch Supplier Inventory",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Supplier Inventory": {
          "main": [
            [
              {
                "node": "Fetch Equipment Status",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate Weather Response": {
          "main": [
            [
              {
                "node": "Validate Supplier Response",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate Supplier Response": {
          "main": [
            [
              {
                "node": "Validate Equipment Response",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate Equipment Response": {
          "main": [
            [
              {
                "node": "Wait Before Weather Retry",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wait Before Weather Retry": {
          "main": [
            [
              {
                "node": "Wait Before Supplier Retry",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wait Before Supplier Retry": {
          "main": [
            [
              {
                "node": "Wait Before Equipment Retry",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wait Before Equipment Retry": {
          "main": [
            [
              {
                "node": "Map Weather Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Map Weather Data": {
          "main": [
            [
              {
                "node": "Map Supplier Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Map Equipment Data": {
          "main": [
            [
              {
                "node": "Combine External Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Combine External Data": {
          "main": [
            [
              {
                "node": "Process External Integrations",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process External Integrations": {
          "main": [
            [
              {
                "node": "Classify Error",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Classify Error": {
          "main": [
            [
              {
                "node": "Determine Recovery Strategy",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Determine Recovery Strategy": {
          "main": [
            [
              {
                "node": "Execute Fallback Processing",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Execute Fallback Processing": {
          "main": [
            [
              {
                "node": "Log Error Details",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Log Error Details": {
          "main": [
            [
              {
                "node": "Notify Administrators",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Collect Activity & Metrics": {
          "main": [
            [
              {
                "node": "Check For Critical Events",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check For Critical Events": {
          "main": [
            [
              {
                "node": "Create Critical Audit Trail",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create Critical Audit Trail": {
          "main": [
            [
              {
                "node": "Create Standard Audit Trail",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create Standard Audit Trail": {
          "main": [
            [
              {
                "node": "Store Audit Trail & Metrics",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {},
      "active": false
    },
    "provider": "anthropic",
    "model": "claude-3-7-sonnet-20250219",
    "timestamp": "2025-07-22T15:22:15.779Z",
    "nodeCount": 85,
    "connectionCount": 74
  },
  {
    "id": "b8089f7c-5c3a-42fd-b788-561006513697",
    "prompt": "To create a comprehensive n8n workflow that integrates all the features for Construction Site Safety and Progress Monitoring, we need to follow the critical orchestration architecture outlined in the given context. Here's a detailed plan for the workflow:\n\n### Workflow Entry Point\n- **Trigger Node:**\n  - **n8n-nodes-base.cron**: This node will serve as the main entry point to initialize daily and weekly tasks based on a predefined schedule.\n\n### Central Routing\n- **Central Router Node:**\n  - **n8n-nodes-base.switch**: This will route the workflow to the appropriate feature branches based on the scheduled task or event type (e.g., daily worker monitoring, weekly drone photography).\n\n### Feature Branches\n1. **Helmet and Seat Belt Monitoring with Cameras**\n   - **n8n-nodes-base.mqtt**: To receive real-time data from cameras.\n   - **n8n-nodes-base.httpRequest**: For processing camera data through an external AI service.\n   - **n8n-nodes-base.set**: To prepare data for alerts.\n   - **n8n-nodes-base.emailSend**: To notify site managers of any safety violations.\n\n2. **Daily Worker Entry and Exit and Timekeeping**\n   - **n8n-nodes-base.httpRequest**: To fetch data from biometric systems.\n   - **n8n-nodes-base.code**: To calculate working hours and identify discrepancies.\n   - **n8n-nodes-base.googleDrive**: To update daily attendance records.\n\n3. **Weekly Progress Photography with Drones**\n   - **n8n-nodes-base.executeCommand**: To control drone operations.\n   - **n8n-nodes-base.googleDrive**: To store and organize photographic evidence.\n\n4. **Weather Monitoring during Concrete Pouring**\n   - **n8n-nodes-base.httpRequest**: Fetch real-time weather data.\n   - **n8n-nodes-base.switch**: Decision node to halt operations if adverse weather is detected.\n   - **n8n-nodes-base.emailSend**: Notify construction managers.\n\n5. **Tower Crane Wind Sensors and Automatic Shutdown**\n   - **n8n-nodes-raspberry.raspberryPi**: To monitor wind sensor data.\n   - **n8n-nodes-base.code**: Logic to decide if shutdown is necessary.\n   - **n8n-nodes-base.emailSend**: Alert if shutdown occurs.\n\n6. **Material Stock Tracking and JIT Ordering**\n   - **n8n-nodes-base.httpRequest**: Fetch current stock levels.\n   - **n8n-nodes-base.code**: Calculate reorder quantities.\n   - **n8n-nodes-base.httpRequest**: Place orders automatically with suppliers.\n\n7. **Emergency Protocol in Case of Workplace Accidents**\n   - **n8n-nodes-base.errorTrigger**: To catch any accident alerts.\n   - **n8n-nodes-base.twilio**: Send SMS alerts to the emergency team.\n   - **n8n-nodes-base.emailSend**: Detailed email reports to management.\n\n8. **Night Security Patrol Route Tracking**\n   - **n8n-nodes-base.httpRequest**: Fetch GPS tracking data.\n   - **n8n-nodes-base.code**: Verify patrol routes and time.\n   - **n8n-nodes-base.emailSend**: Report deviations to security head.\n\n9. **Neighboring Building Vibration Sensor Monitoring**\n   - **n8n-nodes-base.mqtt**: Receive vibration data.\n   - **n8n-nodes-base.code**: Analyze for any abnormal activity.\n   - **n8n-nodes-base.emailSend**: Notify if thresholds are crossed.\n\n10. **Contractor Progress Payment Photo Documentation**\n    - **n8n-nodes-base.googleDrive**: Store and organize photo documentation.\n    - **n8n-nodes-base.httpRequest**: Send photo documentation to the payment processing system.\n\n### Central Merge Node\n- **n8n-nodes-base.merge**: Combine results from all feature branches to prepare a comprehensive daily report.\n\n### Final Processing/Response\n- **n8n-nodes-base.emailSend**: Send a compiled report to project managers and stakeholders.\n- **n8n-nodes-base.googleDrive**: Archive all data for compliance and future reference.\n\n### Error Handling Implementation\n- **n8n-nodes-base.errorTrigger**: Global error catching node.\n- **n8n-nodes-base.emailSend**: Send detailed error notifications to the IT team.\n- **n8n-nodes-base.code**: Logic to attempt recovery or fallback procedures.\n\n### Final Validation Checklist\n- Ensure all nodes are properly connected with no orphaned nodes.\n- Verify that each feature branch properly merges back into the central flow.\n- Confirm that error handling is comprehensive and effective.\n- Validate that all data flows are logical and efficient, with proper use of merge nodes after parallel branches.\n- Ensure that all analysis results are actionable and reported/visualized where necessary.\n\nThis setup ensures a robust and comprehensive workflow for managing construction site safety and progress monitoring effectively.",
    "workflow": {
      "name": "Site Safety and Progress44",
      "nodes": [
        {
          "id": "1",
          "name": "Schedule Trigger",
          "type": "n8n-nodes-base.cron",
          "typeVersion": 1,
          "position": [
            100,
            100
          ],
          "parameters": {
            "triggerTimes": {
              "item": [
                {
                  "mode": "everyDay"
                }
              ]
            }
          }
        },
        {
          "id": "2",
          "name": "Central Router",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            300,
            100
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{ $json.taskType }}",
            "rules": {
              "rules": [
                {
                  "value2": "safetyMonitoring",
                  "output": 0
                },
                {
                  "value2": "workerTracking",
                  "output": 1
                },
                {
                  "value2": "dronePhotography",
                  "output": 2
                },
                {
                  "value2": "materialTracking",
                  "output": 3
                },
                {
                  "value2": "securityPatrol",
                  "output": 4
                }
              ]
            },
            "fallbackOutput": 5
          }
        },
        {
          "id": "3",
          "name": "Process Safety Monitoring",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            100
          ],
          "parameters": {
            "functionCode": "// Process safety monitoring data\nconst data = $input.item.json;\n\n// Simulate processing helmet and seatbelt camera data\nconst safetyViolations = [];\nif (Math.random() > 0.7) {\n  safetyViolations.push({\n    type: 'missing_helmet',\n    location: 'Zone B',\n    timestamp: new Date().toISOString(),\n    severity: 'high'\n  });\n}\n\nreturn [{\n  json: {\n    taskType: 'safetyMonitoring',\n    processed: true,\n    timestamp: new Date().toISOString(),\n    violations: safetyViolations,\n    status: safetyViolations.length > 0 ? 'violations_detected' : 'all_clear'\n  }\n}];"
          }
        },
        {
          "id": "4",
          "name": "Process Worker Tracking",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            100
          ],
          "parameters": {
            "functionCode": "// Process worker entry/exit data\nconst data = $input.item.json;\n\n// Simulate processing biometric data\nconst workers = [\n  { id: 'W001', name: 'John Doe', entryTime: '08:00', exitTime: '17:30', hoursWorked: 9.5 },\n  { id: 'W002', name: 'Jane Smith', entryTime: '07:45', exitTime: '16:15', hoursWorked: 8.5 },\n  { id: 'W003', name: 'Bob Johnson', entryTime: '08:15', exitTime: null, hoursWorked: null }\n];\n\n// Identify discrepancies\nconst discrepancies = workers.filter(w => !w.exitTime || w.hoursWorked === null);\n\nreturn [{\n  json: {\n    taskType: 'workerTracking',\n    processed: true,\n    timestamp: new Date().toISOString(),\n    workers,\n    totalWorkers: workers.length,\n    discrepancies,\n    status: discrepancies.length > 0 ? 'discrepancies_found' : 'all_accounted'\n  }\n}];"
          }
        },
        {
          "id": "5",
          "name": "Process Drone Photography",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            100
          ],
          "parameters": {
            "functionCode": "// Process weekly drone photography\nconst data = $input.item.json;\n\n// Simulate drone photography processing\nconst today = new Date();\nconst isWeekly = today.getDay() === 5; // Friday\n\nlet droneData;\nif (isWeekly) {\n  droneData = {\n    flightCompleted: true,\n    photosTaken: 124,\n    coverageArea: '95%',\n    weatherConditions: 'Clear',\n    windSpeed: '8 km/h',\n    photoStoragePath: '/drone-photos/' + today.toISOString().split('T')[0],\n    progressEstimate: '87%'\n  };\n} else {\n  droneData = {\n    flightCompleted: false,\n    reason: 'Not scheduled for today',\n    nextScheduledFlight: 'Friday'\n  };\n}\n\nreturn [{\n  json: {\n    taskType: 'dronePhotography',\n    processed: true,\n    timestamp: new Date().toISOString(),\n    isWeekly,\n    droneData,\n    status: droneData.flightCompleted ? 'completed' : 'skipped'\n  }\n}];"
          }
        },
        {
          "id": "6",
          "name": "Process Material Tracking",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            100
          ],
          "parameters": {
            "functionCode": "// Process material stock tracking\nconst data = $input.item.json;\n\n// Simulate material inventory check\nconst materials = [\n  { id: 'M001', name: 'Cement', currentStock: 250, minLevel: 100, unit: 'bags', status: 'adequate' },\n  { id: 'M002', name: 'Steel Rebar', currentStock: 45, minLevel: 50, unit: 'tons', status: 'low' },\n  { id: 'M003', name: 'Bricks', currentStock: 3500, minLevel: 1000, unit: 'pieces', status: 'adequate' },\n  { id: 'M004', name: 'Sand', currentStock: 15, minLevel: 20, unit: 'cubic meters', status: 'critical' }\n];\n\n// Identify low stock items\nconst lowStock = materials.filter(m => m.currentStock < m.minLevel);\n\n// Generate order recommendations\nconst orderRecommendations = lowStock.map(item => ({\n  materialId: item.id,\n  materialName: item.name,\n  currentStock: item.currentStock,\n  recommendedOrderQuantity: item.minLevel * 2 - item.currentStock,\n  unit: item.unit,\n  urgency: item.status === 'critical' ? 'high' : 'medium'\n}));\n\nreturn [{\n  json: {\n    taskType: 'materialTracking',\n    processed: true,\n    timestamp: new Date().toISOString(),\n    materials,\n    lowStock,\n    orderRecommendations,\n    status: lowStock.length > 0 ? 'reorder_needed' : 'stock_adequate'\n  }\n}];"
          }
        },
        {
          "id": "7",
          "name": "Process Security Patrol",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            100
          ],
          "parameters": {
            "functionCode": "// Process night security patrol data\nconst data = $input.item.json;\n\n// Simulate security patrol tracking\nconst now = new Date();\nconst isNightTime = now.getHours() >= 20 || now.getHours() <= 5;\n\nlet patrolData;\nif (isNightTime) {\n  patrolData = {\n    guardId: 'G004',\n    guardName: 'Mike Wilson',\n    checkpoints: [\n      { id: 'CP1', name: 'Main Gate', timeChecked: new Date(now - 45*60000).toISOString(), status: 'verified' },\n      { id: 'CP2', name: 'Storage Area', timeChecked: new Date(now - 30*60000).toISOString(), status: 'verified' },\n      { id: 'CP3', name: 'Tower Crane', timeChecked: null, status: 'missed' },\n      { id: 'CP4', name: 'Office Trailer', timeChecked: new Date(now - 15*60000).toISOString(), status: 'verified' }\n    ],\n    routeCompliance: '75%',\n    incidents: []\n  };\n} else {\n  patrolData = {\n    status: 'not_active',\n    reason: 'Day time - no night patrol active',\n    nextPatrol: new Date(now.setHours(20, 0, 0, 0)).toISOString()\n  };\n}\n\n// Check for missed checkpoints\nlet missedCheckpoints = [];\nif (patrolData.checkpoints) {\n  missedCheckpoints = patrolData.checkpoints.filter(cp => cp.status === 'missed');\n}\n\nreturn [{\n  json: {\n    taskType: 'securityPatrol',\n    processed: true,\n    timestamp: new Date().toISOString(),\n    isNightTime,\n    patrolData,\n    missedCheckpoints,\n    status: missedCheckpoints.length > 0 ? 'checkpoints_missed' : (isNightTime ? 'patrol_active' : 'no_patrol')\n  }\n}];"
          }
        },
        {
          "id": "8",
          "name": "Handle Unknown Task",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            100
          ],
          "parameters": {
            "functionCode": "// Handle unknown task types\nconst data = $input.item.json;\n\nreturn [{\n  json: {\n    taskType: 'unknown',\n    processed: false,\n    timestamp: new Date().toISOString(),\n    error: 'Unknown task type',\n    originalData: data,\n    status: 'error'\n  }\n}];"
          }
        },
        {
          "id": "9",
          "name": "Merge All Results",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            100,
            250
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "10",
          "name": "Generate Daily Report",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            250
          ],
          "parameters": {
            "functionCode": "// Generate comprehensive daily report\nconst data = $input.all();\n\n// Collect all processed data\nconst processedTasks = data.map(item => item.json);\n\n// Identify critical issues\nconst criticalIssues = processedTasks.filter(task => {\n  if (task.taskType === 'safetyMonitoring' && task.violations && task.violations.length > 0) return true;\n  if (task.taskType === 'materialTracking' && task.lowStock && task.lowStock.some(item => item.status === 'critical')) return true;\n  if (task.taskType === 'securityPatrol' && task.missedCheckpoints && task.missedCheckpoints.length > 0) return true;\n  return false;\n});\n\n// Create summary\nconst summary = {\n  reportDate: new Date().toISOString(),\n  tasksProcessed: processedTasks.length,\n  criticalIssuesCount: criticalIssues.length,\n  safetyStatus: processedTasks.find(t => t.taskType === 'safetyMonitoring')?.status || 'not_processed',\n  workerStatus: processedTasks.find(t => t.taskType === 'workerTracking')?.status || 'not_processed',\n  materialStatus: processedTasks.find(t => t.taskType === 'materialTracking')?.status || 'not_processed',\n  droneStatus: processedTasks.find(t => t.taskType === 'dronePhotography')?.status || 'not_processed',\n  securityStatus: processedTasks.find(t => t.taskType === 'securityPatrol')?.status || 'not_processed',\n  requiresAttention: criticalIssues.length > 0\n};\n\n// Create detailed report\nconst detailedReport = {\n  summary,\n  criticalIssues,\n  allTasks: processedTasks,\n  recommendations: [\n    ...processedTasks.find(t => t.taskType === 'materialTracking')?.orderRecommendations || [],\n    ...criticalIssues.map(issue => {\n      if (issue.taskType === 'safetyMonitoring') {\n        return {\n          type: 'safety',\n          action: 'Conduct immediate safety briefing',\n          priority: 'high'\n        };\n      }\n      if (issue.taskType === 'securityPatrol') {\n        return {\n          type: 'security',\n          action: 'Review security patrol routes and compliance',\n          priority: 'medium'\n        };\n      }\n      return null;\n    }).filter(Boolean)\n  ]\n};\n\nreturn [{\n  json: detailedReport\n}];"
          }
        },
        {
          "id": "11",
          "name": "Schedule Trigger",
          "type": "n8n-nodes-base.cron",
          "typeVersion": 1,
          "position": [
            500,
            250
          ],
          "parameters": {
            "triggerTimes": {
              "item": [
                {
                  "mode": "everyDay"
                }
              ]
            }
          }
        },
        {
          "id": "12",
          "name": "Central Router",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            700,
            250
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{ $json.taskType }}",
            "rules": {
              "rules": [
                {
                  "value2": "safetyMonitoring",
                  "output": 0
                },
                {
                  "value2": "workerTracking",
                  "output": 1
                },
                {
                  "value2": "dronePhotography",
                  "output": 2
                },
                {
                  "value2": "materialStock",
                  "output": 3
                }
              ]
            },
            "fallbackOutput": 4
          }
        },
        {
          "id": "13",
          "name": "Process Safety Monitoring",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            250
          ],
          "parameters": {
            "functionCode": "// Process helmet and seatbelt monitoring data\nconst data = $input.item.json;\n\n// Simulate processing camera data for safety violations\nconst processed = {\n  ...data,\n  safetyStatus: 'processed',\n  violations: Math.random() > 0.7 ? ['missing_helmet', 'no_seatbelt'] : [],\n  timestamp: new Date().toISOString()\n};\n\nreturn [{json: processed}];"
          }
        },
        {
          "id": "14",
          "name": "Process Worker Tracking",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            250
          ],
          "parameters": {
            "functionCode": "// Process worker entry/exit and timekeeping\nconst data = $input.item.json;\n\n// Simulate processing biometric data\nconst processed = {\n  ...data,\n  trackingStatus: 'processed',\n  workHours: Math.floor(Math.random() * 10) + 6,\n  entryTime: '08:00',\n  exitTime: '17:00',\n  timestamp: new Date().toISOString()\n};\n\nreturn [{json: processed}];"
          }
        },
        {
          "id": "15",
          "name": "Process Drone Photography",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            250
          ],
          "parameters": {
            "functionCode": "// Process weekly drone photography data\nconst data = $input.item.json;\n\n// Simulate processing drone photos\nconst processed = {\n  ...data,\n  droneStatus: 'processed',\n  photosTaken: Math.floor(Math.random() * 50) + 20,\n  coverageArea: Math.floor(Math.random() * 100) + 50 + '%',\n  timestamp: new Date().toISOString()\n};\n\nreturn [{json: processed}];"
          }
        },
        {
          "id": "16",
          "name": "Process Material Stock",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            250
          ],
          "parameters": {
            "functionCode": "// Process material stock tracking and JIT ordering\nconst data = $input.item.json;\n\n// Simulate processing inventory data\nconst processed = {\n  ...data,\n  stockStatus: 'processed',\n  currentStock: {\n    cement: Math.floor(Math.random() * 100),\n    steel: Math.floor(Math.random() * 100),\n    timber: Math.floor(Math.random() * 100)\n  },\n  reorderNeeded: Math.random() > 0.7,\n  timestamp: new Date().toISOString()\n};\n\nreturn [{json: processed}];"
          }
        },
        {
          "id": "17",
          "name": "Handle Unknown Task",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            400
          ],
          "parameters": {
            "functionCode": "// Handle unknown task types\nconst data = $input.item.json;\n\n// Log the unknown task\nconst processed = {\n  ...data,\n  status: 'unknown_task',\n  message: `Unknown task type: ${data.taskType || 'not specified'}`,\n  timestamp: new Date().toISOString()\n};\n\nreturn [{json: processed}];"
          }
        },
        {
          "id": "18",
          "name": "Merge All Results",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            300,
            400
          ],
          "parameters": {
            "mode": "append"
          }
        },
        {
          "id": "19",
          "name": "Generate Daily Report",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            400
          ],
          "parameters": {
            "functionCode": "// Generate comprehensive daily report\nconst data = $input.all();\nconst items = data.map(item => item.json);\n\n// Check for critical issues\nconst safetyViolations = items.filter(item => item.violations && item.violations.length > 0);\nconst lowStock = items.filter(item => item.reorderNeeded === true);\nconst hasCriticalIssues = safetyViolations.length > 0 || lowStock.length > 0;\n\n// Create summary report\nconst report = {\n  date: new Date().toISOString().split('T')[0],\n  totalTasksProcessed: items.length,\n  safetyViolations: safetyViolations.length,\n  workersTracked: items.filter(item => item.trackingStatus === 'processed').length,\n  dronePhotos: items.find(item => item.droneStatus === 'processed')?.photosTaken || 0,\n  lowStockItems: lowStock.map(item => item.currentStock).filter(Boolean),\n  hasCriticalIssues,\n  unknownTasks: items.filter(item => item.status === 'unknown_task').length\n};\n\nreturn [{json: report}];"
          }
        },
        {
          "id": "20",
          "name": "Error Trigger",
          "type": "n8n-nodes-base.errorTrigger",
          "typeVersion": 1,
          "position": [
            700,
            400
          ],
          "parameters": {}
        },
        {
          "id": "21",
          "name": "Prepare Data for Validation",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            400
          ],
          "parameters": {
            "functionCode": "// Prepare incoming data for validation\nconst inputData = $input.item.json;\n\n// Ensure we have an object to work with\nif (!inputData) {\n  return [{\n    json: {\n      originalData: {},\n      validationReady: false,\n      error: 'No input data provided'\n    }\n  }];\n}\n\n// Create a standardized format for validation\nconst validationData = {\n  originalData: inputData,\n  validationReady: true,\n  schemaValidated: false,\n  typeValidated: false,\n  businessRulesValidated: false,\n  sanitized: false,\n  errors: []\n};\n\nreturn [{ json: validationData }];"
          }
        },
        {
          "id": "22",
          "name": "Schema Validation",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            400
          ],
          "parameters": {
            "functionCode": "// Perform schema validation\nconst data = $input.item.json;\nconst originalData = data.originalData;\nconst errors = [];\n\n// Required fields check\nconst requiredFields = ['taskType', 'timestamp', 'siteId'];\nrequiredFields.forEach(field => {\n  if (originalData[field] === undefined) {\n    errors.push(`Missing required field: ${field}`);\n  }\n});\n\n// Schema structure validation based on task type\nif (originalData.taskType === 'safetyMonitoring') {\n  if (!originalData.sensorData || !Array.isArray(originalData.sensorData)) {\n    errors.push('Safety monitoring requires sensorData array');\n  }\n} else if (originalData.taskType === 'workerTracking') {\n  if (!originalData.workers || !Array.isArray(originalData.workers)) {\n    errors.push('Worker tracking requires workers array');\n  }\n} else if (originalData.taskType === 'dronePhotography') {\n  if (!originalData.imageUrls || !Array.isArray(originalData.imageUrls)) {\n    errors.push('Drone photography requires imageUrls array');\n  }\n}\n\n// Update validation status\ndata.schemaValidated = errors.length === 0;\ndata.errors = [...data.errors, ...errors];\n\nreturn [{ json: data }];"
          }
        },
        {
          "id": "23",
          "name": "Type Checking",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            400
          ],
          "parameters": {
            "functionCode": "// Perform type checking on the data\nconst data = $input.item.json;\nconst originalData = data.originalData;\nconst errors = [];\n\n// Check timestamp is a valid date\nif (originalData.timestamp && isNaN(Date.parse(originalData.timestamp))) {\n  errors.push('timestamp must be a valid date string');\n}\n\n// Check siteId is a string\nif (originalData.siteId && typeof originalData.siteId !== 'string') {\n  errors.push('siteId must be a string');\n}\n\n// Type checking based on task type\nif (originalData.taskType === 'safetyMonitoring' && Array.isArray(originalData.sensorData)) {\n  originalData.sensorData.forEach((sensor, index) => {\n    if (typeof sensor.value !== 'number') {\n      errors.push(`Sensor ${index}: value must be a number`);\n    }\n    if (typeof sensor.location !== 'string') {\n      errors.push(`Sensor ${index}: location must be a string`);\n    }\n  });\n} else if (originalData.taskType === 'materialStock' && originalData.inventory) {\n  if (typeof originalData.inventory.currentLevel !== 'number') {\n    errors.push('Inventory currentLevel must be a number');\n  }\n  if (typeof originalData.inventory.threshold !== 'number') {\n    errors.push('Inventory threshold must be a number');\n  }\n}\n\n// Update validation status\ndata.typeValidated = errors.length === 0;\ndata.errors = [...data.errors, ...errors];\n\nreturn [{ json: data }];"
          }
        },
        {
          "id": "24",
          "name": "Business Rule Validation",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            400
          ],
          "parameters": {
            "functionCode": "// Perform business rule validation\nconst data = $input.item.json;\nconst originalData = data.originalData;\nconst errors = [];\n\n// Check that timestamp is not in the future\nif (originalData.timestamp) {\n  const timestamp = new Date(originalData.timestamp);\n  const now = new Date();\n  if (timestamp > now) {\n    errors.push('timestamp cannot be in the future');\n  }\n}\n\n// Business rules based on task type\nif (originalData.taskType === 'safetyMonitoring' && Array.isArray(originalData.sensorData)) {\n  // Check safety thresholds\n  originalData.sensorData.forEach((sensor, index) => {\n    if (sensor.type === 'temperature' && sensor.value > 40) {\n      errors.push(`Warning: Temperature sensor ${index} exceeds safety threshold`);\n    }\n    if (sensor.type === 'wind' && sensor.value > 30) {\n      errors.push(`Warning: Wind sensor ${index} exceeds crane safety threshold`);\n    }\n  });\n} else if (originalData.taskType === 'materialStock' && originalData.inventory) {\n  // Check if inventory is below threshold\n  if (originalData.inventory.currentLevel < originalData.inventory.threshold) {\n    // This is a warning, not an error that invalidates the data\n    data.warnings = data.warnings || [];\n    data.warnings.push(`Inventory level below threshold: ${originalData.inventory.currentLevel} < ${originalData.inventory.threshold}`);\n  }\n}\n\n// Update validation status\ndata.businessRulesValidated = true; // Warnings don't invalidate data\ndata.errors = [...data.errors, ...errors];\n\nreturn [{ json: data }];"
          }
        },
        {
          "id": "25",
          "name": "Sanitize Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            550
          ],
          "parameters": {
            "functionCode": "// Sanitize data to prevent injection and ensure data quality\nconst data = $input.item.json;\nconst originalData = data.originalData;\nconst sanitizedData = JSON.parse(JSON.stringify(originalData)); // Deep clone\n\n// Helper function to sanitize strings\nfunction sanitizeString(str) {\n  if (typeof str !== 'string') return str;\n  // Remove any HTML/script tags\n  return str.replace(/<[^>]*>/g, '')\n    // Trim whitespace\n    .trim()\n    // Limit length\n    .substring(0, 1000);\n}\n\n// Sanitize common fields\nif (sanitizedData.siteId) {\n  sanitizedData.siteId = sanitizeString(sanitizedData.siteId);\n}\n\nif (sanitizedData.notes) {\n  sanitizedData.notes = sanitizeString(sanitizedData.notes);\n}\n\n// Sanitize arrays based on task type\nif (sanitizedData.taskType === 'safetyMonitoring' && Array.isArray(sanitizedData.sensorData)) {\n  sanitizedData.sensorData = sanitizedData.sensorData.map(sensor => ({\n    ...sensor,\n    location: sanitizeString(sensor.location),\n    type: sanitizeString(sensor.type),\n    // Ensure numeric values are within reasonable ranges\n    value: typeof sensor.value === 'number' ? \n      Math.max(-1000, Math.min(1000, sensor.value)) : \n      sensor.value\n  }));\n} else if (sanitizedData.taskType === 'workerTracking' && Array.isArray(sanitizedData.workers)) {\n  sanitizedData.workers = sanitizedData.workers.map(worker => ({\n    ...worker,\n    name: sanitizeString(worker.name),\n    position: sanitizeString(worker.position),\n    // Sanitize other worker fields as needed\n  }));\n}\n\n// Update data with sanitized version\ndata.sanitizedData = sanitizedData;\ndata.sanitized = true;\n\nreturn [{ json: data }];"
          }
        },
        {
          "id": "26",
          "name": "Validation Decision",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            300,
            550
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.errors.length }}",
                  "operation": "equal",
                  "value2": "0"
                }
              ]
            }
          }
        },
        {
          "id": "27",
          "name": "Format Validation Errors",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            550
          ],
          "parameters": {
            "functionCode": "// Format validation errors for response\nconst data = $input.item.json;\n\nconst response = {\n  valid: false,\n  taskType: data.originalData.taskType || 'unknown',\n  timestamp: new Date().toISOString(),\n  errors: data.errors,\n  message: 'Validation failed. Please correct the errors and try again.'\n};\n\n// Add warnings if any exist\nif (data.warnings && data.warnings.length > 0) {\n  response.warnings = data.warnings;\n}\n\nreturn [{ json: response }];"
          }
        },
        {
          "id": "28",
          "name": "Prepare For Next Section",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            550
          ],
          "parameters": {
            "functionCode": "// Prepare validated data for the next workflow section\nconst data = $input.item.json;\n\n// Use sanitized data for further processing\nconst processedData = {\n  valid: true,\n  taskType: data.originalData.taskType,\n  timestamp: data.originalData.timestamp,\n  siteId: data.originalData.siteId,\n  // Use sanitized data for further processing\n  data: data.sanitizedData,\n  // Include any warnings that didn't invalidate the data\n  warnings: data.warnings || []\n};\n\n// Add metadata about the validation process\nprocessedData.validationMeta = {\n  schemaValidated: data.schemaValidated,\n  typeValidated: data.typeValidated,\n  businessRulesValidated: data.businessRulesValidated,\n  sanitized: data.sanitized,\n  validatedAt: new Date().toISOString()\n};\n\nreturn [{ json: processedData }];"
          }
        },
        {
          "id": "29",
          "name": "Data Processing Entry Point",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            550
          ],
          "parameters": {
            "functionCode": "// Initialize data processing section\nconst inputData = $input.all();\nreturn inputData.map(item => {\n  return {\n    json: {\n      ...item.json,\n      processingStarted: new Date().toISOString(),\n      processingStage: 'initialized'\n    }\n  };\n});"
          }
        },
        {
          "id": "30",
          "name": "Route By Data Type",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            1100,
            550
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{ $json.dataType }}",
            "rules": {
              "rules": [
                {
                  "value2": "safety",
                  "output": 0
                },
                {
                  "value2": "progress",
                  "output": 1
                },
                {
                  "value2": "inventory",
                  "output": 2
                },
                {
                  "value2": "weather",
                  "output": 3
                }
              ]
            },
            "fallbackOutput": 4
          }
        },
        {
          "id": "31",
          "name": "Transform Safety Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            550
          ],
          "parameters": {
            "functionCode": "// Transform safety data\nconst items = $input.all();\nreturn items.map(item => {\n  const data = item.json;\n  return {\n    json: {\n      ...data,\n      processingStage: 'transformed',\n      safetyScore: data.violations ? 100 - (data.violations * 10) : 100,\n      riskLevel: data.violations > 5 ? 'high' : data.violations > 2 ? 'medium' : 'low',\n      transformedAt: new Date().toISOString()\n    }\n  };\n});"
          }
        },
        {
          "id": "32",
          "name": "Transform Progress Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            550
          ],
          "parameters": {
            "functionCode": "// Transform progress data\nconst items = $input.all();\nreturn items.map(item => {\n  const data = item.json;\n  const completionRate = (data.completedTasks / data.totalTasks) * 100;\n  return {\n    json: {\n      ...data,\n      processingStage: 'transformed',\n      completionPercentage: Math.round(completionRate),\n      isOnSchedule: completionRate >= data.expectedProgress,\n      variance: completionRate - data.expectedProgress,\n      transformedAt: new Date().toISOString()\n    }\n  };\n});"
          }
        },
        {
          "id": "33",
          "name": "Transform Inventory Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            700
          ],
          "parameters": {
            "functionCode": "// Transform inventory data\nconst items = $input.all();\nreturn items.map(item => {\n  const data = item.json;\n  return {\n    json: {\n      ...data,\n      processingStage: 'transformed',\n      needsReorder: data.currentStock < data.reorderThreshold,\n      daysRemaining: Math.round(data.currentStock / data.dailyUsage),\n      orderQuantity: data.needsReorder ? Math.max(data.optimalStock - data.currentStock, 0) : 0,\n      transformedAt: new Date().toISOString()\n    }\n  };\n});"
          }
        },
        {
          "id": "34",
          "name": "Transform Weather Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            700
          ],
          "parameters": {
            "functionCode": "// Transform weather data\nconst items = $input.all();\nreturn items.map(item => {\n  const data = item.json;\n  return {\n    json: {\n      ...data,\n      processingStage: 'transformed',\n      isSafeForConcrete: data.temperature > 5 && data.temperature < 35 && data.precipitation < 5,\n      isSafeForCraneOperation: data.windSpeed < 20,\n      weatherRiskLevel: data.windSpeed > 30 ? 'high' : data.precipitation > 10 ? 'medium' : 'low',\n      transformedAt: new Date().toISOString()\n    }\n  };\n});"
          }
        },
        {
          "id": "35",
          "name": "Transform Unknown Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            700
          ],
          "parameters": {
            "functionCode": "// Handle unknown data types\nconst items = $input.all();\nreturn items.map(item => {\n  return {\n    json: {\n      ...item.json,\n      processingStage: 'transformed',\n      warning: 'Unknown data type processed with default transformation',\n      transformedAt: new Date().toISOString()\n    }\n  };\n});"
          }
        },
        {
          "id": "36",
          "name": "Merge Transformed Data",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            700,
            700
          ],
          "parameters": {
            "mode": "mergeByPosition"
          }
        },
        {
          "id": "37",
          "name": "Enrich With Processing Metadata",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            900,
            700
          ],
          "parameters": {
            "values": {
              "string": [
                {
                  "name": "processingId",
                  "value": "={{ $json.id || uuid() }}"
                },
                {
                  "name": "processingEnvironment",
                  "value": "production"
                },
                {
                  "name": "processingVersion",
                  "value": "1.0.0"
                }
              ],
              "number": [
                {
                  "name": "processingTimestamp",
                  "value": "={{ Date.now() }}"
                }
              ]
            },
            "options": {}
          }
        },
        {
          "id": "38",
          "name": "Split Into Batches",
          "type": "n8n-nodes-base.splitInBatches",
          "typeVersion": 1,
          "position": [
            1100,
            700
          ],
          "parameters": {
            "batchSize": 10
          }
        },
        {
          "id": "39",
          "name": "Is Inventory Batch?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1300,
            700
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.dataType }}",
                  "operation": "equal",
                  "value2": "inventory"
                }
              ]
            }
          }
        },
        {
          "id": "40",
          "name": "Process Inventory Batch",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            700
          ],
          "parameters": {
            "functionCode": "// Special processing for inventory batches\nconst items = $input.all();\nconst processedItems = items.map(item => {\n  const data = item.json;\n  return {\n    json: {\n      ...data,\n      processingStage: 'batch_processed',\n      inventoryStatus: data.needsReorder ? 'reorder_required' : 'sufficient',\n      priorityLevel: data.daysRemaining < 3 ? 'urgent' : data.daysRemaining < 7 ? 'high' : 'normal',\n      suggestedAction: data.needsReorder ? `Order ${data.orderQuantity} units of ${data.materialName}` : 'No action needed',\n      batchProcessedAt: new Date().toISOString()\n    }\n  };\n});\n\nreturn processedItems;"
          }
        },
        {
          "id": "41",
          "name": "Process Other Batches",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            850
          ],
          "parameters": {
            "functionCode": "// Standard processing for non-inventory batches\nconst items = $input.all();\nconst processedItems = items.map(item => {\n  const data = item.json;\n  return {\n    json: {\n      ...data,\n      processingStage: 'batch_processed',\n      standardProcessing: true,\n      batchProcessedAt: new Date().toISOString()\n    }\n  };\n});\n\nreturn processedItems;"
          }
        },
        {
          "id": "42",
          "name": "Merge Batch Results",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            300,
            850
          ],
          "parameters": {
            "mode": "mergeByPosition"
          }
        },
        {
          "id": "43",
          "name": "Is Last Batch?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            500,
            850
          ],
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $node[\"Split Into Batches\"].context[\"noMoreItems\"] }}",
                  "value2": true
                }
              ]
            }
          }
        },
        {
          "id": "44",
          "name": "Continue Batch Processing",
          "type": "n8n-nodes-base.noOp",
          "typeVersion": 1,
          "position": [
            700,
            850
          ],
          "parameters": {}
        },
        {
          "id": "45",
          "name": "Aggregate Batch Results",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            850
          ],
          "parameters": {
            "functionCode": "// Aggregate and summarize all batch results\nconst allItems = $input.all();\n\n// Group by data type\nconst groupedByType = {};\nallItems.forEach(item => {\n  const type = item.json.dataType;\n  if (!groupedByType[type]) {\n    groupedByType[type] = [];\n  }\n  groupedByType[type].push(item.json);\n});\n\n// Create summary for each type\nconst summaries = [];\nfor (const [type, items] of Object.entries(groupedByType)) {\n  if (type === 'safety') {\n    const avgSafetyScore = items.reduce((sum, item) => sum + (item.safetyScore || 0), 0) / items.length;\n    const highRiskCount = items.filter(item => item.riskLevel === 'high').length;\n    \n    summaries.push({\n      json: {\n        dataType: 'safety_summary',\n        averageSafetyScore: Math.round(avgSafetyScore),\n        highRiskCount,\n        totalCount: items.length,\n        hasCriticalIssues: highRiskCount > 0,\n        processingStage: 'aggregated'\n      }\n    });\n  } else if (type === 'inventory') {\n    const itemsToReorder = items.filter(item => item.needsReorder);\n    \n    summaries.push({\n      json: {\n        dataType: 'inventory_summary',\n        totalItems: items.length,\n        itemsNeedingReorder: itemsToReorder.length,\n        urgentItems: items.filter(item => item.priorityLevel === 'urgent').length,\n        reorderList: itemsToReorder.map(item => ({\n          material: item.materialName,\n          quantity: item.orderQuantity,\n          priority: item.priorityLevel\n        })),\n        hasCriticalIssues: items.some(item => item.priorityLevel === 'urgent'),\n        processingStage: 'aggregated'\n      }\n    });\n  } else if (type === 'progress') {\n    const avgCompletion = items.reduce((sum, item) => sum + (item.completionPercentage || 0), 0) / items.length;\n    const behindScheduleItems = items.filter(item => !item.isOnSchedule);\n    \n    summaries.push({\n      json: {\n        dataType: 'progress_summary',\n        averageCompletion: Math.round(avgCompletion),\n        tasksOnSchedule: items.length - behindScheduleItems.length,\n        tasksBehindSchedule: behindScheduleItems.length,\n        hasCriticalIssues: behindScheduleItems.some(item => item.variance < -10),\n        processingStage: 'aggregated'\n      }\n    });\n  } else if (type === 'weather') {\n    summaries.push({\n      json: {\n        dataType: 'weather_summary',\n        safeForConcrete: items.every(item => item.isSafeForConcrete),\n        safeForCraneOperation: items.every(item => item.isSafeForCraneOperation),\n        highRiskConditions: items.filter(item => item.weatherRiskLevel === 'high').length,\n        hasCriticalIssues: items.some(item => item.weatherRiskLevel === 'high'),\n        processingStage: 'aggregated'\n      }\n    });\n  } else {\n    // Handle unknown data types\n    summaries.push({\n      json: {\n        dataType: `${type}_summary`,\n        itemCount: items.length,\n        processingStage: 'aggregated'\n      }\n    });\n  }\n}\n\nreturn summaries;"
          }
        },
        {
          "id": "46",
          "name": "Has Critical Issues?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1100,
            850
          ],
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $json.hasCriticalIssues }}",
                  "value2": true
                }
              ]
            }
          }
        },
        {
          "id": "47",
          "name": "Generate Critical Issues Summary",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            1300,
            850
          ],
          "parameters": {
            "values": {
              "string": [
                {
                  "name": "alertLevel",
                  "value": "CRITICAL"
                },
                {
                  "name": "alertMessage",
                  "value": "={{ \"CRITICAL ALERT: \" + ($json.dataType === \"safety_summary\" ? `Safety issues detected with ${$json.highRiskCount} high risk violations` : $json.dataType === \"inventory_summary\" ? `${$json.urgentItems} materials urgently needed` : $json.dataType === \"progress_summary\" ? \"Project falling significantly behind schedule\" : $json.dataType === \"weather_summary\" ? \"Unsafe weather conditions detected\" : \"Unknown critical issue detected\") }}"
                }
              ],
              "boolean": [
                {
                  "name": "requiresImmediate",
                  "value": true
                }
              ]
            },
            "options": {}
          }
        },
        {
          "id": "48",
          "name": "Generate Standard Summary",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            1500,
            850
          ],
          "parameters": {
            "values": {
              "string": [
                {
                  "name": "alertLevel",
                  "value": "INFO"
                },
                {
                  "name": "alertMessage",
                  "value": "={{ \"INFO: \" + ($json.dataType === \"safety_summary\" ? `Safety score: ${$json.averageSafetyScore}` : $json.dataType === \"inventory_summary\" ? `${$json.itemsNeedingReorder} of ${$json.totalItems} materials need reordering` : $json.dataType === \"progress_summary\" ? `Project ${$json.averageCompletion}% complete` : $json.dataType === \"weather_summary\" ? \"Weather conditions normal\" : \"Standard processing completed\") }}"
                }
              ],
              "boolean": [
                {
                  "name": "requiresImmediate",
                  "value": false
                }
              ]
            },
            "options": {}
          }
        },
        {
          "id": "49",
          "name": "Merge Summaries",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            100,
            1000
          ],
          "parameters": {
            "mode": "mergeByPosition"
          }
        },
        {
          "id": "50",
          "name": "Fetch Weather Forecast",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            300,
            1000
          ],
          "parameters": {
            "url": "https://api.openweathermap.org/data/2.5/forecast",
            "authentication": "genericCredentialType",
            "genericAuthType": "queryAuth",
            "queryParameters": {
              "parameters": [
                {
                  "name": "lat",
                  "value": "40.7128"
                },
                {
                  "name": "lon",
                  "value": "-74.0060"
                },
                {
                  "name": "appid",
                  "value": "={{ $credentials.apiKey }}"
                },
                {
                  "name": "units",
                  "value": "metric"
                }
              ]
            },
            "options": {
              "response": {
                "response": {
                  "fullResponse": false,
                  "responseFormat": "json"
                }
              }
            }
          }
        },
        {
          "id": "51",
          "name": "Fetch Supplier Inventory",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            500,
            1000
          ],
          "parameters": {
            "url": "https://api.constructionsupplier.example/inventory",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "options": {
              "response": {
                "response": {
                  "fullResponse": false,
                  "responseFormat": "json"
                }
              }
            }
          }
        },
        {
          "id": "52",
          "name": "Enrich With External Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            1000
          ],
          "parameters": {
            "functionCode": "// Enrich data with external API information\nconst items = $input.all();\nconst weatherData = $node['Fetch Weather Forecast'].json;\nconst supplierData = $node['Fetch Supplier Inventory'].json;\n\nreturn items.map(item => {\n  const data = item.json;\n  \n  // Prepare enrichment data\n  const enrichment = {\n    externalDataAdded: true,\n    addedAt: new Date().toISOString(),\n    processingStage: 'enriched'\n  };\n  \n  // Add weather forecast if relevant\n  if (data.dataType === 'weather_summary' && weatherData && weatherData.list) {\n    const tomorrow = weatherData.list[0]; // First forecast entry\n    enrichment.weatherForecast = {\n      temperature: tomorrow.main.temp,\n      conditions: tomorrow.weather[0].main,\n      windSpeed: tomorrow.wind.speed,\n      precipitation: tomorrow.rain ? tomorrow.rain['3h'] : 0,\n      forecastDate: tomorrow.dt_txt\n    };\n  }\n  \n  // Add supplier inventory data if relevant\n  if (data.dataType === 'inventory_summary' && supplierData && supplierData.materials) {\n    enrichment.supplierInventory = {\n      availableMaterials: supplierData.materials.length,\n      criticalMaterials: supplierData.materials.filter(m => m.stock < m.critical).length,\n      leadTimes: supplierData.materials.reduce((acc, m) => {\n        acc[m.name] = m.leadTime;\n        return acc;\n      }, {})\n    };\n  }\n  \n  return {\n    json: {\n      ...data,\n      ...enrichment\n    }\n  };\n});"
          }
        },
        {
          "id": "53",
          "name": "Any Alerts To Process?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            900,
            1000
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.alertLevel }}",
                  "operation": "equal",
                  "value2": "CRITICAL"
                }
              ]
            }
          }
        },
        {
          "id": "54",
          "name": "Format Alerts For Notification",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            1100,
            1000
          ],
          "parameters": {
            "values": {
              "string": [
                {
                  "name": "notificationTitle",
                  "value": "={{ \"🚨 CONSTRUCTION SITE ALERT: \" + $json.alertMessage }}"
                },
                {
                  "name": "notificationBody",
                  "value": "={{ \"Details: \" + JSON.stringify($json, null, 2) }}"
                }
              ],
              "boolean": [
                {
                  "name": "notificationPrepared",
                  "value": true
                }
              ]
            },
            "options": {}
          }
        },
        {
          "id": "55",
          "name": "Data Processing Output",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            1300,
            1000
          ],
          "parameters": {
            "mode": "mergeByPosition"
          }
        },
        {
          "id": "56",
          "name": "Start External Integrations",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            1000
          ],
          "parameters": {
            "functionCode": "// Initialize external integrations section\nreturn [{json: {\n  input: $input.all(),\n  timestamp: new Date().toISOString(),\n  integrationsToRun: ['weather', 'supplier', 'vibration']\n}}];"
          }
        },
        {
          "id": "57",
          "name": "Route External Integration",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            100,
            1150
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{ $json.integrationsToRun[0] }}",
            "rules": [
              {
                "value2": "weather",
                "output": 0
              },
              {
                "value2": "supplier",
                "output": 1
              },
              {
                "value2": "vibration",
                "output": 2
              }
            ],
            "fallbackOutput": 3
          }
        },
        {
          "id": "58",
          "name": "Weather API Authentication",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            1150
          ],
          "parameters": {
            "functionCode": "// Simulate weather API authentication\nconst apiKey = 'weather_api_key_123';\nreturn [{json: {\n  ...($json),\n  weatherAuth: {\n    apiKey,\n    timestamp: new Date().toISOString(),\n    endpoint: 'https://api.weatherservice.com/v1/forecast'\n  }\n}}];"
          }
        },
        {
          "id": "59",
          "name": "Supplier API Authentication",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            1150
          ],
          "parameters": {
            "functionCode": "// Simulate supplier API authentication\nconst apiKey = 'supplier_api_key_456';\nreturn [{json: {\n  ...($json),\n  supplierAuth: {\n    apiKey,\n    timestamp: new Date().toISOString(),\n    endpoint: 'https://api.constructionsupplier.com/v2/inventory'\n  }\n}}];"
          }
        },
        {
          "id": "60",
          "name": "Vibration API Authentication",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            1150
          ],
          "parameters": {
            "functionCode": "// Simulate vibration sensor API authentication\nconst apiKey = 'vibration_api_key_789';\nreturn [{json: {\n  ...($json),\n  vibrationAuth: {\n    apiKey,\n    timestamp: new Date().toISOString(),\n    endpoint: 'https://api.vibrationsensors.com/v1/readings'\n  }\n}}];"
          }
        },
        {
          "id": "61",
          "name": "Fetch Weather Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            900,
            1150
          ],
          "parameters": {
            "url": "={{ $json.weatherAuth.endpoint }}",
            "method": "GET",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "httpHeaderAuth": {
              "name": "x-api-key",
              "value": "={{ $json.weatherAuth.apiKey }}"
            },
            "options": {
              "timeout": 5000
            }
          }
        },
        {
          "id": "62",
          "name": "Fetch Supplier Inventory",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1100,
            1150
          ],
          "parameters": {
            "url": "={{ $json.supplierAuth.endpoint }}",
            "method": "GET",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "httpHeaderAuth": {
              "name": "x-api-key",
              "value": "={{ $json.supplierAuth.apiKey }}"
            },
            "options": {
              "timeout": 5000
            }
          }
        },
        {
          "id": "63",
          "name": "Fetch Vibration Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1300,
            1150
          ],
          "parameters": {
            "url": "={{ $json.vibrationAuth.endpoint }}",
            "method": "GET",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "httpHeaderAuth": {
              "name": "x-api-key",
              "value": "={{ $json.vibrationAuth.apiKey }}"
            },
            "options": {
              "timeout": 5000
            }
          }
        },
        {
          "id": "64",
          "name": "Validate Weather Response",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1500,
            1150
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.statusCode }}",
                  "operation": "equal",
                  "value2": "200"
                }
              ]
            }
          }
        },
        {
          "id": "65",
          "name": "Validate Supplier Response",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            100,
            1300
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.statusCode }}",
                  "operation": "equal",
                  "value2": "200"
                }
              ]
            }
          }
        },
        {
          "id": "66",
          "name": "Validate Vibration Response",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            300,
            1300
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.statusCode }}",
                  "operation": "equal",
                  "value2": "200"
                }
              ]
            }
          }
        },
        {
          "id": "67",
          "name": "Wait Before Weather Retry",
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1,
          "position": [
            500,
            1300
          ],
          "parameters": {
            "amount": 1,
            "unit": "minutes"
          }
        },
        {
          "id": "68",
          "name": "Wait Before Supplier Retry",
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1,
          "position": [
            700,
            1300
          ],
          "parameters": {
            "amount": 1,
            "unit": "minutes"
          }
        },
        {
          "id": "69",
          "name": "Wait Before Vibration Retry",
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1,
          "position": [
            900,
            1300
          ],
          "parameters": {
            "amount": 1,
            "unit": "minutes"
          }
        },
        {
          "id": "70",
          "name": "Map Weather Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            1300
          ],
          "parameters": {
            "functionCode": "// Map and transform weather data\nconst data = $json;\nreturn [{json: {\n  ...($json),\n  mappedWeatherData: {\n    temperature: data.temperature || data.temp || 0,\n    humidity: data.humidity || 0,\n    windSpeed: data.windSpeed || data.wind_speed || 0,\n    conditions: data.conditions || data.weather || 'Unknown',\n    timestamp: new Date().toISOString(),\n    source: 'weather_api'\n  }\n}}];"
          }
        },
        {
          "id": "71",
          "name": "Map Supplier Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            1300
          ],
          "parameters": {
            "functionCode": "// Map and transform supplier inventory data\nconst data = $json;\nreturn [{json: {\n  ...($json),\n  mappedSupplierData: {\n    materials: Array.isArray(data.inventory) ? data.inventory : [],\n    availableItems: data.availableItems || data.available || [],\n    backorderedItems: data.backorderedItems || data.backordered || [],\n    lastUpdated: data.lastUpdated || new Date().toISOString(),\n    source: 'supplier_api'\n  }\n}}];"
          }
        },
        {
          "id": "72",
          "name": "Map Vibration Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            1300
          ],
          "parameters": {
            "functionCode": "// Map and transform vibration sensor data\nconst data = $json;\nreturn [{json: {\n  ...($json),\n  mappedVibrationData: {\n    readings: Array.isArray(data.readings) ? data.readings : [],\n    maxVibration: data.maxVibration || data.max || 0,\n    avgVibration: data.avgVibration || data.average || 0,\n    thresholdExceeded: data.thresholdExceeded || false,\n    timestamp: new Date().toISOString(),\n    source: 'vibration_api'\n  }\n}}];"
          }
        },
        {
          "id": "73",
          "name": "Combine External Data",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            100,
            1450
          ],
          "parameters": {
            "mode": "mergeByPosition"
          }
        },
        {
          "id": "74",
          "name": "Classify Error",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            1450
          ],
          "parameters": {
            "functionCode": "// Classify incoming error by type and severity\nconst error = $input.all()[0].json.error || {};\nconst errorTypes = {\n  API_FAILURE: ['http', 'api', 'timeout', 'connection refused'],\n  DATA_ERROR: ['validation', 'schema', 'format', 'missing field'],\n  SYSTEM_ERROR: ['memory', 'disk', 'crash', 'exception'],\n  PERMISSION_ERROR: ['access', 'permission', 'unauthorized', 'forbidden'],\n  EXTERNAL_SERVICE: ['service', 'provider', 'external', 'third-party']\n};\n\n// Determine error type\nlet errorType = 'UNKNOWN';\nfor (const [type, keywords] of Object.entries(errorTypes)) {\n  if (keywords.some(keyword => \n    error.message?.toLowerCase().includes(keyword) ||\n    error.stack?.toLowerCase().includes(keyword) ||\n    error.type?.toLowerCase().includes(keyword)\n  )) {\n    errorType = type;\n    break;\n  }\n}\n\n// Determine severity\nlet severity = 'LOW';\nif (error.critical || error.fatal || error.message?.includes('critical')) {\n  severity = 'CRITICAL';\n} else if (error.warning || error.message?.includes('warning')) {\n  severity = 'MEDIUM';\n} else if (errorType === 'SYSTEM_ERROR' || errorType === 'API_FAILURE') {\n  severity = 'HIGH';\n}\n\nreturn [{\n  json: {\n    ...error,\n    errorType,\n    severity,\n    timestamp: new Date().toISOString(),\n    source: error.source || 'construction-site-monitoring',\n    classified: true\n  }\n}];"
          }
        },
        {
          "id": "75",
          "name": "Determine Recovery Strategy",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            500,
            1450
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{ $json.errorType }}",
            "rules": [
              {
                "value2": "API_FAILURE",
                "output": 0
              },
              {
                "value2": "DATA_ERROR",
                "output": 1
              },
              {
                "value2": "SYSTEM_ERROR",
                "output": 2
              }
            ],
            "fallbackOutput": 3
          }
        },
        {
          "id": "76",
          "name": "Execute Fallback Processing",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            1450
          ],
          "parameters": {
            "functionCode": "// Apply recovery strategy based on error classification\nconst error = $input.all()[0].json;\n\nlet recoveryAction = '';\nlet fallbackData = {};\n\nswitch(error.errorType) {\n  case 'API_FAILURE':\n    recoveryAction = 'RETRY_WITH_EXPONENTIAL_BACKOFF';\n    fallbackData = {\n      maxRetries: 3,\n      backoffFactor: 2,\n      initialDelay: 1000,\n      useCache: true,\n      cacheExpiry: '1h'\n    };\n    break;\n  case 'DATA_ERROR':\n    recoveryAction = 'USE_DEFAULT_VALUES';\n    fallbackData = {\n      useDefaults: true,\n      markAsEstimated: true,\n      requireManualReview: error.severity === 'HIGH'\n    };\n    break;\n  case 'SYSTEM_ERROR':\n    recoveryAction = 'SWITCH_TO_BACKUP_SYSTEM';\n    fallbackData = {\n      useBackupSystem: true,\n      notifyOperations: true,\n      escalationRequired: error.severity === 'CRITICAL'\n    };\n    break;\n  case 'PERMISSION_ERROR':\n    recoveryAction = 'USE_FALLBACK_CREDENTIALS';\n    fallbackData = {\n      useFallbackAuth: true,\n      limitedAccessMode: true,\n      logAccessAttempt: true\n    };\n    break;\n  default:\n    recoveryAction = 'MANUAL_INTERVENTION';\n    fallbackData = {\n      requiresHumanReview: true,\n      pauseRelatedSystems: error.severity === 'CRITICAL',\n      collectDebugInfo: true\n    };\n}\n\nreturn [{\n  json: {\n    ...error,\n    recoveryAction,\n    fallbackData,\n    recoveryInitiated: true,\n    recoveryTimestamp: new Date().toISOString()\n  }\n}];"
          }
        },
        {
          "id": "77",
          "name": "Log Error Details",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            1450
          ],
          "parameters": {
            "functionCode": "// Log detailed error information\nconst error = $input.all()[0].json;\n\n// Create comprehensive error log\nconst errorLog = {\n  timestamp: new Date().toISOString(),\n  errorId: `ERR-${Date.now()}-${Math.floor(Math.random() * 1000)}`,\n  errorType: error.errorType,\n  severity: error.severity,\n  message: error.message || 'Unknown error occurred',\n  source: error.source || 'construction-site-monitoring',\n  affectedComponent: error.component || error.nodeType || 'unknown',\n  affectedOperation: error.operation || 'unknown',\n  stackTrace: error.stack || null,\n  originalData: error.data || {},\n  recoveryAction: error.recoveryAction,\n  recoveryStatus: error.recoveryInitiated ? 'INITIATED' : 'PENDING',\n  context: {\n    workflowId: error.workflowId || 'unknown',\n    nodeId: error.nodeId || 'unknown',\n    executionId: error.executionId || 'unknown',\n    inputData: error.inputData || {}\n  },\n  systemInfo: {\n    environment: 'production',\n    timestamp: Date.now(),\n    serviceVersion: process.env.SERVICE_VERSION || 'unknown'\n  }\n};\n\n// In a real implementation, this would save to a database\nconsole.log('ERROR LOG:', JSON.stringify(errorLog, null, 2));\n\nreturn [{\n  json: {\n    ...error,\n    errorLog,\n    loggedAt: new Date().toISOString(),\n    logSuccess: true\n  }\n}];"
          }
        },
        {
          "id": "78",
          "name": "Notify Administrators",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            1100,
            1450
          ],
          "parameters": {
            "fromEmail": "{{ $env.SMTP_FROM }}",
            "toEmail": "{{ $env.ADMIN_EMAIL }}",
            "subject": "🚨 ALERT: {{ $json.severity }} Error in Construction Monitoring System",
            "text": "=== ERROR DETAILS ===\nError ID: {{ $json.errorLog.errorId }}\nType: {{ $json.errorType }}\nSeverity: {{ $json.severity }}\nTimestamp: {{ $json.timestamp }}\nMessage: {{ $json.message }}\n\n=== AFFECTED COMPONENTS ===\nSource: {{ $json.source }}\nComponent: {{ $json.errorLog.affectedComponent }}\nOperation: {{ $json.errorLog.affectedOperation }}\n\n=== RECOVERY ===\nAction: {{ $json.recoveryAction }}\nStatus: {{ $json.errorLog.recoveryStatus }}\n\n=== TECHNICAL DETAILS ===\nWorkflow ID: {{ $json.errorLog.context.workflowId }}\nExecution ID: {{ $json.errorLog.context.executionId }}\n\nPlease check the monitoring dashboard for more details.\n\nThis is an automated message from the Construction Site Monitoring System.",
            "options": {
              "attachments": "={{ [{name: 'error-details.json', data: Buffer.from(JSON.stringify($json.errorLog, null, 2)).toString('base64'), contentType: 'application/json'}] }}"
            }
          }
        },
        {
          "id": "79",
          "name": "Collect Activity Logs",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            1450
          ],
          "parameters": {
            "functionCode": "// Collect activity logs from all workflow operations\nconst inputData = $input.all();\nconst timestamp = new Date().toISOString();\n\nconst activityLog = {\n  timestamp,\n  workflowId: $workflow.id,\n  workflowName: $workflow.name,\n  executionId: $execution.id,\n  inputItems: inputData.length,\n  operations: inputData.map(item => item.json.operation || 'unknown'),\n  source: $execution.source || 'manual'\n};\n\nreturn [{json: { activityLog }}];"
          }
        },
        {
          "id": "80",
          "name": "Track Performance Metrics",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            1450
          ],
          "parameters": {
            "functionCode": "// Track performance metrics for the workflow execution\nconst { activityLog } = $input.item.json;\nconst startTime = new Date(activityLog.timestamp);\nconst executionTime = new Date() - startTime;\n\nconst performanceMetrics = {\n  executionTimeMs: executionTime,\n  memoryUsage: process.memoryUsage().heapUsed,\n  itemsProcessed: activityLog.inputItems,\n  timestamp: new Date().toISOString(),\n  workflowId: activityLog.workflowId\n};\n\nreturn [{\n  json: {\n    activityLog,\n    performanceMetrics\n  }\n}];"
          }
        },
        {
          "id": "81",
          "name": "Generate Audit Trail",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            1600
          ],
          "parameters": {
            "functionCode": "// Create detailed audit trail entries\nconst { activityLog, performanceMetrics } = $input.item.json;\n\nconst auditTrail = {\n  timestamp: new Date().toISOString(),\n  action: 'workflow_execution',\n  details: {\n    workflowId: activityLog.workflowId,\n    workflowName: activityLog.workflowName,\n    executionId: activityLog.executionId,\n    operations: activityLog.operations,\n    performanceMetrics: {\n      executionTimeMs: performanceMetrics.executionTimeMs,\n      itemsProcessed: performanceMetrics.itemsProcessed\n    },\n    source: activityLog.source,\n    status: 'completed'\n  },\n  user: $execution.owner || 'system'\n};\n\nreturn [{\n  json: {\n    activityLog,\n    performanceMetrics,\n    auditTrail\n  }\n}];"
          }
        },
        {
          "id": "82",
          "name": "Check For Critical Events",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            300,
            1600
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{$json.performanceMetrics.executionTimeMs}}",
                  "operation": "larger",
                  "value2": 5000
                }
              ]
            }
          }
        },
        {
          "id": "83",
          "name": "Store Monitoring Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            1600
          ],
          "parameters": {
            "functionCode": "// Store all monitoring data to a central location\nconst monitoringData = $input.item.json;\nconst isCritical = monitoringData.isCritical || false;\n\n// Here we would typically store to a database\n// This is a simulation of that process\nconst storedData = {\n  timestamp: new Date().toISOString(),\n  stored: true,\n  storageLocation: 'monitoring_database',\n  collectionName: isCritical ? 'critical_events' : 'standard_logs',\n  data: monitoringData,\n  retention: isCritical ? '90 days' : '30 days'\n};\n\nconsole.log(`Monitoring data stored: ${JSON.stringify(storedData)}`);\n\nreturn [{\n  json: {\n    ...monitoringData,\n    stored: true,\n    storedAt: new Date().toISOString()\n  }\n}];"
          }
        }
      ],
      "connections": {
        "Schedule Trigger": {
          "main": [
            [
              {
                "node": "Central Router",
                "type": "main",
                "index": 0
              },
              {
                "node": "Central Router",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Central Router": {
          "main": [
            [
              {
                "node": "Process Safety Monitoring",
                "type": "main",
                "index": 0
              },
              {
                "node": "Process Safety Monitoring",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Safety Monitoring": {
          "main": [
            [
              {
                "node": "Process Worker Tracking",
                "type": "main",
                "index": 0
              },
              {
                "node": "Process Worker Tracking",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Worker Tracking": {
          "main": [
            [
              {
                "node": "Process Drone Photography",
                "type": "main",
                "index": 0
              },
              {
                "node": "Process Drone Photography",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Drone Photography": {
          "main": [
            [
              {
                "node": "Process Material Tracking",
                "type": "main",
                "index": 0
              },
              {
                "node": "Process Material Stock",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Material Tracking": {
          "main": [
            [
              {
                "node": "Process Security Patrol",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Security Patrol": {
          "main": [
            [
              {
                "node": "Handle Unknown Task",
                "type": "main",
                "index": 0
              },
              {
                "node": "Handle Unknown Task",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge All Results": {
          "main": [
            [
              {
                "node": "Generate Daily Report",
                "type": "main",
                "index": 0
              },
              {
                "node": "Generate Daily Report",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Error Trigger": {
          "main": [
            [
              {
                "node": "Prepare Data for Validation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Prepare Data for Validation": {
          "main": [
            [
              {
                "node": "Schema Validation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Schema Validation": {
          "main": [
            [
              {
                "node": "Type Checking",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Type Checking": {
          "main": [
            [
              {
                "node": "Business Rule Validation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Sanitize Data": {
          "main": [
            [
              {
                "node": "Validation Decision",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validation Decision": {
          "main": [
            [
              {
                "node": "Format Validation Errors",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Validation Errors": {
          "main": [
            [
              {
                "node": "Prepare For Next Section",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Prepare For Next Section": {
          "main": [
            [
              {
                "node": "Data Processing Entry Point",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Data Processing Entry Point": {
          "main": [
            [
              {
                "node": "Route By Data Type",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Route By Data Type": {
          "main": [
            [
              {
                "node": "Transform Safety Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Transform Safety Data": {
          "main": [
            [
              {
                "node": "Transform Progress Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Transform Inventory Data": {
          "main": [
            [
              {
                "node": "Transform Weather Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Transform Weather Data": {
          "main": [
            [
              {
                "node": "Transform Unknown Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Transform Unknown Data": {
          "main": [
            [
              {
                "node": "Merge Transformed Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Transformed Data": {
          "main": [
            [
              {
                "node": "Enrich With Processing Metadata",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Enrich With Processing Metadata": {
          "main": [
            [
              {
                "node": "Split Into Batches",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Split Into Batches": {
          "main": [
            [
              {
                "node": "Is Inventory Batch?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Inventory Batch?": {
          "main": [
            [
              {
                "node": "Process Inventory Batch",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Other Batches": {
          "main": [
            [
              {
                "node": "Merge Batch Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Batch Results": {
          "main": [
            [
              {
                "node": "Is Last Batch?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Last Batch?": {
          "main": [
            [
              {
                "node": "Continue Batch Processing",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Continue Batch Processing": {
          "main": [
            [
              {
                "node": "Aggregate Batch Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Aggregate Batch Results": {
          "main": [
            [
              {
                "node": "Has Critical Issues?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Has Critical Issues?": {
          "main": [
            [
              {
                "node": "Generate Critical Issues Summary",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Generate Critical Issues Summary": {
          "main": [
            [
              {
                "node": "Generate Standard Summary",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Summaries": {
          "main": [
            [
              {
                "node": "Fetch Weather Forecast",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Weather Forecast": {
          "main": [
            [
              {
                "node": "Fetch Supplier Inventory",
                "type": "main",
                "index": 0
              },
              {
                "node": "Fetch Supplier Inventory",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Supplier Inventory": {
          "main": [
            [
              {
                "node": "Enrich With External Data",
                "type": "main",
                "index": 0
              },
              {
                "node": "Fetch Vibration Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Enrich With External Data": {
          "main": [
            [
              {
                "node": "Any Alerts To Process?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Any Alerts To Process?": {
          "main": [
            [
              {
                "node": "Format Alerts For Notification",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Alerts For Notification": {
          "main": [
            [
              {
                "node": "Data Processing Output",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Data Processing Output": {
          "main": [
            [
              {
                "node": "Start External Integrations",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Route External Integration": {
          "main": [
            [
              {
                "node": "Weather API Authentication",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Weather API Authentication": {
          "main": [
            [
              {
                "node": "Supplier API Authentication",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Supplier API Authentication": {
          "main": [
            [
              {
                "node": "Vibration API Authentication",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Vibration API Authentication": {
          "main": [
            [
              {
                "node": "Fetch Weather Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Vibration Data": {
          "main": [
            [
              {
                "node": "Validate Weather Response",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate Supplier Response": {
          "main": [
            [
              {
                "node": "Validate Vibration Response",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate Vibration Response": {
          "main": [
            [
              {
                "node": "Wait Before Weather Retry",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wait Before Weather Retry": {
          "main": [
            [
              {
                "node": "Wait Before Supplier Retry",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wait Before Supplier Retry": {
          "main": [
            [
              {
                "node": "Wait Before Vibration Retry",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wait Before Vibration Retry": {
          "main": [
            [
              {
                "node": "Map Weather Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Map Weather Data": {
          "main": [
            [
              {
                "node": "Map Supplier Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Map Supplier Data": {
          "main": [
            [
              {
                "node": "Map Vibration Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Combine External Data": {
          "main": [
            [
              {
                "node": "Classify Error",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Classify Error": {
          "main": [
            [
              {
                "node": "Determine Recovery Strategy",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Determine Recovery Strategy": {
          "main": [
            [
              {
                "node": "Execute Fallback Processing",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Execute Fallback Processing": {
          "main": [
            [
              {
                "node": "Log Error Details",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Log Error Details": {
          "main": [
            [
              {
                "node": "Notify Administrators",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Notify Administrators": {
          "main": [
            [
              {
                "node": "Collect Activity Logs",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Collect Activity Logs": {
          "main": [
            [
              {
                "node": "Track Performance Metrics",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Generate Audit Trail": {
          "main": [
            [
              {
                "node": "Check For Critical Events",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check For Critical Events": {
          "main": [
            [
              {
                "node": "Store Monitoring Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {},
      "active": false
    },
    "provider": "anthropic",
    "model": "claude-3-7-sonnet-20250219",
    "timestamp": "2025-07-22T15:38:36.022Z",
    "nodeCount": 83,
    "connectionCount": 66
  },
  {
    "id": "f1ff0ed7-6560-425d-bbb9-ea71e75cce72",
    "prompt": "To create a comprehensive n8n workflow for Construction Site Safety and Progress Monitoring, we need to orchestrate the various features identified in your requirements. This will involve setting up a complex workflow with multiple interconnected branches to manage safety, progress monitoring, and emergency protocols effectively. Here’s a detailed plan:\n\n### Workflow Structure\n\n#### 1. **Main Entry Point**\n\n- **Node:** `n8n-nodes-base.webhook` (to receive initial data or trigger the workflow)\n\n#### 2. **Central Router**\n\n- **Node:** `n8n-nodes-base.switch` \n  - **Purpose:** Route to different features based on the input trigger or data type.\n  - **Connections:**\n    - Helmet and Seat Belt Monitoring\n    - Daily Worker Entry/Exit\n    - Weekly Progress Photography\n    - Weather Monitoring\n    - Crane Wind Monitoring\n    - Material Stock Tracking\n    - Emergency Protocol\n    - Night Security Patrol\n    - Vibration Sensor Monitoring\n    - Contractor Progress Payment\n\n#### 3. **Feature Branches**\n\n##### A. **Helmet and Seat Belt Monitoring**\n\n- **Nodes:**\n  - `n8n-nodes-base.httpRequest` (to interface with camera systems)\n  - `n8n-nodes-base.code` (process image analysis results)\n  - **Error Handling:** `n8n-nodes-base.errorTrigger` for camera or analysis errors\n\n##### B. **Daily Worker Entry and Exit**\n\n- **Nodes:**\n  - `n8n-nodes-base.httpRequest` (fetch entry/exit data)\n  - `n8n-nodes-base.set` (store and process timekeeping records)\n\n##### C. **Weekly Progress Photography**\n\n- **Nodes:**\n  - `n8n-nodes-base.executeCommand` (to launch drone operations)\n  - `n8n-nodes-base.googleDrive` (upload and archive images)\n  - **Error Handling:** `n8n-nodes-base.errorTrigger` for drone operation issues\n\n##### D. **Weather Monitoring**\n\n- **Nodes:**\n  - `n8n-nodes-base.httpRequest` (fetch weather data)\n  - `n8n-nodes-base.switch` (decision based on weather conditions)\n  - Automated alerts for adverse conditions\n\n##### E. **Crane Wind Monitoring**\n\n- **Nodes:**\n  - `n8n-nodes-raspberry.raspberryPi` (monitor wind sensor data)\n  - `n8n-nodes-base.switch` (shut down operations if wind exceeds safe limits)\n\n##### F. **Material Stock Tracking**\n\n- **Nodes:**\n  - `n8n-nodes-base.httpRequest` (interface with inventory systems)\n  - `n8n-nodes-base.set` (calculate reorder levels)\n  - Automatic ordering through HTTP requests\n\n##### G. **Emergency Protocol**\n\n- **Nodes:**\n  - `n8n-nodes-base.errorTrigger` (catch and manage emergencies)\n  - `n8n-nodes-base.emailSend` (send emergency alerts)\n  - `n8n-nodes-base.twilio` (send SMS alerts)\n\n##### H. **Night Security Patrol**\n\n- **Nodes:**\n  - `n8n-nodes-raspberry.raspberryPi` (track patrol route compliance)\n  - `n8n-nodes-base.set` (log security checks)\n\n##### I. **Vibration Sensor Monitoring**\n\n- **Nodes:**\n  - `n8n-nodes-raspberry.raspberryPi` (monitor vibration data)\n  - `n8n-nodes-base.switch` (trigger alerts if thresholds are exceeded)\n\n##### J. **Contractor Progress Payment**\n\n- **Nodes:**\n  - `n8n-nodes-base.httpRequest` (fetch photo documentation data)\n  - `n8n-nodes-base.httpRequest` (verify and authorize payment)\n\n#### 4. **Central Merge Node**\n\n- **Node:** `n8n-nodes-base.merge`\n  - **Purpose:** Combine results from all feature branches for a comprehensive overview.\n\n#### 5. **Final Processing/Response**\n\n- **Nodes:**\n  - `n8n-nodes-base.set` (prepare final summary report)\n  - `n8n-nodes-base.emailSend` (send report to stakeholders)\n\n### Implementation Considerations\n\n- **Error Handling:** Ensure every branch has dedicated error handling nodes to catch and manage exceptions.\n- **Parallel Processing:** Use parallel branches in the central router to manage operations simultaneously where possible.\n- **Data Visualization:** Consider using additional nodes to visualize data trends and analysis results.\n\n### Validation Checklist\n\n- ☑ All nodes are connected, ensuring no isolated chains exist.\n- ☑ Error handling is comprehensive across all branches.\n- ☑ All branches merge back to the central data flow.\n- ☑ Decision nodes handle all possible conditions.\n- ☑ Data flows logically and efficiently between nodes.\n- ☑ Analysis results are properly integrated and actionable.\n\nThis workflow will ensure a robust management system for safety and progress monitoring on construction sites, leveraging real-time data for optimal decision-making and emergency response.",
    "workflow": {
      "name": "Construction Site Safety and Progress Monitorin66",
      "nodes": [
        {
          "id": "1",
          "name": "Schedule Trigger",
          "type": "n8n-nodes-base.cron",
          "typeVersion": 1,
          "position": [
            100,
            100
          ],
          "parameters": {
            "triggerTimes": {
              "item": [
                {
                  "mode": "everyDay",
                  "hour": 6,
                  "minute": 0
                }
              ]
            }
          }
        },
        {
          "id": "2",
          "name": "Central Router",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            300,
            100
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{ $json.task || 'daily_monitoring' }}",
            "rules": {
              "rules": [
                {
                  "value2": "helmet_monitoring",
                  "output": 0
                },
                {
                  "value2": "worker_tracking",
                  "output": 1
                },
                {
                  "value2": "weather_monitoring",
                  "output": 2
                },
                {
                  "value2": "crane_monitoring",
                  "output": 3
                },
                {
                  "value2": "material_tracking",
                  "output": 4
                }
              ]
            },
            "fallbackOutput": 5
          }
        },
        {
          "id": "3",
          "name": "Process Safety Monitoring",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            100
          ],
          "parameters": {
            "functionCode": "// Process safety data from helmet and seat belt sensors\nconst data = $input.item.json;\n\n// Simulate safety check processing\nconst safetyStatus = {\n  workersWithoutHelmet: Math.floor(Math.random() * 3),\n  workersWithoutSeatBelt: Math.floor(Math.random() * 2),\n  timestamp: new Date().toISOString(),\n  location: data.location || 'Main Construction Site',\n  safetyScore: Math.floor(Math.random() * 20) + 80, // 80-100 score range\n  criticalIssue: false\n};\n\n// Check if there's a critical safety issue\nif (safetyStatus.workersWithoutHelmet > 2 || safetyStatus.workersWithoutSeatBelt > 1) {\n  safetyStatus.criticalIssue = true;\n}\n\nreturn [{json: safetyStatus}];"
          }
        },
        {
          "id": "4",
          "name": "Process Worker Tracking",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            100
          ],
          "parameters": {
            "functionCode": "// Process worker entry/exit data\nconst data = $input.item.json;\nconst currentTime = new Date();\n\n// Simulate worker tracking data\nconst workerStatus = {\n  totalWorkers: Math.floor(Math.random() * 30) + 20, // 20-50 workers\n  presentWorkers: Math.floor(Math.random() * 30) + 15, // 15-45 workers\n  timestamp: currentTime.toISOString(),\n  location: data.location || 'Main Construction Site',\n  attendance: 0,\n  unauthorizedAccess: Math.random() > 0.9, // 10% chance of unauthorized access\n  criticalIssue: false\n};\n\n// Calculate attendance percentage\nworkerStatus.attendance = Math.round((workerStatus.presentWorkers / workerStatus.totalWorkers) * 100);\n\n// Check if there's a critical issue (unauthorized access)\nif (workerStatus.unauthorizedAccess) {\n  workerStatus.criticalIssue = true;\n}\n\nreturn [{json: workerStatus}];"
          }
        },
        {
          "id": "5",
          "name": "Process Weather Monitoring",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            900,
            100
          ],
          "parameters": {
            "url": "=https://api.openweathermap.org/data/2.5/weather?q={{$json.location || 'New York'}}&appid=YOUR_API_KEY&units=metric",
            "method": "GET",
            "authentication": "none",
            "options": {
              "redirect": {
                "redirect": {
                  "followRedirects": true
                }
              },
              "response": {
                "response": {
                  "fullResponse": false,
                  "responseFormat": "json"
                }
              }
            }
          }
        },
        {
          "id": "6",
          "name": "Format Weather Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            100
          ],
          "parameters": {
            "functionCode": "// Process weather data\nconst data = $input.item.json;\n\n// Create a formatted weather report\nconst weatherReport = {\n  temperature: data.main?.temp || 20,\n  windSpeed: data.wind?.speed || 5,\n  humidity: data.main?.humidity || 50,\n  conditions: data.weather?.[0]?.main || 'Clear',\n  timestamp: new Date().toISOString(),\n  location: data.name || 'Construction Site',\n  criticalIssue: false\n};\n\n// Check if weather conditions are dangerous\nif (weatherReport.windSpeed > 15 || \n    weatherReport.conditions === 'Thunderstorm' || \n    weatherReport.conditions === 'Tornado') {\n  weatherReport.criticalIssue = true;\n}\n\nreturn [{json: weatherReport}];"
          }
        },
        {
          "id": "7",
          "name": "Process Crane Monitoring",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            100
          ],
          "parameters": {
            "functionCode": "// Process crane wind monitoring data\nconst data = $input.item.json;\n\n// Simulate crane monitoring data\nconst craneStatus = {\n  craneId: data.craneId || 'CRANE-' + Math.floor(Math.random() * 5) + 1,\n  windSpeed: Math.floor(Math.random() * 30), // 0-30 mph\n  maxSafeWindSpeed: 20, // mph\n  operatorPresent: Math.random() > 0.1, // 90% chance operator is present\n  timestamp: new Date().toISOString(),\n  location: data.location || 'Main Construction Site',\n  criticalIssue: false\n};\n\n// Check if there's a critical issue\nif (craneStatus.windSpeed > craneStatus.maxSafeWindSpeed) {\n  craneStatus.criticalIssue = true;\n  craneStatus.recommendation = 'Suspend crane operations immediately';\n}\n\nreturn [{json: craneStatus}];"
          }
        },
        {
          "id": "8",
          "name": "Process Material Tracking",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            100
          ],
          "parameters": {
            "functionCode": "// Process material stock tracking\nconst data = $input.item.json;\n\n// Simulate inventory data for common construction materials\nconst materials = [\n  { name: 'Cement', currentStock: Math.floor(Math.random() * 100), minRequired: 20, unit: 'bags' },\n  { name: 'Steel Rebar', currentStock: Math.floor(Math.random() * 200), minRequired: 50, unit: 'tons' },\n  { name: 'Bricks', currentStock: Math.floor(Math.random() * 5000), minRequired: 1000, unit: 'pieces' },\n  { name: 'Sand', currentStock: Math.floor(Math.random() * 50), minRequired: 10, unit: 'cubic meters' },\n  { name: 'Timber', currentStock: Math.floor(Math.random() * 150), minRequired: 30, unit: 'pieces' }\n];\n\n// Identify materials that need reordering\nconst materialsToReorder = materials.filter(m => m.currentStock < m.minRequired);\n\nconst inventoryStatus = {\n  materials: materials,\n  materialsToReorder: materialsToReorder,\n  timestamp: new Date().toISOString(),\n  location: data.location || 'Main Construction Site',\n  criticalIssue: materialsToReorder.length > 0\n};\n\nreturn [{json: inventoryStatus}];"
          }
        },
        {
          "id": "9",
          "name": "Merge All Results",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            100,
            250
          ],
          "parameters": {
            "mode": "mergeByPosition"
          }
        },
        {
          "id": "10",
          "name": "Generate Daily Report",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            250
          ],
          "parameters": {
            "functionCode": "// Combine all monitoring results into a comprehensive report\nconst data = $input.all();\n\n// Extract all items from the input\nconst allItems = data.map(item => item.json);\n\n// Count critical issues\nconst criticalIssues = allItems.filter(item => item.criticalIssue === true);\n\n// Generate summary report\nconst report = {\n  timestamp: new Date().toISOString(),\n  totalIssuesDetected: criticalIssues.length,\n  criticalIssuesDetected: criticalIssues.length > 0,\n  criticalIssues: criticalIssues,\n  safetyScore: allItems.find(i => i.safetyScore)?.safetyScore || 'Not available',\n  workerAttendance: allItems.find(i => i.attendance)?.attendance || 'Not available',\n  weatherConditions: allItems.find(i => i.conditions)?.conditions || 'Not available',\n  materialsToReorder: allItems.find(i => i.materialsToReorder)?.materialsToReorder || [],\n  craneOperationStatus: allItems.find(i => i.craneId)?.recommendation || 'Normal operations',\n  recommendations: []\n};\n\n// Add recommendations based on issues\nif (report.criticalIssuesDetected) {\n  if (criticalIssues.find(i => i.windSpeed && i.windSpeed > i.maxSafeWindSpeed)) {\n    report.recommendations.push('Suspend crane operations due to high winds');\n  }\n  \n  if (criticalIssues.find(i => i.conditions === 'Thunderstorm' || i.conditions === 'Tornado')) {\n    report.recommendations.push('Evacuate site due to dangerous weather conditions');\n  }\n  \n  if (criticalIssues.find(i => i.workersWithoutHelmet > 2)) {\n    report.recommendations.push('Enforce helmet safety protocols immediately');\n  }\n  \n  if (criticalIssues.find(i => i.unauthorizedAccess)) {\n    report.recommendations.push('Investigate unauthorized site access');\n  }\n}\n\n// Add material reordering recommendations\nconst materialsToReorder = allItems.find(i => i.materialsToReorder)?.materialsToReorder || [];\nif (materialsToReorder.length > 0) {\n  materialsToReorder.forEach(material => {\n    report.recommendations.push(`Reorder ${material.name}: current stock ${material.currentStock} ${material.unit} below minimum ${material.minRequired} ${material.unit}`);\n  });\n}\n\nreturn [{json: report}];"
          }
        },
        {
          "id": "11",
          "name": "Webhook Trigger",
          "type": "n8n-nodes-base.webhook",
          "typeVersion": 1,
          "position": [
            500,
            250
          ],
          "parameters": {
            "path": "construction-site-monitoring",
            "responseMode": "lastNode",
            "options": {}
          }
        },
        {
          "id": "12",
          "name": "Validate Input Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            250
          ],
          "parameters": {
            "functionCode": "const data = items[0].json;\n\nif (!data || !data.taskType) {\n  return [\n    {\n      json: {\n        valid: false,\n        error: 'Missing required field: taskType',\n        originalData: data\n      }\n    }\n  ];\n}\n\nreturn [\n  {\n    json: {\n      valid: true,\n      taskType: data.taskType,\n      data: data\n    }\n  }\n];"
          }
        },
        {
          "id": "13",
          "name": "Input Valid?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            900,
            250
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{$json[\"valid\"]}}",
                  "operation": "equal",
                  "value2": true
                }
              ]
            }
          }
        },
        {
          "id": "14",
          "name": "Route By Task Type",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            1100,
            250
          ],
          "parameters": {
            "dataPropertyName": "taskType",
            "rules": [
              {
                "value": "safetyMonitoring",
                "output": 0
              },
              {
                "value": "workerTracking",
                "output": 1
              },
              {
                "value": "progressMonitoring",
                "output": 2
              },
              {
                "value": "emergencyProtocol",
                "output": 3
              },
              {
                "value": "inventoryManagement",
                "output": 4
              }
            ],
            "fallbackOutput": 5
          }
        },
        {
          "id": "15",
          "name": "Prepare Error Response",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            1300,
            250
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": [
              {
                "type": "string",
                "name": "status",
                "value": "error"
              },
              {
                "type": "string",
                "name": "message",
                "value": "={{ $json.error || 'Invalid input data' }}"
              },
              {
                "type": "object",
                "name": "originalData",
                "value": "={{ $json.originalData || {} }}"
              }
            ]
          }
        },
        {
          "id": "16",
          "name": "Merge All Results",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            1500,
            250
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "17",
          "name": "Format Response",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            100,
            400
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": [
              {
                "type": "string",
                "name": "status",
                "value": "={{ $json.status || 'success' }}"
              },
              {
                "type": "string",
                "name": "message",
                "value": "={{ $json.message || 'Operation completed successfully' }}"
              },
              {
                "type": "object",
                "name": "data",
                "value": "={{ $json.data || $json }}"
              },
              {
                "type": "string",
                "name": "timestamp",
                "value": "={{ $now.toISOString() }}"
              }
            ]
          }
        },
        {
          "id": "18",
          "name": "Respond To Webhook",
          "type": "n8n-nodes-base.respondToWebhook",
          "typeVersion": 1,
          "position": [
            300,
            400
          ],
          "parameters": {}
        },
        {
          "id": "19",
          "name": "Error Trigger",
          "type": "n8n-nodes-base.errorTrigger",
          "typeVersion": 1,
          "position": [
            500,
            400
          ],
          "parameters": {}
        },
        {
          "id": "20",
          "name": "Process Error",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            700,
            400
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": [
              {
                "type": "string",
                "name": "status",
                "value": "error"
              },
              {
                "type": "string",
                "name": "message",
                "value": "=An unexpected error occurred: {{ $json.error?.message || $json.error || 'Unknown error' }}"
              },
              {
                "type": "string",
                "name": "errorTimestamp",
                "value": "={{ $now.toISOString() }}"
              }
            ]
          }
        },
        {
          "id": "21",
          "name": "Prepare Data for Validation",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            400
          ],
          "parameters": {
            "functionCode": "// Prepare incoming data for validation\nconst inputData = items[0].json;\n\n// Standardize the format for validation\nconst dataToValidate = {\n  ...inputData,\n  timestamp: inputData.timestamp || new Date().toISOString(),\n  _validationContext: {\n    source: inputData.source || 'unknown',\n    validationStartTime: new Date().toISOString()\n  }\n};\n\nreturn [{json: dataToValidate}];"
          }
        },
        {
          "id": "22",
          "name": "Schema Validation",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            400
          ],
          "parameters": {
            "functionCode": "// Schema validation for construction site data\nconst data = items[0].json;\nconst errors = [];\n\n// Required fields based on data type\nconst requiredFields = {\n  safety: ['siteId', 'timestamp', 'safetyMetrics'],\n  progress: ['siteId', 'timestamp', 'completionPercentage'],\n  weather: ['siteId', 'timestamp', 'conditions'],\n  worker: ['siteId', 'timestamp', 'workerId', 'action'],\n  material: ['siteId', 'timestamp', 'materialType', 'quantity']\n};\n\n// Determine data type\nconst dataType = data.dataType || 'unknown';\n\n// Check required fields\nif (requiredFields[dataType]) {\n  for (const field of requiredFields[dataType]) {\n    if (data[field] === undefined) {\n      errors.push(`Missing required field: ${field} for ${dataType} data`);\n    }\n  }\n}\n\n// Add validation results\nreturn [{\n  json: {\n    ...data,\n    _validation: {\n      ...data._validation,\n      schema: {\n        valid: errors.length === 0,\n        errors: errors\n      }\n    }\n  }\n}];"
          }
        },
        {
          "id": "23",
          "name": "Type Checking",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            400
          ],
          "parameters": {
            "functionCode": "// Type checking for construction site data\nconst data = items[0].json;\nconst errors = [];\n\n// Type definitions\nconst typeChecks = {\n  safety: {\n    safetyMetrics: 'object',\n    'safetyMetrics.helmetCompliance': 'number',\n    'safetyMetrics.seatBeltCompliance': 'number'\n  },\n  progress: {\n    completionPercentage: 'number',\n    milestone: 'string'\n  },\n  weather: {\n    conditions: 'string',\n    temperature: 'number',\n    windSpeed: 'number'\n  },\n  worker: {\n    workerId: 'string',\n    action: 'string'\n  },\n  material: {\n    materialType: 'string',\n    quantity: 'number'\n  }\n};\n\n// Get data type\nconst dataType = data.dataType || 'unknown';\n\n// Perform type checking\nif (typeChecks[dataType]) {\n  for (const [field, expectedType] of Object.entries(typeChecks[dataType])) {\n    // Handle nested properties\n    if (field.includes('.')) {\n      const [parent, child] = field.split('.');\n      if (data[parent] && typeof data[parent][child] !== expectedType) {\n        errors.push(`Invalid type for ${field}: expected ${expectedType}, got ${typeof data[parent][child]}`);\n      }\n    } else if (data[field] !== undefined && typeof data[field] !== expectedType) {\n      errors.push(`Invalid type for ${field}: expected ${expectedType}, got ${typeof data[field]}`);\n    }\n  }\n}\n\n// Add validation results\nreturn [{\n  json: {\n    ...data,\n    _validation: {\n      ...data._validation,\n      typeCheck: {\n        valid: errors.length === 0,\n        errors: errors\n      }\n    }\n  }\n}];"
          }
        },
        {
          "id": "24",
          "name": "Business Rule Validation",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            400
          ],
          "parameters": {
            "functionCode": "// Business rule validation for construction site data\nconst data = items[0].json;\nconst errors = [];\n\n// Business rules\nconst businessRules = {\n  safety: [\n    // Safety compliance must be between 0-100%\n    () => {\n      if (data.safetyMetrics && data.safetyMetrics.helmetCompliance !== undefined) {\n        if (data.safetyMetrics.helmetCompliance < 0 || data.safetyMetrics.helmetCompliance > 100) {\n          errors.push('Helmet compliance must be between 0 and 100');\n        }\n      }\n      if (data.safetyMetrics && data.safetyMetrics.seatBeltCompliance !== undefined) {\n        if (data.safetyMetrics.seatBeltCompliance < 0 || data.safetyMetrics.seatBeltCompliance > 100) {\n          errors.push('Seat belt compliance must be between 0 and 100');\n        }\n      }\n    }\n  ],\n  progress: [\n    // Completion percentage must be between 0-100%\n    () => {\n      if (data.completionPercentage !== undefined) {\n        if (data.completionPercentage < 0 || data.completionPercentage > 100) {\n          errors.push('Completion percentage must be between 0 and 100');\n        }\n      }\n    }\n  ],\n  weather: [\n    // Wind speed validation for crane operations\n    () => {\n      if (data.windSpeed !== undefined && data.windSpeed > 20) {\n        data._validation = data._validation || {};\n        data._validation.warnings = data._validation.warnings || [];\n        data._validation.warnings.push('High wind speed detected - crane operations may be unsafe');\n      }\n    }\n  ],\n  material: [\n    // Material quantity must be positive\n    () => {\n      if (data.quantity !== undefined && data.quantity <= 0) {\n        errors.push('Material quantity must be positive');\n      }\n    }\n  ]\n};\n\n// Get data type\nconst dataType = data.dataType || 'unknown';\n\n// Apply business rules\nif (businessRules[dataType]) {\n  businessRules[dataType].forEach(rule => rule());\n}\n\n// Add validation results\nreturn [{\n  json: {\n    ...data,\n    _validation: {\n      ...data._validation,\n      businessRules: {\n        valid: errors.length === 0,\n        errors: errors\n      }\n    }\n  }\n}];"
          }
        },
        {
          "id": "25",
          "name": "Sanitize Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            550
          ],
          "parameters": {
            "functionCode": "// Sanitize data to prevent injection and ensure data quality\nconst data = items[0].json;\n\n// Helper function to sanitize strings\nfunction sanitizeString(str) {\n  if (typeof str !== 'string') return str;\n  // Remove any potentially dangerous HTML/script tags\n  return str.replace(/<[^>]*>?/gm, '')\n    .trim();\n}\n\n// Helper function to sanitize an object's string properties\nfunction sanitizeObject(obj) {\n  if (!obj || typeof obj !== 'object') return obj;\n  \n  const result = {};\n  for (const [key, value] of Object.entries(obj)) {\n    if (typeof value === 'string') {\n      result[key] = sanitizeString(value);\n    } else if (typeof value === 'object' && value !== null) {\n      result[key] = sanitizeObject(value);\n    } else {\n      result[key] = value;\n    }\n  }\n  return result;\n}\n\n// Sanitize all string fields\nconst sanitizedData = sanitizeObject(data);\n\n// Normalize certain fields\nif (sanitizedData.siteId) {\n  sanitizedData.siteId = sanitizedData.siteId.toUpperCase();\n}\n\nif (sanitizedData.timestamp) {\n  // Ensure timestamp is in ISO format\n  try {\n    sanitizedData.timestamp = new Date(sanitizedData.timestamp).toISOString();\n  } catch (e) {\n    sanitizedData.timestamp = new Date().toISOString();\n    sanitizedData._validation = sanitizedData._validation || {};\n    sanitizedData._validation.warnings = sanitizedData._validation.warnings || [];\n    sanitizedData._validation.warnings.push('Invalid timestamp format, using current time');\n  }\n}\n\nreturn [{\n  json: {\n    ...sanitizedData,\n    _validation: {\n      ...sanitizedData._validation,\n      sanitized: true\n    }\n  }\n}];"
          }
        },
        {
          "id": "26",
          "name": "Validation Decision",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            300,
            550
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json._validation && $json._validation.schema && $json._validation.schema.valid && $json._validation.typeCheck && $json._validation.typeCheck.valid && $json._validation.businessRules && $json._validation.businessRules.valid ? 'true' : 'false' }}",
                  "operation": "equal",
                  "value2": "true"
                }
              ]
            }
          }
        },
        {
          "id": "27",
          "name": "Format Validation Errors",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            550
          ],
          "parameters": {
            "functionCode": "// Format validation errors for response\nconst data = items[0].json;\nconst validation = data._validation || {};\n\n// Collect all errors\nconst allErrors = [\n  ...(validation.schema?.errors || []),\n  ...(validation.typeCheck?.errors || []),\n  ...(validation.businessRules?.errors || [])\n];\n\n// Collect all warnings\nconst allWarnings = validation.warnings || [];\n\n// Create error response\nconst errorResponse = {\n  valid: false,\n  originalData: { ...data },\n  errors: allErrors,\n  warnings: allWarnings,\n  timestamp: new Date().toISOString(),\n  message: 'Validation failed: ' + allErrors.join('; ')\n};\n\n// Remove validation details from the response\ndelete errorResponse.originalData._validation;\n\nreturn [{json: errorResponse}];"
          }
        },
        {
          "id": "28",
          "name": "Prepare For Next Section",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            550
          ],
          "parameters": {
            "functionCode": "// Prepare validated data for next processing section\nconst data = items[0].json;\n\n// Remove internal validation metadata\nconst { _validation, _validationContext, ...cleanData } = data;\n\n// Add validation summary\nconst processedData = {\n  ...cleanData,\n  validationSummary: {\n    valid: true,\n    warnings: _validation?.warnings || [],\n    validatedAt: new Date().toISOString()\n  }\n};\n\n// Add processing metadata\nprocessedData.processingMetadata = {\n  stage: 'validation_complete',\n  readyForProcessing: true,\n  validationDuration: _validationContext ? \n    (new Date() - new Date(_validationContext.validationStartTime)) : null\n};\n\nreturn [{json: processedData}];"
          }
        },
        {
          "id": "29",
          "name": "Data Processing Entry Point",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            550
          ],
          "parameters": {
            "functionCode": "// Initialize data processing\nconst inputData = items[0].json;\n\n// Add metadata and prepare for processing\nconst processedData = {\n  ...inputData,\n  processingStartTime: new Date().toISOString(),\n  processingStage: 'initial',\n  processingStatus: 'started'\n};\n\nreturn [{json: processedData}];"
          }
        },
        {
          "id": "30",
          "name": "Route By Data Type",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            1100,
            550
          ],
          "parameters": {
            "rules": [
              {
                "value1": "={{ $json.dataType }}",
                "value2": "safety",
                "output": 0
              },
              {
                "value1": "={{ $json.dataType }}",
                "value2": "progress",
                "output": 1
              },
              {
                "value1": "={{ $json.dataType }}",
                "value2": "inventory",
                "output": 2
              },
              {
                "value1": "={{ $json.dataType }}",
                "value2": "weather",
                "output": 3
              }
            ],
            "fallbackOutput": 4
          }
        },
        {
          "id": "31",
          "name": "Transform Safety Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            550
          ],
          "parameters": {
            "functionCode": "// Transform safety monitoring data\nconst data = items[0].json;\n\n// Normalize safety data format\nconst transformed = {\n  ...data,\n  safetyStatus: data.status || 'unknown',\n  complianceLevel: data.compliance || 0,\n  riskLevel: calculateRiskLevel(data),\n  processingStage: 'transformed',\n  lastUpdated: new Date().toISOString()\n};\n\n// Calculate risk level based on input data\nfunction calculateRiskLevel(data) {\n  let risk = 0;\n  if (data.hasOwnProperty('helmetDetection') && data.helmetDetection < 90) {\n    risk += 30;\n  }\n  if (data.hasOwnProperty('seatBeltUsage') && data.seatBeltUsage < 85) {\n    risk += 25;\n  }\n  if (data.hasOwnProperty('unauthorizedAccess') && data.unauthorizedAccess > 0) {\n    risk += 40;\n  }\n  return Math.min(risk, 100);\n}\n\nreturn [{json: transformed}];"
          }
        },
        {
          "id": "32",
          "name": "Transform Progress Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            550
          ],
          "parameters": {
            "functionCode": "// Transform construction progress data\nconst data = items[0].json;\n\n// Normalize progress data format\nconst transformed = {\n  ...data,\n  completionPercentage: data.completion || 0,\n  milestonesCompleted: data.milestones || [],\n  timelineStatus: assessTimelineStatus(data),\n  processingStage: 'transformed',\n  lastUpdated: new Date().toISOString()\n};\n\n// Assess if project is on schedule, ahead, or behind\nfunction assessTimelineStatus(data) {\n  if (!data.plannedCompletion || !data.actualCompletion) {\n    return 'unknown';\n  }\n  \n  const planned = new Date(data.plannedCompletion).getTime();\n  const actual = new Date(data.actualCompletion).getTime();\n  \n  if (planned > actual) return 'ahead';\n  if (planned < actual) return 'behind';\n  return 'on_schedule';\n}\n\nreturn [{json: transformed}];"
          }
        },
        {
          "id": "33",
          "name": "Transform Inventory Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            700
          ],
          "parameters": {
            "functionCode": "// Transform inventory and material data\nconst data = items[0].json;\n\n// Normalize inventory data format\nconst transformed = {\n  ...data,\n  materialsAvailable: data.materials || [],\n  stockLevels: calculateStockLevels(data),\n  lowStockItems: identifyLowStockItems(data),\n  processingStage: 'transformed',\n  lastUpdated: new Date().toISOString()\n};\n\n// Calculate current stock levels as percentages\nfunction calculateStockLevels(data) {\n  if (!data.materials || !Array.isArray(data.materials)) {\n    return {};\n  }\n  \n  const levels = {};\n  data.materials.forEach(material => {\n    if (material.name && material.hasOwnProperty('current') && material.hasOwnProperty('max')) {\n      levels[material.name] = (material.current / material.max) * 100;\n    }\n  });\n  \n  return levels;\n}\n\n// Identify items with low stock\nfunction identifyLowStockItems(data) {\n  if (!data.materials || !Array.isArray(data.materials)) {\n    return [];\n  }\n  \n  return data.materials\n    .filter(material => {\n      return material.hasOwnProperty('current') && \n             material.hasOwnProperty('max') && \n             (material.current / material.max) < 0.2;\n    })\n    .map(material => material.name);\n}\n\nreturn [{json: transformed}];"
          }
        },
        {
          "id": "34",
          "name": "Transform Weather Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            700
          ],
          "parameters": {
            "functionCode": "// Transform weather monitoring data\nconst data = items[0].json;\n\n// Normalize weather data format\nconst transformed = {\n  ...data,\n  weatherCondition: data.condition || 'unknown',\n  windSpeed: data.wind || 0,\n  temperature: data.temp || 0,\n  precipitation: data.rain || 0,\n  safetyImpact: assessWeatherSafetyImpact(data),\n  processingStage: 'transformed',\n  lastUpdated: new Date().toISOString()\n};\n\n// Assess weather impact on construction safety\nfunction assessWeatherSafetyImpact(data) {\n  let impact = 'low';\n  \n  // Check wind speed (dangerous for cranes)\n  if (data.wind && data.wind > 30) {\n    impact = 'critical';\n  } else if (data.wind && data.wind > 20) {\n    impact = 'high';\n  }\n  \n  // Check heavy rain (slippery conditions)\n  if (data.rain && data.rain > 15) {\n    impact = impact === 'critical' ? 'critical' : 'high';\n  }\n  \n  // Check extreme temperatures\n  if (data.temp && (data.temp > 35 || data.temp < -5)) {\n    impact = impact === 'low' ? 'medium' : impact;\n  }\n  \n  return impact;\n}\n\nreturn [{json: transformed}];"
          }
        },
        {
          "id": "35",
          "name": "Transform Unknown Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            700
          ],
          "parameters": {
            "functionCode": "// Handle unknown data types\nconst data = items[0].json;\n\n// Add basic processing metadata\nconst transformed = {\n  ...data,\n  processingStage: 'transformed',\n  processingNote: 'Unknown data type encountered',\n  lastUpdated: new Date().toISOString()\n};\n\nreturn [{json: transformed}];"
          }
        },
        {
          "id": "36",
          "name": "Merge Transformed Data",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            700,
            700
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "37",
          "name": "Enrich With Processing Metadata",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            900,
            700
          ],
          "parameters": {
            "values": {
              "string": [
                {
                  "name": "processorId",
                  "value": "construction-data-processor-v1"
                },
                {
                  "name": "processingTimestamp",
                  "value": "={{ $now.toISOString() }}"
                }
              ],
              "number": [
                {
                  "name": "processingDuration",
                  "value": "={{ Date.now() - new Date($json.processingStartTime).getTime() }}"
                }
              ]
            },
            "options": {}
          }
        },
        {
          "id": "38",
          "name": "Split Into Batches",
          "type": "n8n-nodes-base.splitInBatches",
          "typeVersion": 1,
          "position": [
            1100,
            700
          ],
          "parameters": {
            "batchSize": 10
          }
        },
        {
          "id": "39",
          "name": "Is Inventory Batch?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1300,
            700
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.dataType }}",
                  "operation": "equal",
                  "value2": "inventory"
                }
              ]
            }
          }
        },
        {
          "id": "40",
          "name": "Process Inventory Batch",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            700
          ],
          "parameters": {
            "functionCode": "// Special processing for inventory batches\nconst data = items[0].json;\n\n// Calculate reorder needs\nconst processed = {\n  ...data,\n  reorderNeeded: data.lowStockItems && data.lowStockItems.length > 0,\n  reorderList: data.lowStockItems || [],\n  reorderUrgency: calculateReorderUrgency(data),\n  processingStage: 'batch_processed'\n};\n\n// Determine how urgent reordering is\nfunction calculateReorderUrgency(data) {\n  if (!data.lowStockItems || data.lowStockItems.length === 0) {\n    return 'none';\n  }\n  \n  if (!data.stockLevels) {\n    return 'medium';\n  }\n  \n  // Check if any critical items are below 5%\n  const criticalMaterials = ['concrete', 'steel', 'lumber', 'safety_equipment'];\n  const hasCriticalShortage = data.lowStockItems.some(item => {\n    return criticalMaterials.includes(item) && data.stockLevels[item] < 5;\n  });\n  \n  if (hasCriticalShortage) {\n    return 'critical';\n  }\n  \n  return data.lowStockItems.length > 3 ? 'high' : 'medium';\n}\n\nreturn [{json: processed}];"
          }
        },
        {
          "id": "41",
          "name": "Process Other Batches",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            850
          ],
          "parameters": {
            "functionCode": "// Standard batch processing for non-inventory data\nconst data = items[0].json;\n\n// Add batch processing metadata\nconst processed = {\n  ...data,\n  batchProcessed: true,\n  batchTimestamp: new Date().toISOString(),\n  processingStage: 'batch_processed'\n};\n\n// Add type-specific processing if needed\nif (data.dataType === 'safety') {\n  processed.safetyActionRequired = data.riskLevel > 50;\n} else if (data.dataType === 'progress') {\n  processed.scheduleAdjustmentNeeded = data.timelineStatus === 'behind';\n} else if (data.dataType === 'weather') {\n  processed.operationsImpacted = data.safetyImpact === 'high' || data.safetyImpact === 'critical';\n}\n\nreturn [{json: processed}];"
          }
        },
        {
          "id": "42",
          "name": "Merge Batch Results",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            300,
            850
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "43",
          "name": "Is Last Batch?",
          "type": "n8n-nodes-base.splitInBatches",
          "typeVersion": 1,
          "position": [
            500,
            850
          ],
          "parameters": {
            "batchSize": 10
          }
        },
        {
          "id": "44",
          "name": "Continue Batch Processing",
          "type": "n8n-nodes-base.noOp",
          "typeVersion": 1,
          "position": [
            700,
            850
          ],
          "parameters": {}
        },
        {
          "id": "45",
          "name": "Aggregate Batch Results",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            850
          ],
          "parameters": {
            "functionCode": "// Aggregate all processed batches\nconst allItems = items.map(item => item.json);\n\n// Initialize aggregation containers\nconst aggregated = {\n  processingStage: 'aggregated',\n  timestamp: new Date().toISOString(),\n  typeBreakdown: {},\n  safetyMetrics: {\n    averageRiskLevel: 0,\n    highRiskCount: 0,\n    complianceRate: 0\n  },\n  progressMetrics: {\n    overallCompletion: 0,\n    behindScheduleItems: 0\n  },\n  inventoryMetrics: {\n    lowStockItemCount: 0,\n    criticalShortages: 0\n  },\n  weatherImpact: 'none',\n  criticalAlerts: []\n};\n\n// Count data types\nallItems.forEach(item => {\n  if (!item.dataType) return;\n  \n  aggregated.typeBreakdown[item.dataType] = \n    (aggregated.typeBreakdown[item.dataType] || 0) + 1;\n});\n\n// Calculate safety metrics\nconst safetyItems = allItems.filter(item => item.dataType === 'safety');\nif (safetyItems.length > 0) {\n  // Average risk level\n  const totalRisk = safetyItems.reduce((sum, item) => sum + (item.riskLevel || 0), 0);\n  aggregated.safetyMetrics.averageRiskLevel = totalRisk / safetyItems.length;\n  \n  // High risk count\n  aggregated.safetyMetrics.highRiskCount = \n    safetyItems.filter(item => (item.riskLevel || 0) > 70).length;\n  \n  // Compliance rate\n  const totalCompliance = safetyItems.reduce((sum, item) => \n    sum + (item.complianceLevel || 0), 0);\n  aggregated.safetyMetrics.complianceRate = totalCompliance / safetyItems.length;\n}\n\n// Calculate progress metrics\nconst progressItems = allItems.filter(item => item.dataType === 'progress');\nif (progressItems.length > 0) {\n  // Overall completion percentage\n  const totalCompletion = progressItems.reduce((sum, item) => \n    sum + (item.completionPercentage || 0), 0);\n  aggregated.progressMetrics.overallCompletion = totalCompletion / progressItems.length;\n  \n  // Behind schedule count\n  aggregated.progressMetrics.behindScheduleItems = \n    progressItems.filter(item => item.timelineStatus === 'behind').length;\n}\n\n// Calculate inventory metrics\nconst inventoryItems = allItems.filter(item => item.dataType === 'inventory');\nif (inventoryItems.length > 0) {\n  // Count low stock items\n  let lowStockCount = 0;\n  let criticalShortages = 0;\n  \n  inventoryItems.forEach(item => {\n    if (item.lowStockItems && Array.isArray(item.lowStockItems)) {\n      lowStockCount += item.lowStockItems.length;\n      \n      if (item.reorderUrgency === 'critical') {\n        criticalShortages++;\n      }\n    }\n  });\n  \n  aggregated.inventoryMetrics.lowStockItemCount = lowStockCount;\n  aggregated.inventoryMetrics.criticalShortages = criticalShortages;\n}\n\n// Determine overall weather impact\nconst weatherItems = allItems.filter(item => item.dataType === 'weather');\nif (weatherItems.length > 0) {\n  const impactLevels = weatherItems.map(item => item.safetyImpact || 'low');\n  \n  if (impactLevels.includes('critical')) {\n    aggregated.weatherImpact = 'critical';\n  } else if (impactLevels.includes('high')) {\n    aggregated.weatherImpact = 'high';\n  } else if (impactLevels.includes('medium')) {\n    aggregated.weatherImpact = 'medium';\n  } else {\n    aggregated.weatherImpact = 'low';\n  }\n}\n\n// Collect critical alerts\nallItems.forEach(item => {\n  // Safety alerts\n  if (item.dataType === 'safety' && (item.riskLevel || 0) > 70) {\n    aggregated.criticalAlerts.push({\n      type: 'safety',\n      level: 'high',\n      message: `High safety risk detected (${item.riskLevel})`\n    });\n  }\n  \n  // Inventory alerts\n  if (item.dataType === 'inventory' && item.reorderUrgency === 'critical') {\n    aggregated.criticalAlerts.push({\n      type: 'inventory',\n      level: 'critical',\n      message: `Critical material shortage: ${item.lowStockItems.join(', ')}`\n    });\n  }\n  \n  // Weather alerts\n  if (item.dataType === 'weather' && item.safetyImpact === 'critical') {\n    aggregated.criticalAlerts.push({\n      type: 'weather',\n      level: 'critical',\n      message: `Dangerous weather conditions detected: ${item.weatherCondition}`\n    });\n  }\n});\n\nreturn [{json: aggregated}];"
          }
        },
        {
          "id": "46",
          "name": "Has Critical Issues?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1100,
            850
          ],
          "parameters": {
            "conditions": {
              "number": [
                {
                  "value1": "={{ $json.criticalAlerts.length }}",
                  "operation": "larger",
                  "value2": 0
                }
              ]
            }
          }
        },
        {
          "id": "47",
          "name": "Generate Critical Issues Summary",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            850
          ],
          "parameters": {
            "functionCode": "// Generate summary for critical issues\nconst data = items[0].json;\n\n// Create a detailed critical issues report\nconst criticalSummary = {\n  ...data,\n  summaryType: 'critical',\n  criticalIssuesCount: data.criticalAlerts.length,\n  priorityLevel: 'high',\n  requiresImmediate: true,\n  summaryText: generateCriticalSummaryText(data),\n  processingStage: 'summarized'\n};\n\nfunction generateCriticalSummaryText(data) {\n  if (!data.criticalAlerts || data.criticalAlerts.length === 0) {\n    return 'No critical issues found.';\n  }\n  \n  let summary = `ATTENTION: ${data.criticalAlerts.length} critical issue(s) detected:\\n\\n`;\n  \n  data.criticalAlerts.forEach((alert, index) => {\n    summary += `${index + 1}. [${alert.type.toUpperCase()}] ${alert.message}\\n`;\n  });\n  \n  // Add recommendations based on alert types\n  const alertTypes = data.criticalAlerts.map(a => a.type);\n  \n  if (alertTypes.includes('safety')) {\n    summary += '\\nSAFETY RECOMMENDATION: Conduct immediate safety inspection.';\n  }\n  \n  if (alertTypes.includes('inventory')) {\n    summary += '\\nINVENTORY RECOMMENDATION: Place emergency material orders.';\n  }\n  \n  if (alertTypes.includes('weather')) {\n    summary += '\\nWEATHER RECOMMENDATION: Consider suspending outdoor operations.';\n  }\n  \n  return summary;\n}\n\nreturn [{json: criticalSummary}];"
          }
        },
        {
          "id": "48",
          "name": "Generate Standard Summary",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            850
          ],
          "parameters": {
            "functionCode": "// Generate standard summary report\nconst data = items[0].json;\n\n// Create a general summary of all processed data\nconst standardSummary = {\n  ...data,\n  summaryType: 'standard',\n  priorityLevel: 'normal',\n  requiresImmediate: false,\n  summaryText: generateStandardSummaryText(data),\n  processingStage: 'summarized'\n};\n\nfunction generateStandardSummaryText(data) {\n  let summary = 'Construction Site Status Summary:\\n\\n';\n  \n  // Safety section\n  summary += 'SAFETY STATUS:\\n';\n  summary += `- Average Risk Level: ${data.safetyMetrics.averageRiskLevel.toFixed(1)}%\\n`;\n  summary += `- Compliance Rate: ${data.safetyMetrics.complianceRate.toFixed(1)}%\\n`;\n  summary += `- High Risk Incidents: ${data.safetyMetrics.highRiskCount}\\n\\n`;\n  \n  // Progress section\n  summary += 'PROGRESS STATUS:\\n';\n  summary += `- Overall Completion: ${data.progressMetrics.overallCompletion.toFixed(1)}%\\n`;\n  summary += `- Tasks Behind Schedule: ${data.progressMetrics.behindScheduleItems}\\n\\n`;\n  \n  // Inventory section\n  summary += 'INVENTORY STATUS:\\n';\n  summary += `- Low Stock Items: ${data.inventoryMetrics.lowStockItemCount}\\n`;\n  summary += `- Critical Shortages: ${data.inventoryMetrics.criticalShortages}\\n\\n`;\n  \n  // Weather section\n  summary += 'WEATHER STATUS:\\n';\n  summary += `- Impact Level: ${data.weatherImpact.toUpperCase()}\\n\\n`;\n  \n  // Add recommendations\n  summary += 'RECOMMENDATIONS:\\n';\n  \n  if (data.safetyMetrics.averageRiskLevel > 40) {\n    summary += '- Schedule additional safety training\\n';\n  }\n  \n  if (data.progressMetrics.behindScheduleItems > 0) {\n    summary += '- Review project timeline and resource allocation\\n';\n  }\n  \n  if (data.inventoryMetrics.lowStockItemCount > 0) {\n    summary += '- Replenish inventory for low stock items\\n';\n  }\n  \n  if (data.weatherImpact !== 'low') {\n    summary += '- Monitor weather conditions closely\\n';\n  }\n  \n  return summary;\n}\n\nreturn [{json: standardSummary}];"
          }
        },
        {
          "id": "49",
          "name": "Merge Summaries",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            100,
            1000
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "50",
          "name": "Fetch Weather Forecast",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            300,
            1000
          ],
          "parameters": {
            "url": "https://api.weather.example.com/forecast",
            "method": "GET",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "options": {
              "timeout": 5000
            }
          }
        },
        {
          "id": "51",
          "name": "Fetch Supplier Inventory",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            500,
            1000
          ],
          "parameters": {
            "url": "https://api.supplier.example.com/inventory",
            "method": "GET",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "options": {
              "timeout": 5000
            }
          }
        },
        {
          "id": "52",
          "name": "Enrich With External Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            1000
          ],
          "parameters": {
            "functionCode": "// Enrich processed data with external API data\nconst mainData = items[0].json;\nconst weatherData = items[1]?.json || { forecast: 'unavailable' };\nconst supplierData = items[2]?.json || { inventory: 'unavailable' };\n\n// Combine all data sources\nconst enriched = {\n  ...mainData,\n  externalData: {\n    weatherForecast: processWeatherForecast(weatherData),\n    supplierInventory: processSupplierInventory(supplierData)\n  },\n  processingStage: 'enriched'\n};\n\n// Process weather forecast data\nfunction processWeatherForecast(data) {\n  if (data.forecast === 'unavailable') {\n    return {\n      available: false,\n      forecast: 'Data unavailable'\n    };\n  }\n  \n  try {\n    // Extract relevant forecast information\n    return {\n      available: true,\n      nextThreeDays: data.forecast?.daily?.slice(0, 3) || [],\n      constructionImpact: assessWeatherImpact(data.forecast)\n    };\n  } catch (error) {\n    return {\n      available: false,\n      error: 'Error processing weather data'\n    };\n  }\n}\n\n// Assess weather impact on construction\nfunction assessWeatherImpact(forecast) {\n  if (!forecast || !forecast.daily || !Array.isArray(forecast.daily)) {\n    return 'unknown';\n  }\n  \n  // Check next 3 days for severe conditions\n  const nextThreeDays = forecast.daily.slice(0, 3);\n  \n  const hasSevereConditions = nextThreeDays.some(day => {\n    return (\n      (day.wind_speed > 30) || // High winds\n      (day.precipitation > 25) || // Heavy rain\n      (day.temp_max > 38) || // Extreme heat\n      (day.temp_min < -10) // Extreme cold\n    );\n  });\n  \n  return hasSevereConditions ? 'high' : 'low';\n}\n\n// Process supplier inventory data\nfunction processSupplierInventory(data) {\n  if (data.inventory === 'unavailable') {\n    return {\n      available: false,\n      inventory: 'Data unavailable'\n    };\n  }\n  \n  try {\n    // Extract relevant inventory information\n    const lowStockItems = mainData.inventoryMetrics?.lowStockItemCount > 0 ?\n      mainData.criticalAlerts\n        .filter(alert => alert.type === 'inventory')\n        .map(alert => alert.message.split(':')[1]?.trim().split(', ') || [])\n        .flat()\n      : [];\n    \n    // Check availability of needed items from supplier\n    const supplierAvailability = {};\n    \n    if (Array.isArray(data.inventory)) {\n      lowStockItems.forEach(item => {\n        const supplierItem = data.inventory.find(i => \n          i.name.toLowerCase() === item.toLowerCase());\n        \n        supplierAvailability[item] = supplierItem ? {\n          available: supplierItem.inStock,\n          quantity: supplierItem.quantity,\n          deliveryTime: supplierItem.deliveryDays\n        } : {\n          available: false\n        };\n      });\n    }\n    \n    return {\n      available: true,\n      neededItems: lowStockItems,\n      supplierAvailability\n    };\n  } catch (error) {\n    return {\n      available: false,\n      error: 'Error processing supplier data'\n    };\n  }\n}\n\nreturn [{json: enriched}];"
          }
        },
        {
          "id": "53",
          "name": "Any Alerts To Process?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            900,
            1000
          ],
          "parameters": {
            "conditions": {
              "number": [
                {
                  "value1": "={{ $json.criticalAlerts.length }}",
                  "operation": "larger",
                  "value2": 0
                }
              ]
            }
          }
        },
        {
          "id": "54",
          "name": "Format Alerts For Notification",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            1000
          ],
          "parameters": {
            "functionCode": "// Format alerts for notification systems\nconst data = items[0].json;\n\n// Prepare alert notifications\nconst formatted = {\n  ...data,\n  notifications: {\n    email: formatEmailAlerts(data),\n    sms: formatSmsAlerts(data),\n    dashboard: formatDashboardAlerts(data)\n  },\n  processingStage: 'alert_formatted'\n};\n\n// Format alerts for email notifications\nfunction formatEmailAlerts(data) {\n  if (!data.criticalAlerts || data.criticalAlerts.length === 0) {\n    return null;\n  }\n  \n  return {\n    subject: `ALERT: ${data.criticalAlerts.length} Critical Construction Site Issues Detected`,\n    body: `\n      <h2>Construction Site Critical Alerts</h2>\n      <p>The following critical issues require immediate attention:</p>\n      <ul>\n        ${data.criticalAlerts.map(alert => `\n          <li><strong>${alert.type.toUpperCase()}:</strong> ${alert.message}</li>\n        `).join('')}\n      </ul>\n      <p>Please take appropriate action immediately.</p>\n      <p>For complete details, please check the construction monitoring dashboard.</p>\n    `,\n    recipients: ['site_manager@example.com', 'safety_officer@example.com']\n  };\n}\n\n// Format alerts for SMS notifications\nfunction formatSmsAlerts(data) {\n  if (!data.criticalAlerts || data.criticalAlerts.length === 0) {\n    return null;\n  }\n  \n  // Only send SMS for high-priority alerts\n  const highPriorityAlerts = data.criticalAlerts.filter(alert => \n    alert.level === 'critical');\n  \n  if (highPriorityAlerts.length === 0) {\n    return null;\n  }\n  \n  return {\n    message: `URGENT: ${highPriorityAlerts.length} critical construction site issue(s) detected. ${highPriorityAlerts.map(a => a.message).join('. ')}`,\n    recipients: ['+15551234567', '+15557654321']\n  };\n}\n\n// Format alerts for dashboard display\nfunction formatDashboardAlerts(data) {\n  if (!data.criticalAlerts || data.criticalAlerts.length === 0) {\n    return [];\n  }\n  \n  return data.criticalAlerts.map(alert => ({\n    id: `alert-${Date.now()}-${Math.floor(Math.random() * 1000)}`,\n    type: alert.type,\n    level: alert.level,\n    message: alert.message,\n    timestamp: new Date().toISOString(),\n    acknowledged: false\n  }));\n}\n\nreturn [{json: formatted}];"
          }
        },
        {
          "id": "55",
          "name": "Data Processing Output",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            1300,
            1000
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "56",
          "name": "Start External Integrations",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            1000
          ],
          "parameters": {
            "functionCode": "// Initialize external integration flow\nconst data = $input.item.json;\nreturn [{json: {\n  data,\n  integrationStartTime: new Date().toISOString(),\n  integrationsToRun: ['weather', 'supplier', 'equipment']\n}}];"
          }
        },
        {
          "id": "57",
          "name": "Route External Integration",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            100,
            1150
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{ $json.integrationsToRun[0] }}",
            "rules": [
              {
                "value2": "weather",
                "output": 0
              },
              {
                "value2": "supplier",
                "output": 1
              },
              {
                "value2": "equipment",
                "output": 2
              }
            ],
            "fallbackOutput": 3
          }
        },
        {
          "id": "58",
          "name": "Weather API Authentication",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            300,
            1150
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": [
              {
                "name": "apiKey",
                "value": "={{ $env.WEATHER_API_KEY }}"
              },
              {
                "name": "baseUrl",
                "value": "https://api.weatherapi.com/v1"
              },
              {
                "name": "originalData",
                "value": "={{ $json }}"
              }
            ]
          }
        },
        {
          "id": "59",
          "name": "Fetch Weather Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            500,
            1150
          ],
          "parameters": {
            "url": "={{ $json.baseUrl }}/forecast.json",
            "method": "GET",
            "authentication": "predefinedCredentialType",
            "queryParameters": {
              "parameters": [
                {
                  "name": "key",
                  "value": "={{ $json.apiKey }}"
                },
                {
                  "name": "q",
                  "value": "={{ $json.originalData.siteLocation || \"New York\" }}"
                },
                {
                  "name": "days",
                  "value": "3"
                }
              ]
            },
            "options": {
              "timeout": 5000,
              "response": {
                "response": {
                  "fullResponse": true
                }
              }
            }
          }
        },
        {
          "id": "60",
          "name": "Validate Weather Response",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            700,
            1150
          ],
          "parameters": {
            "conditions": {
              "number": [
                {
                  "value1": "={{ $json.statusCode }}",
                  "operation": "equal",
                  "value2": 200
                }
              ]
            }
          }
        },
        {
          "id": "61",
          "name": "Wait Before Retry",
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1,
          "position": [
            900,
            1150
          ],
          "parameters": {
            "amount": 1,
            "unit": "minutes"
          }
        },
        {
          "id": "62",
          "name": "Map Weather Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            1150
          ],
          "parameters": {
            "functionCode": "// Map and clean weather data\nconst responseData = $input.item.json.body;\nconst originalData = $input.item.json.originalData;\n\nconst mappedData = {\n  originalData,\n  weather: {\n    location: responseData.location.name,\n    current: {\n      temp_c: responseData.current.temp_c,\n      wind_kph: responseData.current.wind_kph,\n      precip_mm: responseData.current.precip_mm,\n      condition: responseData.current.condition.text\n    },\n    forecast: responseData.forecast.forecastday.map(day => ({\n      date: day.date,\n      maxtemp_c: day.day.maxtemp_c,\n      mintemp_c: day.day.mintemp_c,\n      condition: day.day.condition.text,\n      precip_mm: day.day.totalprecip_mm\n    }))\n  },\n  integrationsToRun: originalData.integrationsToRun.slice(1)\n};\n\nreturn [{json: mappedData}];"
          }
        },
        {
          "id": "63",
          "name": "Supplier API Authentication",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            1300,
            1150
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": [
              {
                "name": "apiKey",
                "value": "={{ $env.SUPPLIER_API_KEY }}"
              },
              {
                "name": "baseUrl",
                "value": "https://api.constructionsupplier.com/v2"
              },
              {
                "name": "originalData",
                "value": "={{ $json }}"
              }
            ]
          }
        },
        {
          "id": "64",
          "name": "Fetch Supplier Inventory",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1500,
            1150
          ],
          "parameters": {
            "url": "={{ $json.baseUrl }}/inventory",
            "method": "GET",
            "authentication": "headerAuth",
            "headerParameters": {
              "parameters": [
                {
                  "name": "X-API-Key",
                  "value": "={{ $json.apiKey }}"
                },
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "options": {
              "timeout": 5000,
              "response": {
                "response": {
                  "fullResponse": true
                }
              }
            }
          }
        },
        {
          "id": "65",
          "name": "Validate Supplier Response",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            100,
            1300
          ],
          "parameters": {
            "conditions": {
              "number": [
                {
                  "value1": "={{ $json.statusCode }}",
                  "operation": "equal",
                  "value2": 200
                }
              ]
            }
          }
        },
        {
          "id": "66",
          "name": "Wait Before Supplier Retry",
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1,
          "position": [
            300,
            1300
          ],
          "parameters": {
            "amount": 1,
            "unit": "minutes"
          }
        },
        {
          "id": "67",
          "name": "Map Supplier Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            1300
          ],
          "parameters": {
            "functionCode": "// Map and clean supplier data\nconst responseData = $input.item.json.body;\nconst originalData = $input.item.json.originalData;\n\nconst mappedData = {\n  originalData,\n  supplier: {\n    materials: responseData.materials.map(item => ({\n      id: item.id,\n      name: item.name,\n      quantity: item.availableQuantity,\n      price: item.unitPrice,\n      deliveryTime: item.estimatedDeliveryDays\n    })),\n    lowStock: responseData.materials.filter(item => item.availableQuantity < item.minimumThreshold)\n      .map(item => item.name)\n  },\n  integrationsToRun: originalData.integrationsToRun.slice(1)\n};\n\nreturn [{json: mappedData}];"
          }
        },
        {
          "id": "68",
          "name": "Equipment API Authentication",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            700,
            1300
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": [
              {
                "name": "apiKey",
                "value": "={{ $env.EQUIPMENT_API_KEY }}"
              },
              {
                "name": "baseUrl",
                "value": "https://api.constructionequipment.com/v1"
              },
              {
                "name": "originalData",
                "value": "={{ $json }}"
              }
            ]
          }
        },
        {
          "id": "69",
          "name": "Fetch Equipment Status",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            900,
            1300
          ],
          "parameters": {
            "url": "={{ $json.baseUrl }}/equipment/status",
            "method": "GET",
            "authentication": "headerAuth",
            "headerParameters": {
              "parameters": [
                {
                  "name": "Authorization",
                  "value": "Bearer {{ $json.apiKey }}"
                }
              ]
            },
            "queryParameters": {
              "parameters": [
                {
                  "name": "site_id",
                  "value": "={{ $json.originalData.siteId || \"SITE001\" }}"
                }
              ]
            },
            "options": {
              "timeout": 5000,
              "response": {
                "response": {
                  "fullResponse": true
                }
              }
            }
          }
        },
        {
          "id": "70",
          "name": "Validate Equipment Response",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1100,
            1300
          ],
          "parameters": {
            "conditions": {
              "number": [
                {
                  "value1": "={{ $json.statusCode }}",
                  "operation": "equal",
                  "value2": 200
                }
              ]
            }
          }
        },
        {
          "id": "71",
          "name": "Map Equipment Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            1300
          ],
          "parameters": {
            "functionCode": "// Map and clean equipment data\nconst responseData = $input.item.json.body;\nconst originalData = $input.item.json.originalData;\n\nconst mappedData = {\n  originalData,\n  equipment: {\n    active: responseData.equipment.filter(item => item.status === 'active').length,\n    maintenance: responseData.equipment.filter(item => item.status === 'maintenance').length,\n    offline: responseData.equipment.filter(item => item.status === 'offline').length,\n    items: responseData.equipment.map(item => ({\n      id: item.id,\n      type: item.type,\n      status: item.status,\n      lastMaintenance: item.lastMaintenanceDate,\n      location: item.currentLocation\n    })),\n    requiresMaintenance: responseData.equipment\n      .filter(item => item.maintenanceDue)\n      .map(item => item.id)\n  },\n  integrationsToRun: originalData.integrationsToRun.slice(1)\n};\n\nreturn [{json: mappedData}];"
          }
        },
        {
          "id": "72",
          "name": "Wait Before Equipment Retry",
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1,
          "position": [
            1500,
            1300
          ],
          "parameters": {
            "amount": 1,
            "unit": "minutes"
          }
        },
        {
          "id": "73",
          "name": "Combine External Data",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            100,
            1450
          ],
          "parameters": {
            "mode": "mergeByPosition"
          }
        },
        {
          "id": "74",
          "name": "Classify Error",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            1450
          ],
          "parameters": {
            "functionCode": "// Get the error information from the workflow data\nconst error = $input.all()[0].json.error || {};\nconst errorMessage = error.message || 'Unknown error';\nconst errorStack = error.stack || '';\n\n// Classify the error based on message and stack\nlet errorType = 'UNKNOWN';\nlet severity = 'MEDIUM';\nlet requiresNotification = true;\n\n// API related errors\nif (errorMessage.includes('ECONNREFUSED') || \n    errorMessage.includes('timeout') || \n    errorMessage.includes('status code 5') || \n    errorMessage.includes('status code 4')) {\n  errorType = 'API_ERROR';\n  severity = 'HIGH';\n  \n  // More specific API error classification\n  if (errorMessage.includes('status code 429')) {\n    errorType = 'API_RATE_LIMIT';\n    severity = 'MEDIUM';\n  } else if (errorMessage.includes('status code 503') || errorMessage.includes('status code 502')) {\n    errorType = 'API_UNAVAILABLE';\n    severity = 'HIGH';\n  } else if (errorMessage.includes('status code 401') || errorMessage.includes('status code 403')) {\n    errorType = 'API_AUTHENTICATION';\n    severity = 'HIGH';\n  }\n} \n// Database errors\nelse if (errorMessage.includes('database') || \n         errorMessage.includes('sql') || \n         errorMessage.includes('query')) {\n  errorType = 'DATABASE_ERROR';\n  severity = 'HIGH';\n} \n// Data validation errors\nelse if (errorMessage.includes('validation') || \n         errorMessage.includes('invalid') || \n         errorMessage.includes('schema')) {\n  errorType = 'VALIDATION_ERROR';\n  severity = 'MEDIUM';\n  requiresNotification = false;\n} \n// File system errors\nelse if (errorMessage.includes('ENOENT') || \n         errorMessage.includes('file') || \n         errorMessage.includes('directory')) {\n  errorType = 'FILESYSTEM_ERROR';\n  severity = 'MEDIUM';\n}\n// Construction site specific errors\nelse if (errorMessage.toLowerCase().includes('sensor') || \n         errorMessage.toLowerCase().includes('camera') || \n         errorMessage.toLowerCase().includes('device')) {\n  errorType = 'DEVICE_ERROR';\n  severity = 'HIGH';\n}\n// Safety related errors should be critical\nelse if (errorMessage.toLowerCase().includes('safety') || \n         errorMessage.toLowerCase().includes('emergency') || \n         errorMessage.toLowerCase().includes('critical')) {\n  errorType = 'SAFETY_ERROR';\n  severity = 'CRITICAL';\n  requiresNotification = true;\n}\n\n// Return the classified error\nreturn [{\n  json: {\n    error,\n    errorMessage,\n    errorType,\n    severity,\n    requiresNotification,\n    timestamp: new Date().toISOString(),\n    workflowName: $workflow.name,\n    nodeNameWhereErrorOccurred: error.node || 'Unknown node'\n  }\n}];"
          }
        },
        {
          "id": "75",
          "name": "Determine Recovery Strategy",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            1450
          ],
          "parameters": {
            "functionCode": "// Get the classified error information\nconst errorInfo = $input.all()[0].json;\n\n// Initialize recovery strategy\nlet recoveryStrategy = {\n  action: 'NOTIFY_ONLY', // Default action\n  retryCount: 0,\n  retryDelay: 0,\n  fallbackData: null,\n  escalationRequired: false\n};\n\nswitch(errorInfo.errorType) {\n  case 'API_ERROR':\n  case 'API_UNAVAILABLE':\n    recoveryStrategy.action = 'RETRY';\n    recoveryStrategy.retryCount = 3;\n    recoveryStrategy.retryDelay = 5000; // 5 seconds\n    recoveryStrategy.fallbackData = { useFallbackData: true };\n    break;\n    \n  case 'API_RATE_LIMIT':\n    recoveryStrategy.action = 'RETRY_WITH_BACKOFF';\n    recoveryStrategy.retryCount = 5;\n    recoveryStrategy.retryDelay = 10000; // 10 seconds initial, will increase with backoff\n    break;\n    \n  case 'API_AUTHENTICATION':\n    recoveryStrategy.action = 'REFRESH_AUTH_AND_RETRY';\n    recoveryStrategy.retryCount = 1;\n    recoveryStrategy.escalationRequired = true;\n    break;\n    \n  case 'DATABASE_ERROR':\n    recoveryStrategy.action = 'RETRY';\n    recoveryStrategy.retryCount = 2;\n    recoveryStrategy.retryDelay = 3000; // 3 seconds\n    recoveryStrategy.escalationRequired = true;\n    break;\n    \n  case 'VALIDATION_ERROR':\n    recoveryStrategy.action = 'LOG_ONLY';\n    recoveryStrategy.fallbackData = { skipInvalidData: true };\n    break;\n    \n  case 'FILESYSTEM_ERROR':\n    recoveryStrategy.action = 'RETRY';\n    recoveryStrategy.retryCount = 2;\n    recoveryStrategy.retryDelay = 2000; // 2 seconds\n    break;\n    \n  case 'DEVICE_ERROR':\n    recoveryStrategy.action = 'NOTIFY_AND_FALLBACK';\n    recoveryStrategy.fallbackData = { useLastKnownGoodData: true };\n    recoveryStrategy.escalationRequired = true;\n    break;\n    \n  case 'SAFETY_ERROR':\n    recoveryStrategy.action = 'EMERGENCY_PROTOCOL';\n    recoveryStrategy.escalationRequired = true;\n    break;\n    \n  default:\n    recoveryStrategy.action = 'NOTIFY_ONLY';\n    if (errorInfo.severity === 'HIGH' || errorInfo.severity === 'CRITICAL') {\n      recoveryStrategy.escalationRequired = true;\n    }\n}\n\n// For construction site monitoring, add site-specific recovery info\nrecoveryStrategy.constructionSiteInfo = {\n  siteId: $input.all()[0].json.siteId || 'unknown',\n  requiresOnSiteInspection: errorInfo.severity === 'CRITICAL' || errorInfo.errorType === 'SAFETY_ERROR',\n  affectedSystems: determineAffectedSystems(errorInfo.errorMessage)\n};\n\n// Helper function to determine affected systems\nfunction determineAffectedSystems(errorMessage) {\n  const systems = [];\n  const errorLower = errorMessage.toLowerCase();\n  \n  if (errorLower.includes('camera') || errorLower.includes('image') || errorLower.includes('photo')) {\n    systems.push('CAMERA_SYSTEM');\n  }\n  if (errorLower.includes('sensor') || errorLower.includes('reading') || errorLower.includes('measurement')) {\n    systems.push('SENSOR_NETWORK');\n  }\n  if (errorLower.includes('drone') || errorLower.includes('aerial')) {\n    systems.push('DRONE_OPERATIONS');\n  }\n  if (errorLower.includes('weather') || errorLower.includes('wind') || errorLower.includes('rain')) {\n    systems.push('WEATHER_MONITORING');\n  }\n  if (errorLower.includes('worker') || errorLower.includes('personnel') || errorLower.includes('staff')) {\n    systems.push('PERSONNEL_TRACKING');\n  }\n  if (errorLower.includes('crane') || errorLower.includes('equipment') || errorLower.includes('machinery')) {\n    systems.push('EQUIPMENT_MONITORING');\n  }\n  if (errorLower.includes('material') || errorLower.includes('inventory') || errorLower.includes('stock')) {\n    systems.push('INVENTORY_SYSTEM');\n  }\n  \n  return systems.length > 0 ? systems : ['UNKNOWN_SYSTEM'];\n}\n\nreturn [{\n  json: {\n    ...errorInfo,\n    recoveryStrategy\n  }\n}];"
          }
        },
        {
          "id": "76",
          "name": "Execute Fallback Processing",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            1450
          ],
          "parameters": {
            "functionCode": "// Get the error info and recovery strategy\nconst errorData = $input.all()[0].json;\nconst strategy = errorData.recoveryStrategy;\n\n// Initialize fallback result\nlet fallbackResult = {\n  success: false,\n  fallbackUsed: false,\n  fallbackType: 'NONE',\n  originalError: errorData.errorMessage,\n  result: null\n};\n\n// Apply different fallback strategies based on the recovery action\nswitch(strategy.action) {\n  case 'RETRY':\n  case 'RETRY_WITH_BACKOFF':\n  case 'REFRESH_AUTH_AND_RETRY':\n    // For construction site monitoring, we might not be able to retry immediately\n    // but we can prepare fallback data for manual intervention\n    fallbackResult.fallbackUsed = true;\n    fallbackResult.fallbackType = 'MANUAL_INTERVENTION_REQUIRED';\n    fallbackResult.success = true; // Mark as success to continue workflow\n    \n    // Prepare instructions for manual intervention\n    if (strategy.constructionSiteInfo.requiresOnSiteInspection) {\n      fallbackResult.result = {\n        message: 'On-site inspection required',\n        systems: strategy.constructionSiteInfo.affectedSystems,\n        priority: errorData.severity,\n        instructions: generateInspectionInstructions(errorData, strategy)\n      };\n    } else {\n      fallbackResult.result = {\n        message: 'Remote verification required',\n        systems: strategy.constructionSiteInfo.affectedSystems,\n        priority: errorData.severity,\n        instructions: 'Verify system status remotely and restart affected components if necessary.'\n      };\n    }\n    break;\n    \n  case 'NOTIFY_AND_FALLBACK':\n  case 'EMERGENCY_PROTOCOL':\n    fallbackResult.fallbackUsed = true;\n    fallbackResult.fallbackType = 'EMERGENCY_PROTOCOL_ACTIVATED';\n    fallbackResult.success = true;\n    \n    // For safety-critical systems, generate emergency response protocol\n    if (errorData.errorType === 'SAFETY_ERROR') {\n      fallbackResult.result = {\n        message: 'EMERGENCY PROTOCOL ACTIVATED',\n        protocol: 'SAFETY_VIOLATION_PROTOCOL',\n        actions: [\n          'Suspend all affected operations immediately',\n          'Notify site safety officer',\n          'Evacuate affected areas if necessary',\n          'Initiate emergency response team if required',\n          'Document incident details'\n        ],\n        affectedAreas: determineAffectedAreas(strategy.constructionSiteInfo.affectedSystems)\n      };\n    } else {\n      fallbackResult.result = {\n        message: 'System fallback initiated',\n        protocol: 'SYSTEM_DEGRADATION_PROTOCOL',\n        actions: [\n          'Switch to backup systems if available',\n          'Limit operations in affected areas',\n          'Schedule maintenance team inspection'\n        ],\n        affectedSystems: strategy.constructionSiteInfo.affectedSystems\n      };\n    }\n    break;\n    \n  case 'LOG_ONLY':\n  case 'NOTIFY_ONLY':\n    fallbackResult.fallbackUsed = false;\n    fallbackResult.fallbackType = 'LOGGING_ONLY';\n    fallbackResult.success = true;\n    fallbackResult.result = {\n      message: 'Error logged, no fallback action required',\n      recommendation: 'Review logs for non-critical errors'\n    };\n    break;\n    \n  default:\n    fallbackResult.fallbackUsed = false;\n    fallbackResult.fallbackType = 'UNKNOWN_STRATEGY';\n    fallbackResult.success = false;\n    fallbackResult.result = {\n      message: 'No fallback strategy available for this error type',\n      recommendation: 'Manual intervention required'\n    };\n}\n\n// Helper function to generate inspection instructions\nfunction generateInspectionInstructions(errorData, strategy) {\n  const systems = strategy.constructionSiteInfo.affectedSystems;\n  let instructions = [];\n  \n  if (systems.includes('CAMERA_SYSTEM')) {\n    instructions.push('Verify camera power and network connections');\n    instructions.push('Check for physical obstructions or damage to cameras');\n    instructions.push('Confirm proper alignment of safety monitoring cameras');\n  }\n  \n  if (systems.includes('SENSOR_NETWORK')) {\n    instructions.push('Check sensor power supplies and connections');\n    instructions.push('Verify sensor calibration if applicable');\n    instructions.push('Inspect for environmental interference or damage');\n  }\n  \n  if (systems.includes('DRONE_OPERATIONS')) {\n    instructions.push('Inspect drone for physical damage');\n    instructions.push('Check battery levels and charging system');\n    instructions.push('Verify communication systems and control links');\n  }\n  \n  if (systems.includes('WEATHER_MONITORING')) {\n    instructions.push('Check weather station sensors and connections');\n    instructions.push('Verify data transmission from weather monitoring systems');\n    instructions.push('Inspect for damage from recent weather events');\n  }\n  \n  if (systems.includes('EQUIPMENT_MONITORING')) {\n    instructions.push('Verify crane sensor connections and power');\n    instructions.push('Check wind speed sensors on elevated equipment');\n    instructions.push('Inspect equipment monitoring system for damage');\n  }\n  \n  return instructions.length > 0 ? instructions : ['Perform general system inspection and restart affected components'];\n}\n\n// Helper function to determine affected areas based on systems\nfunction determineAffectedAreas(systems) {\n  const areas = [];\n  \n  if (systems.includes('CRANE_OPERATIONS') || systems.includes('EQUIPMENT_MONITORING')) {\n    areas.push('Heavy Equipment Zones');\n  }\n  \n  if (systems.includes('PERSONNEL_TRACKING')) {\n    areas.push('All Active Work Areas');\n  }\n  \n  if (systems.includes('SENSOR_NETWORK')) {\n    areas.push('Monitored Construction Zones');\n  }\n  \n  if (systems.includes('INVENTORY_SYSTEM')) {\n    areas.push('Material Storage Areas');\n  }\n  \n  return areas.length > 0 ? areas : ['Entire Construction Site'];\n}\n\n// Return the fallback result along with the original error information\nreturn [{\n  json: {\n    ...errorData,\n    fallbackResult\n  }\n}];"
          }
        },
        {
          "id": "77",
          "name": "Log Error Details",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            1450
          ],
          "parameters": {
            "functionCode": "// Get the complete error data with fallback information\nconst errorData = $input.all()[0].json;\n\n// Create a comprehensive error log entry\nconst logEntry = {\n  timestamp: new Date().toISOString(),\n  errorId: `ERR-${Date.now()}-${Math.floor(Math.random() * 1000)}`,\n  workflowId: $workflow.id,\n  workflowName: $workflow.name,\n  nodeNameWhereErrorOccurred: errorData.nodeNameWhereErrorOccurred || 'Unknown',\n  errorType: errorData.errorType,\n  errorMessage: errorData.errorMessage,\n  errorStack: errorData.error?.stack || 'No stack trace available',\n  severity: errorData.severity,\n  recoveryStrategy: {\n    action: errorData.recoveryStrategy.action,\n    retryAttempted: errorData.recoveryStrategy.retryCount > 0,\n    retryCount: errorData.recoveryStrategy.retryCount,\n    escalationRequired: errorData.recoveryStrategy.escalationRequired\n  },\n  fallbackResult: {\n    success: errorData.fallbackResult.success,\n    fallbackUsed: errorData.fallbackResult.fallbackUsed,\n    fallbackType: errorData.fallbackResult.fallbackType\n  },\n  constructionSiteInfo: {\n    siteId: errorData.recoveryStrategy.constructionSiteInfo.siteId,\n    requiresOnSiteInspection: errorData.recoveryStrategy.constructionSiteInfo.requiresOnSiteInspection,\n    affectedSystems: errorData.recoveryStrategy.constructionSiteInfo.affectedSystems\n  },\n  context: {\n    // Add any additional context that might be helpful for debugging\n    inputDataSample: JSON.stringify(errorData.inputDataSample || {}).substring(0, 500) + '...',\n    environmentInfo: process.env.NODE_ENV || 'unknown',\n    timeOfDay: new Date().getHours() < 6 || new Date().getHours() > 18 ? 'NIGHT' : 'DAY',\n    isWeekend: [0, 6].includes(new Date().getDay()) ? true : false\n  }\n};\n\n// In a real implementation, you would save this to a database or logging service\n// For this example, we'll just pass it through the workflow\nconsole.log(`ERROR LOG: ${logEntry.errorId} - ${logEntry.errorType}: ${logEntry.errorMessage}`);\n\n// For construction site monitoring, categorize errors for reporting\nconst errorCategory = categorizeConstructionError(errorData);\n\n// Return the log entry and original error data\nreturn [{\n  json: {\n    ...errorData,\n    logEntry,\n    errorCategory,\n    loggedAt: new Date().toISOString(),\n    errorTracking: {\n      errorId: logEntry.errorId,\n      shouldAppearInDailyReport: errorData.severity !== 'LOW',\n      requiresFollowUp: errorData.recoveryStrategy.escalationRequired || errorData.severity === 'CRITICAL',\n      recommendedAction: determineRecommendedAction(errorData)\n    }\n  }\n}];\n\n// Helper function to categorize construction site errors\nfunction categorizeConstructionError(errorData) {\n  // Categorize errors specifically for construction reporting\n  if (errorData.errorType === 'SAFETY_ERROR') {\n    return 'SAFETY_VIOLATION';\n  }\n  \n  if (errorData.recoveryStrategy.constructionSiteInfo.affectedSystems.includes('CAMERA_SYSTEM')) {\n    return 'MONITORING_SYSTEM_FAILURE';\n  }\n  \n  if (errorData.recoveryStrategy.constructionSiteInfo.affectedSystems.includes('SENSOR_NETWORK')) {\n    return 'SENSOR_MALFUNCTION';\n  }\n  \n  if (errorData.recoveryStrategy.constructionSiteInfo.affectedSystems.includes('DRONE_OPERATIONS')) {\n    return 'DRONE_FAILURE';\n  }\n  \n  if (errorData.recoveryStrategy.constructionSiteInfo.affectedSystems.includes('WEATHER_MONITORING')) {\n    return 'WEATHER_MONITORING_FAILURE';\n  }\n  \n  if (errorData.recoveryStrategy.constructionSiteInfo.affectedSystems.includes('EQUIPMENT_MONITORING')) {\n    return 'EQUIPMENT_MONITORING_FAILURE';\n  }\n  \n  if (errorData.errorType === 'API_ERROR' || errorData.errorType === 'DATABASE_ERROR') {\n    return 'SYSTEM_INTEGRATION_FAILURE';\n  }\n  \n  return 'GENERAL_SYSTEM_ERROR';\n}\n\n// Helper function to determine recommended action\nfunction determineRecommendedAction(errorData) {\n  if (errorData.severity === 'CRITICAL') {\n    return 'IMMEDIATE_RESPONSE_REQUIRED';\n  }\n  \n  if (errorData.errorType === 'SAFETY_ERROR') {\n    return 'SAFETY_INSPECTION_REQUIRED';\n  }\n  \n  if (errorData.recoveryStrategy.escalationRequired) {\n    return 'ESCALATE_TO_SUPERVISOR';\n  }\n  \n  if (errorData.fallbackResult.fallbackUsed) {\n    return 'VERIFY_FALLBACK_EFFECTIVENESS';\n  }\n  \n  return 'MONITOR_AND_REVIEW';\n}"
          }
        },
        {
          "id": "78",
          "name": "Notify Administrators",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            1100,
            1450
          ],
          "parameters": {
            "fromEmail": "{{ $json.notificationConfig?.fromEmail || 'construction-monitoring@example.com' }}",
            "toEmail": "{{ $json.notificationConfig?.toEmail || 'site-admin@example.com' }}",
            "ccEmail": "{{ $json.severity === 'CRITICAL' ? 'safety-officer@example.com,project-manager@example.com' : '' }}",
            "subject": "{{ $json.severity === 'CRITICAL' ? '🚨 CRITICAL ERROR: ' : ($json.severity === 'HIGH' ? '⚠️ HIGH SEVERITY ERROR: ' : '📢 Error: ') }} {{ $json.errorCategory }} at Construction Site {{ $json.recoveryStrategy.constructionSiteInfo.siteId }}",
            "text": "=== ERROR NOTIFICATION ===\n\nError ID: {{ $json.logEntry.errorId }}\nTimestamp: {{ $json.loggedAt }}\nSeverity: {{ $json.severity }}\nCategory: {{ $json.errorCategory }}\n\nError Details:\n- Type: {{ $json.errorType }}\n- Message: {{ $json.errorMessage }}\n- Occurred in: {{ $json.nodeNameWhereErrorOccurred }}\n\nSite Information:\n- Site ID: {{ $json.recoveryStrategy.constructionSiteInfo.siteId }}\n- Affected Systems: {{ $json.recoveryStrategy.constructionSiteInfo.affectedSystems.join(', ') }}\n- Requires On-Site Inspection: {{ $json.recoveryStrategy.constructionSiteInfo.requiresOnSiteInspection ? 'YES' : 'No' }}\n\nRecovery Information:\n- Strategy: {{ $json.recoveryStrategy.action }}\n- Fallback Used: {{ $json.fallbackResult.fallbackUsed ? 'Yes' : 'No' }}\n- Fallback Type: {{ $json.fallbackResult.fallbackType }}\n- Success: {{ $json.fallbackResult.success ? 'Yes' : 'No' }}\n\nRecommended Action: {{ $json.errorTracking.recommendedAction }}\n\n{% if $json.fallbackResult.result.actions %}\nRequired Actions:\n{% for action in $json.fallbackResult.result.actions %}\n- {{ action }}\n{% endfor %}\n{% endif %}\n\n{% if $json.fallbackResult.result.instructions %}\nInspection Instructions:\n{% for instruction in $json.fallbackResult.result.instructions %}\n- {{ instruction }}\n{% endfor %}\n{% endif %}\n\nThis is an automated message from the Construction Site Monitoring System.\n",
            "options": {
              "priority": "{{ $json.severity === 'CRITICAL' ? 'high' : 'normal' }}"
            }
          }
        },
        {
          "id": "79",
          "name": "Collect Activity & Metrics",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            1450
          ],
          "parameters": {
            "functionCode": "// Collect activity data and performance metrics\nconst inputData = $input.all();\nconst timestamp = new Date().toISOString();\n\n// Create activity log\nconst activityLog = {\n  timestamp,\n  executionId: $execution.id,\n  workflowId: $workflow.id,\n  operation: inputData[0]?.json?.operation || 'unknown',\n  status: inputData[0]?.json?.status || 'completed',\n  duration: inputData[0]?.json?.duration || 0,\n  user: inputData[0]?.json?.user || 'system'\n};\n\n// Collect performance metrics\nconst performanceMetrics = {\n  timestamp,\n  executionTime: inputData[0]?.json?.duration || 0,\n  memoryUsage: process.memoryUsage().heapUsed / 1024 / 1024, // MB\n  itemsProcessed: inputData.length,\n  errorCount: inputData.filter(item => item.json.error).length\n};\n\nreturn [{\n  json: {\n    activityLog,\n    performanceMetrics,\n    originalData: inputData[0]?.json || {},\n    timestamp\n  }\n}];"
          }
        },
        {
          "id": "80",
          "name": "Check For Critical Events",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1500,
            1450
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{$json[\"originalData\"][\"status\"]}}",
                  "operation": "contains",
                  "value2": "error"
                }
              ],
              "number": [
                {
                  "value1": "={{$json[\"performanceMetrics\"][\"errorCount\"]}}",
                  "operation": "larger",
                  "value2": 0
                }
              ]
            },
            "combineOperation": "any"
          }
        },
        {
          "id": "81",
          "name": "Create Critical Audit Trail",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            1600
          ],
          "parameters": {
            "functionCode": "// Create detailed audit trail for critical events\nconst inputData = $input.all()[0];\nconst timestamp = new Date().toISOString();\n\n// Create comprehensive audit record for critical events\nconst criticalAuditTrail = {\n  timestamp,\n  severity: 'CRITICAL',\n  eventType: inputData.json.originalData.status || 'error',\n  component: inputData.json.originalData.component || 'unknown',\n  location: inputData.json.originalData.location || 'unknown',\n  details: inputData.json.originalData.details || {},\n  metrics: inputData.json.performanceMetrics,\n  activityLog: inputData.json.activityLog,\n  executionId: $execution.id,\n  needsImmediate: true\n};\n\nreturn [{\n  json: {\n    auditTrail: criticalAuditTrail,\n    originalData: inputData.json.originalData,\n    timestamp\n  }\n}];"
          }
        },
        {
          "id": "82",
          "name": "Create Standard Audit Trail",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            1600
          ],
          "parameters": {
            "functionCode": "// Create standard audit trail for normal operations\nconst inputData = $input.all()[0];\nconst timestamp = new Date().toISOString();\n\n// Create standard audit record\nconst standardAuditTrail = {\n  timestamp,\n  severity: 'INFO',\n  eventType: inputData.json.originalData.operation || 'standard_operation',\n  component: inputData.json.originalData.component || 'general',\n  location: inputData.json.originalData.location || 'site',\n  metrics: inputData.json.performanceMetrics,\n  activityLog: inputData.json.activityLog,\n  executionId: $execution.id,\n  needsImmediate: false\n};\n\nreturn [{\n  json: {\n    auditTrail: standardAuditTrail,\n    originalData: inputData.json.originalData,\n    timestamp\n  }\n}];"
          }
        },
        {
          "id": "83",
          "name": "Store Audit Trail & Metrics",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            1600
          ],
          "parameters": {
            "functionCode": "// Store audit trail and metrics to database/storage\nconst inputData = $input.all()[0];\nconst timestamp = new Date().toISOString();\n\n// Simulate database storage\nconst storageResult = {\n  timestamp,\n  stored: true,\n  auditTrail: inputData.json.auditTrail,\n  storagePath: `/logs/${inputData.json.auditTrail.severity}/${timestamp.split('T')[0]}`,\n  metricsStored: true,\n  alertSent: inputData.json.auditTrail.severity === 'CRITICAL',\n  retentionDays: inputData.json.auditTrail.severity === 'CRITICAL' ? 90 : 30\n};\n\n// In a real implementation, this would connect to a database\n// or logging service to store the data\n\nreturn [{\n  json: {\n    result: storageResult,\n    originalData: inputData.json.originalData,\n    auditTrail: inputData.json.auditTrail,\n    timestamp\n  }\n}];"
          }
        }
      ],
      "connections": {
        "Schedule Trigger": {
          "main": [
            [
              {
                "node": "Central Router",
                "type": "main",
                "index": 0
              },
              {
                "node": "Central Router",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Central Router": {
          "main": [
            [
              {
                "node": "Process Safety Monitoring",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Safety Monitoring": {
          "main": [
            [
              {
                "node": "Process Worker Tracking",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Worker Tracking": {
          "main": [
            [
              {
                "node": "Process Weather Monitoring",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Weather Monitoring": {
          "main": [
            [
              {
                "node": "Format Weather Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Weather Data": {
          "main": [
            [
              {
                "node": "Process Crane Monitoring",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Crane Monitoring": {
          "main": [
            [
              {
                "node": "Process Material Tracking",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge All Results": {
          "main": [
            [
              {
                "node": "Generate Daily Report",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Webhook Trigger": {
          "main": [
            [
              {
                "node": "Central Router",
                "type": "main",
                "index": 0
              },
              {
                "node": "Validate Input Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Generate Daily Report": {
          "main": [
            [
              {
                "node": "Webhook Trigger",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate Input Data": {
          "main": [
            [
              {
                "node": "Input Valid?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Input Valid?": {
          "main": [
            [
              {
                "node": "Route By Task Type",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Route By Task Type": {
          "main": [
            [
              {
                "node": "Prepare Error Response",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Response": {
          "main": [
            [
              {
                "node": "Respond To Webhook",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Error Trigger": {
          "main": [
            [
              {
                "node": "Process Error",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Error": {
          "main": [
            [
              {
                "node": "Prepare Data for Validation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Prepare Data for Validation": {
          "main": [
            [
              {
                "node": "Schema Validation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Schema Validation": {
          "main": [
            [
              {
                "node": "Type Checking",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Type Checking": {
          "main": [
            [
              {
                "node": "Business Rule Validation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Sanitize Data": {
          "main": [
            [
              {
                "node": "Validation Decision",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validation Decision": {
          "main": [
            [
              {
                "node": "Format Validation Errors",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Validation Errors": {
          "main": [
            [
              {
                "node": "Prepare For Next Section",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Prepare For Next Section": {
          "main": [
            [
              {
                "node": "Data Processing Entry Point",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Data Processing Entry Point": {
          "main": [
            [
              {
                "node": "Route By Data Type",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Route By Data Type": {
          "main": [
            [
              {
                "node": "Transform Safety Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Transform Safety Data": {
          "main": [
            [
              {
                "node": "Transform Progress Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Transform Inventory Data": {
          "main": [
            [
              {
                "node": "Transform Weather Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Transform Weather Data": {
          "main": [
            [
              {
                "node": "Transform Unknown Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Transform Unknown Data": {
          "main": [
            [
              {
                "node": "Merge Transformed Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Transformed Data": {
          "main": [
            [
              {
                "node": "Enrich With Processing Metadata",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Enrich With Processing Metadata": {
          "main": [
            [
              {
                "node": "Split Into Batches",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Split Into Batches": {
          "main": [
            [
              {
                "node": "Is Inventory Batch?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Inventory Batch?": {
          "main": [
            [
              {
                "node": "Process Inventory Batch",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Other Batches": {
          "main": [
            [
              {
                "node": "Merge Batch Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Batch Results": {
          "main": [
            [
              {
                "node": "Is Last Batch?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Last Batch?": {
          "main": [
            [
              {
                "node": "Continue Batch Processing",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Continue Batch Processing": {
          "main": [
            [
              {
                "node": "Aggregate Batch Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Aggregate Batch Results": {
          "main": [
            [
              {
                "node": "Has Critical Issues?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Has Critical Issues?": {
          "main": [
            [
              {
                "node": "Generate Critical Issues Summary",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Generate Critical Issues Summary": {
          "main": [
            [
              {
                "node": "Generate Standard Summary",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Summaries": {
          "main": [
            [
              {
                "node": "Fetch Weather Forecast",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Weather Forecast": {
          "main": [
            [
              {
                "node": "Fetch Supplier Inventory",
                "type": "main",
                "index": 0
              },
              {
                "node": "Fetch Supplier Inventory",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Supplier Inventory": {
          "main": [
            [
              {
                "node": "Enrich With External Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Enrich With External Data": {
          "main": [
            [
              {
                "node": "Any Alerts To Process?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Any Alerts To Process?": {
          "main": [
            [
              {
                "node": "Format Alerts For Notification",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Alerts For Notification": {
          "main": [
            [
              {
                "node": "Data Processing Output",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Data Processing Output": {
          "main": [
            [
              {
                "node": "Start External Integrations",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Route External Integration": {
          "main": [
            [
              {
                "node": "Weather API Authentication",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Weather API Authentication": {
          "main": [
            [
              {
                "node": "Fetch Weather Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Weather Data": {
          "main": [
            [
              {
                "node": "Validate Weather Response",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate Weather Response": {
          "main": [
            [
              {
                "node": "Wait Before Retry",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wait Before Retry": {
          "main": [
            [
              {
                "node": "Map Weather Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Map Weather Data": {
          "main": [
            [
              {
                "node": "Supplier API Authentication",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate Supplier Response": {
          "main": [
            [
              {
                "node": "Wait Before Supplier Retry",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wait Before Supplier Retry": {
          "main": [
            [
              {
                "node": "Map Supplier Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Map Supplier Data": {
          "main": [
            [
              {
                "node": "Equipment API Authentication",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Equipment API Authentication": {
          "main": [
            [
              {
                "node": "Fetch Equipment Status",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Equipment Status": {
          "main": [
            [
              {
                "node": "Validate Equipment Response",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate Equipment Response": {
          "main": [
            [
              {
                "node": "Map Equipment Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Map Equipment Data": {
          "main": [
            [
              {
                "node": "Wait Before Equipment Retry",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Combine External Data": {
          "main": [
            [
              {
                "node": "Classify Error",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Classify Error": {
          "main": [
            [
              {
                "node": "Determine Recovery Strategy",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Determine Recovery Strategy": {
          "main": [
            [
              {
                "node": "Execute Fallback Processing",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Execute Fallback Processing": {
          "main": [
            [
              {
                "node": "Log Error Details",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Log Error Details": {
          "main": [
            [
              {
                "node": "Notify Administrators",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Notify Administrators": {
          "main": [
            [
              {
                "node": "Collect Activity & Metrics",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Collect Activity & Metrics": {
          "main": [
            [
              {
                "node": "Check For Critical Events",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create Critical Audit Trail": {
          "main": [
            [
              {
                "node": "Create Standard Audit Trail",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create Standard Audit Trail": {
          "main": [
            [
              {
                "node": "Store Audit Trail & Metrics",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {},
      "active": false
    },
    "provider": "anthropic",
    "model": "claude-3-7-sonnet-20250219",
    "timestamp": "2025-07-22T15:53:41.487Z",
    "nodeCount": 83,
    "connectionCount": 74
  },
  {
    "id": "d4346087-1506-43a4-a63d-d159be469aa2",
    "prompt": "To create a comprehensive n8n workflow for Construction Site Safety and Progress Monitoring, we'll orchestrate multiple features to ensure full connectivity and seamless operation. The architecture will include a main entry point, a central router to direct flows, dedicated branches for each feature, a central merge node, and a final processing stage. Here is the detailed node-by-node plan:\n\n### Main Entry Point\n- **Trigger Node**: `n8n-nodes-base.webhook`\n  - **Purpose**: To start the workflow when specific events occur or data is received.\n\n### Central Router\n- **Router Node**: `n8n-nodes-base.switch`\n  - **Purpose**: To route data to the correct feature branch based on the event type or data received.\n\n### Feature Branches\n\n#### 1. Helmet and Seat Belt Monitoring with Cameras\n- **Camera Node**: `n8n-nodes-base.httpRequest`\n  - **Purpose**: To receive and analyze footage from cameras for helmet and seat belt usage.\n- **NLP/AI Node**: `n8n-nodes-base.httpRequest`\n  - **Purpose**: To analyze video data for compliance.\n- **Notification Node**: `n8n-nodes-base.emailSend`\n  - **Purpose**: To send alerts if non-compliance is detected.\n\n#### 2. Daily Worker Entry and Exit and Timekeeping\n- **Timekeeping Node**: `n8n-nodes-base.httpRequest`\n  - **Purpose**: To log worker entries and exits.\n- **Set Node**: `n8n-nodes-base.set`\n  - **Purpose**: To format timekeeping data for reports.\n  \n#### 3. Weekly Progress Photography with Drones\n- **Drone Node**: `n8n-nodes-base.httpRequest`\n  - **Purpose**: To schedule and retrieve drone photography.\n- **Image Processing Node**: `n8n-nodes-base.httpRequest`\n  - **Purpose**: To process and store images.\n\n#### 4. Weather Monitoring During Concrete Pouring\n- **Weather Node**: `n8n-nodes-base.httpRequest`\n  - **Purpose**: To monitor weather conditions.\n- **Decision Node**: `n8n-nodes-base.switch`\n  - **Purpose**: To decide whether to proceed with pouring based on weather.\n\n#### 5. Tower Crane Wind Sensors and Automatic Shutdown\n- **Wind Sensor Node**: `n8n-nodes-raspberry.raspberryPi`\n  - **Purpose**: To monitor wind speed and direction.\n- **Shutdown Node**: `n8n-nodes-base.executeCommand`\n  - **Purpose**: To automatically shut down cranes if wind exceeds safe levels.\n\n#### 6. Material Stock Tracking and JIT Ordering\n- **Inventory Node**: `n8n-nodes-base.httpRequest`\n  - **Purpose**: To track material stock levels.\n- **Ordering Node**: `n8n-nodes-base.httpRequest`\n  - **Purpose**: To place JIT orders when stock is low.\n\n#### 7. Emergency Protocol in Case of Workplace Accidents\n- **Emergency Node**: `n8n-nodes-base.errorTrigger`\n  - **Purpose**: To activate emergency protocols.\n- **Alert Node**: `n8n-nodes-base.emailSend`\n  - **Purpose**: To notify emergency services and management.\n\n#### 8. Night Security Patrol Route Tracking\n- **Patrol Node**: `n8n-nodes-base.httpRequest`\n  - **Purpose**: To track night patrol routes using GPS.\n- **Alert Node**: `n8n-nodes-base.emailSend`\n  - **Purpose**: To send alerts if patrol deviations are detected.\n\n#### 9. Neighboring Building Vibration Sensor Monitoring\n- **Vibration Sensor Node**: `n8n-nodes-raspberry.raspberryPi`\n  - **Purpose**: To monitor vibrations affecting neighboring buildings.\n- **Alert Node**: `n8n-nodes-base.emailSend`\n  - **Purpose**: To notify if vibrations exceed safe thresholds.\n\n#### 10. Contractor Progress Payment Photo Documentation\n- **Photo Node**: `n8n-nodes-base.httpRequest`\n  - **Purpose**: To receive and document progress photos for payment verification.\n\n### Central Merge Node\n- **Merge Node**: `n8n-nodes-base.merge`\n  - **Purpose**: To combine results from all feature branches.\n\n### Final Processing/Response\n- **Final Node**: `n8n-nodes-base.set`\n  - **Purpose**: To compile a final report or response based on merged data.\n\n### Error Handling\n- **Global Error Node**: `n8n-nodes-base.errorTrigger`\n  - **Purpose**: To catch and handle errors across the entire workflow.\n- **Error Notification Node**: `n8n-nodes-base.emailSend`\n  - **Purpose**: To notify relevant personnel of any issues.\n\n### Validation Checklist\n☑ All nodes are connected (no orphaned nodes).\n☑ Central router properly routes to all features.\n☑ All feature branches merge back to the central flow.\n☑ Comprehensive error handling is in place.\n☑ Data flows logically and efficiently between nodes.\n\nThis comprehensive n8n workflow ensures that all features are properly orchestrated and connected, with robust error handling and validation checks to support large-scale construction project safety and monitoring operations.",
    "workflow": {
      "name": "Site Safety and Progress Monitoring77",
      "nodes": [
        {
          "id": "1",
          "name": "Main System Trigger",
          "type": "n8n-nodes-base.webhook",
          "typeVersion": 1,
          "position": [
            100,
            100
          ],
          "parameters": {
            "path": "construction-site-monitoring",
            "responseMode": "lastNode",
            "options": {}
          }
        },
        {
          "id": "2",
          "name": "Validate Input Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            100
          ],
          "parameters": {
            "functionCode": "// Validate input data format and required fields\nconst inputData = items[0].json;\nconst requiredFields = ['eventType', 'siteId', 'timestamp'];\n\n// Check if all required fields exist\nconst missingFields = requiredFields.filter(field => !inputData.hasOwnProperty(field));\n\nif (missingFields.length > 0) {\n  return [{\n    json: {\n      valid: false,\n      error: `Missing required fields: ${missingFields.join(', ')}`,\n      inputData\n    }\n  }];\n}\n\n// Validate event type\nconst validEventTypes = ['safety', 'progress', 'timekeeping', 'weather', 'emergency', 'security', 'vibration', 'material', 'payment'];\n\nif (!validEventTypes.includes(inputData.eventType)) {\n  return [{\n    json: {\n      valid: false,\n      error: `Invalid event type: ${inputData.eventType}. Must be one of: ${validEventTypes.join(', ')}`,\n      inputData\n    }\n  }];\n}\n\n// Validate timestamp\nconst timestamp = new Date(inputData.timestamp);\nif (isNaN(timestamp.getTime())) {\n  return [{\n    json: {\n      valid: false,\n      error: `Invalid timestamp format: ${inputData.timestamp}`,\n      inputData\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    valid: true,\n    data: inputData\n  }\n}];"
          }
        },
        {
          "id": "3",
          "name": "Is Data Valid?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            500,
            100
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{$json[\"valid\"]}}",
                  "operation": "equal",
                  "value2": true
                }
              ]
            }
          }
        },
        {
          "id": "4",
          "name": "Route By Event Type",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            700,
            100
          ],
          "parameters": {
            "dataPropertyName": "data.eventType",
            "rules": [
              {
                "value": "safety",
                "output": 0
              },
              {
                "value": "progress",
                "output": 1
              },
              {
                "value": "timekeeping",
                "output": 2
              },
              {
                "value": "weather",
                "output": 3
              },
              {
                "value": "material",
                "output": 4
              }
            ],
            "fallbackOutput": 5
          }
        },
        {
          "id": "5",
          "name": "Process Safety Event",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            100
          ],
          "parameters": {
            "functionCode": "// Process safety monitoring data\nconst data = items[0].json.data;\n\n// Analyze safety data\nlet alertLevel = 'normal';\nlet alertMessage = '';\n\n// Check for safety violations\nif (data.hasOwnProperty('helmetDetection') && data.helmetDetection === false) {\n  alertLevel = 'critical';\n  alertMessage = 'Worker without helmet detected';\n}\n\nif (data.hasOwnProperty('seatbeltDetection') && data.seatbeltDetection === false) {\n  alertLevel = 'critical';\n  alertMessage = 'Equipment operator without seatbelt detected';\n}\n\nif (data.hasOwnProperty('restrictedAreaViolation') && data.restrictedAreaViolation === true) {\n  alertLevel = 'critical';\n  alertMessage = 'Restricted area violation detected';\n}\n\nreturn [{\n  json: {\n    eventType: 'safety',\n    processedData: data,\n    alertLevel,\n    alertMessage,\n    timestamp: new Date().toISOString(),\n    requiresNotification: alertLevel === 'critical'\n  }\n}];"
          }
        },
        {
          "id": "6",
          "name": "Process Progress Event",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            100
          ],
          "parameters": {
            "functionCode": "// Process progress monitoring data (drone photography, etc.)\nconst data = items[0].json.data;\n\n// Process progress data\nconst processedData = {\n  siteId: data.siteId,\n  captureTime: data.timestamp,\n  imageUrls: data.imageUrls || [],\n  progressPercentage: data.progressPercentage,\n  notes: data.notes || ''\n};\n\n// Check if progress is behind schedule\nlet alertLevel = 'normal';\nlet alertMessage = '';\n\nif (data.hasOwnProperty('behindSchedule') && data.behindSchedule === true) {\n  alertLevel = 'warning';\n  alertMessage = `Project appears to be behind schedule. Current progress: ${data.progressPercentage}%`;\n}\n\nreturn [{\n  json: {\n    eventType: 'progress',\n    processedData,\n    alertLevel,\n    alertMessage,\n    timestamp: new Date().toISOString(),\n    requiresNotification: alertLevel === 'warning'\n  }\n}];"
          }
        },
        {
          "id": "7",
          "name": "Process Weather Event",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            100
          ],
          "parameters": {
            "functionCode": "// Process weather monitoring data\nconst data = items[0].json.data;\n\n// Process weather data\nconst processedData = {\n  siteId: data.siteId,\n  temperature: data.temperature,\n  windSpeed: data.windSpeed,\n  precipitation: data.precipitation,\n  humidity: data.humidity,\n  forecast: data.forecast || {}\n};\n\n// Check for weather alerts\nlet alertLevel = 'normal';\nlet alertMessage = '';\n\n// Check wind speed for crane safety\nif (data.windSpeed > 20) {\n  alertLevel = 'critical';\n  alertMessage = `High wind alert: ${data.windSpeed} mph. Crane operations should be suspended.`;\n}\n\n// Check temperature for concrete pouring\nif (data.eventContext === 'concretePour' && (data.temperature < 40 || data.temperature > 90)) {\n  alertLevel = 'warning';\n  alertMessage = `Temperature outside ideal range for concrete pouring: ${data.temperature}°F`;\n}\n\n// Check precipitation for open-air work\nif (data.precipitation > 0.1) {\n  alertLevel = 'warning';\n  alertMessage = `Precipitation detected: ${data.precipitation} inches. Consider covering exposed materials.`;\n}\n\nreturn [{\n  json: {\n    eventType: 'weather',\n    processedData,\n    alertLevel,\n    alertMessage,\n    timestamp: new Date().toISOString(),\n    requiresNotification: alertLevel !== 'normal'\n  }\n}];"
          }
        },
        {
          "id": "8",
          "name": "Merge All Results",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            1500,
            100
          ],
          "parameters": {
            "mode": "passThrough",
            "joinMode": "keepKeyMatches",
            "outputDataFrom": "input1"
          }
        },
        {
          "id": "9",
          "name": "Check If Alert Needed",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            100,
            250
          ],
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{$json[\"requiresNotification\"]}}",
                  "operation": "equal",
                  "value2": true
                }
              ]
            }
          }
        },
        {
          "id": "10",
          "name": "Send Alert Notification",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            300,
            250
          ],
          "parameters": {
            "fromEmail": "alerts@constructionmonitoring.com",
            "toEmail": "={{$json[\"alertLevel\"] === \"critical\" ? \"sitemanager@example.com,safety@example.com\" : \"sitemanager@example.com\"}}",
            "subject": "={{\"[\" + $json[\"alertLevel\"].toUpperCase() + \"] Construction Site Alert - \" + $json[\"eventType\"]}}",
            "text": "={\n\"Alert Details:\\n\" +\n\"Site ID: \" + $json.processedData.siteId + \"\\n\" +\n\"Event Type: \" + $json.eventType + \"\\n\" +\n\"Alert Level: \" + $json.alertLevel + \"\\n\" +\n\"Message: \" + $json.alertMessage + \"\\n\" +\n\"Timestamp: \" + $json.timestamp + \"\\n\\n\" +\n\"Please take appropriate action.\\n\\n\" +\n\"This is an automated message from the Construction Site Monitoring System.\"\n}",
            "options": {
              "attachments": "={{$json.eventType === \"progress\" && $json.processedData.imageUrls ? $json.processedData.imageUrls.map(url => ({url, fileName: 'progress-image.jpg'})) : []}}"
            }
          }
        },
        {
          "id": "11",
          "name": "Webhook Trigger",
          "type": "n8n-nodes-base.webhook",
          "typeVersion": 1,
          "position": [
            500,
            250
          ],
          "parameters": {
            "path": "construction-site-monitoring",
            "responseMode": "lastNode",
            "options": {}
          }
        },
        {
          "id": "12",
          "name": "Route By Task Type",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            700,
            250
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{ $json.taskType }}",
            "rules": [
              {
                "value2": "safetyMonitoring",
                "output": 0
              },
              {
                "value2": "workerTracking",
                "output": 1
              },
              {
                "value2": "progressMonitoring",
                "output": 2
              }
            ],
            "fallbackOutput": 3
          }
        },
        {
          "id": "13",
          "name": "Process Safety Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            250
          ],
          "parameters": {
            "functionCode": "// Process safety compliance data (helmets, seat belts, etc.)\nconst data = $input.item.json;\nconst processed = {\n  siteId: data.siteId,\n  timestamp: data.timestamp || new Date().toISOString(),\n  safetyScore: data.compliance ? (data.compliance * 100).toFixed(1) : 0,\n  issues: data.issues || [],\n  processed: true\n};\n\nreturn [{json: processed}];"
          }
        },
        {
          "id": "14",
          "name": "Process Worker Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            250
          ],
          "parameters": {
            "functionCode": "// Process worker entry/exit and timekeeping data\nconst data = $input.item.json;\nconst processed = {\n  siteId: data.siteId,\n  workerId: data.workerId,\n  action: data.action, // 'entry' or 'exit'\n  timestamp: data.timestamp || new Date().toISOString(),\n  location: data.location || 'main-gate',\n  duration: data.action === 'exit' && data.entryTime ? \n    (new Date(data.timestamp) - new Date(data.entryTime))/3600000 : null,\n  processed: true\n};\n\nreturn [{json: processed}];"
          }
        },
        {
          "id": "15",
          "name": "Process Progress Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            250
          ],
          "parameters": {
            "functionCode": "// Process construction progress data (drone photos, etc.)\nconst data = $input.item.json;\nconst processed = {\n  siteId: data.siteId,\n  timestamp: data.timestamp || new Date().toISOString(),\n  progressPercentage: data.progress || 0,\n  imageUrls: data.images || [],\n  notes: data.notes || '',\n  processed: true\n};\n\nreturn [{json: processed}];"
          }
        },
        {
          "id": "16",
          "name": "Handle Unknown Task",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            250
          ],
          "parameters": {
            "functionCode": "// Handle unknown task types\nconst data = $input.item.json;\nreturn [{\n  json: {\n    error: true,\n    message: `Unknown task type: ${data.taskType || 'not specified'}`,\n    originalData: data,\n    timestamp: new Date().toISOString()\n  }\n}];"
          }
        },
        {
          "id": "17",
          "name": "Merge All Results",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            100,
            400
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "18",
          "name": "Format Response",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            400
          ],
          "parameters": {
            "functionCode": "// Format the final response\nconst data = $input.item.json;\n\nreturn [{\n  json: {\n    success: !data.error,\n    message: data.error ? data.message : 'Data processed successfully',\n    data: data.error ? null : data,\n    timestamp: new Date().toISOString()\n  }\n}];"
          }
        },
        {
          "id": "19",
          "name": "Error Trigger",
          "type": "n8n-nodes-base.errorTrigger",
          "typeVersion": 1,
          "position": [
            500,
            400
          ],
          "parameters": {}
        },
        {
          "id": "20",
          "name": "Process Error",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            400
          ],
          "parameters": {
            "functionCode": "// Process workflow errors\nconst error = $input.item.json.error;\n\nreturn [{\n  json: {\n    success: false,\n    error: true,\n    message: `Workflow error: ${error.message || 'Unknown error'}`,\n    timestamp: new Date().toISOString(),\n    errorDetails: error\n  }\n}];"
          }
        },
        {
          "id": "21",
          "name": "Prepare Data for Validation",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            400
          ],
          "parameters": {
            "functionCode": "// Ensure data is in the correct format for validation\nconst inputData = $input.item.json;\nconst preparedData = {\n  ...inputData,\n  timestamp: inputData.timestamp || new Date().toISOString(),\n  validationStarted: true\n};\n\nreturn [{ json: preparedData }];"
          }
        },
        {
          "id": "22",
          "name": "Schema Validation",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            400
          ],
          "parameters": {
            "functionCode": "// Validate that required fields exist\nconst data = $input.item.json;\nconst requiredFields = ['eventType', 'siteId', 'data'];\nconst missingFields = [];\n\nrequiredFields.forEach(field => {\n  if (data[field] === undefined) {\n    missingFields.push(field);\n  }\n});\n\nif (missingFields.length > 0) {\n  return [{ json: {\n    valid: false,\n    schemaValid: false,\n    errors: [`Missing required fields: ${missingFields.join(', ')}`],\n    originalData: data\n  }}];\n}\n\nreturn [{ json: {\n  ...data,\n  valid: true,\n  schemaValid: true\n}}];"
          }
        },
        {
          "id": "23",
          "name": "Type Checking",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            400
          ],
          "parameters": {
            "functionCode": "// Validate data types\nconst data = $input.item.json;\nconst typeErrors = [];\n\nif (data.valid === false) {\n  // Skip type checking if schema validation failed\n  return [{ json: data }];\n}\n\n// Define expected types\nconst typeChecks = [\n  { field: 'siteId', expectedType: 'string' },\n  { field: 'eventType', expectedType: 'string' },\n  { field: 'timestamp', expectedType: 'string' },\n  { field: 'data', expectedType: 'object' }\n];\n\n// Perform type checking\ntypeChecks.forEach(check => {\n  if (data[check.field] !== undefined && typeof data[check.field] !== check.expectedType) {\n    typeErrors.push(`${check.field} must be a ${check.expectedType}, got ${typeof data[check.field]}`);\n  }\n});\n\nif (typeErrors.length > 0) {\n  return [{ json: {\n    ...data,\n    valid: false,\n    typeValid: false,\n    errors: typeErrors\n  }}];\n}\n\nreturn [{ json: {\n  ...data,\n  typeValid: true\n}}];"
          }
        },
        {
          "id": "24",
          "name": "Business Rule Validation",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            400
          ],
          "parameters": {
            "functionCode": "// Validate business rules\nconst data = $input.item.json;\nconst businessErrors = [];\n\nif (data.valid === false) {\n  // Skip business validation if previous validations failed\n  return [{ json: data }];\n}\n\n// Check eventType is one of the allowed values\nconst validEventTypes = ['helmet_monitoring', 'worker_entry', 'drone_progress', 'weather_alert', 'crane_wind', 'material_stock', 'emergency', 'security_patrol', 'vibration_alert', 'payment_documentation'];\nif (!validEventTypes.includes(data.eventType)) {\n  businessErrors.push(`Invalid eventType: ${data.eventType}. Must be one of: ${validEventTypes.join(', ')}`);\n}\n\n// Check siteId format (assuming it should be alphanumeric)\nif (!/^[a-zA-Z0-9-]+$/.test(data.siteId)) {\n  businessErrors.push('siteId must contain only alphanumeric characters and hyphens');\n}\n\n// Check timestamp is a valid ISO date\nif (isNaN(Date.parse(data.timestamp))) {\n  businessErrors.push('timestamp must be a valid ISO date string');\n}\n\nif (businessErrors.length > 0) {\n  return [{ json: {\n    ...data,\n    valid: false,\n    businessValid: false,\n    errors: businessErrors\n  }}];\n}\n\nreturn [{ json: {\n  ...data,\n  businessValid: true\n}}];"
          }
        },
        {
          "id": "25",
          "name": "Sanitize Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            550
          ],
          "parameters": {
            "functionCode": "// Sanitize data to prevent injection attacks\nconst data = $input.item.json;\n\nif (data.valid === false) {\n  // Skip sanitization if validation failed\n  return [{ json: data }];\n}\n\n// Helper function to sanitize strings\nfunction sanitizeString(str) {\n  if (typeof str !== 'string') return str;\n  // Remove potentially dangerous characters\n  return str\n    .replace(/[<>]/g, '') // Remove HTML tags\n    .trim();\n}\n\n// Sanitize specific fields\nconst sanitized = {\n  ...data,\n  siteId: sanitizeString(data.siteId),\n  eventType: sanitizeString(data.eventType),\n  // Recursively sanitize nested objects in data\n  data: JSON.parse(JSON.stringify(data.data), (key, value) => {\n    return typeof value === 'string' ? sanitizeString(value) : value;\n  })\n};\n\nreturn [{ json: {\n  ...sanitized,\n  sanitized: true\n}}];"
          }
        },
        {
          "id": "26",
          "name": "Validation Decision",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            300,
            550
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.valid }}",
                  "operation": "equal",
                  "value2": "false"
                }
              ]
            }
          }
        },
        {
          "id": "27",
          "name": "Format Validation Errors",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            550
          ],
          "parameters": {
            "functionCode": "// Format all validation errors into a structured response\nconst data = $input.item.json;\n\n// Collect all errors\nconst allErrors = data.errors || [];\n\n// Create a detailed validation report\nconst validationReport = {\n  valid: false,\n  timestamp: new Date().toISOString(),\n  errorCount: allErrors.length,\n  errors: allErrors,\n  originalData: data.originalData || data,\n  validationSteps: {\n    schemaValid: data.schemaValid === true,\n    typeValid: data.typeValid === true,\n    businessValid: data.businessValid === true,\n    sanitized: false\n  }\n};\n\nreturn [{ json: validationReport }];"
          }
        },
        {
          "id": "28",
          "name": "Prepare For Next Section",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            550
          ],
          "parameters": {
            "functionCode": "// Prepare validated data for the next workflow section\nconst data = $input.item.json;\n\n// Remove validation metadata\nconst cleanData = {\n  ...data,\n  validationCompleted: true,\n  validationTimestamp: new Date().toISOString()\n};\n\n// Remove validation properties that shouldn't be passed on\ndelete cleanData.valid;\ndelete cleanData.schemaValid;\ndelete cleanData.typeValid;\ndelete cleanData.businessValid;\ndelete cleanData.sanitized;\ndelete cleanData.validationStarted;\n\nreturn [{ json: cleanData }];"
          }
        },
        {
          "id": "29",
          "name": "Data Processing Entry Point",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            550
          ],
          "parameters": {
            "functionCode": "// Initialize data processing section\nconst inputData = $input.item.json;\n\n// Add metadata for processing\nconst enrichedData = {\n  ...inputData,\n  processingStarted: new Date().toISOString(),\n  processingBatch: inputData.batchId || `batch-${Date.now()}`,\n  processingStatus: 'started'\n};\n\nreturn [{json: enrichedData}];"
          }
        },
        {
          "id": "30",
          "name": "Route By Data Type",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            1100,
            550
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{ $json.dataType }}",
            "rules": {
              "rules": [
                {
                  "value2": "safetyData",
                  "output": 0
                },
                {
                  "value2": "progressData",
                  "output": 1
                },
                {
                  "value2": "inventoryData",
                  "output": 2
                },
                {
                  "value2": "weatherData",
                  "output": 3
                }
              ]
            },
            "fallbackOutput": 4
          }
        },
        {
          "id": "31",
          "name": "Transform Safety Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            550
          ],
          "parameters": {
            "functionCode": "// Transform safety monitoring data\nconst data = $input.item.json;\n\n// Process helmet and safety belt compliance\nconst safetyScore = data.helmetCompliance * 0.6 + data.seatBeltCompliance * 0.4;\nconst isSafe = safetyScore >= 0.9;\n\nconst transformedData = {\n  ...data,\n  safetyScore: parseFloat(safetyScore.toFixed(2)),\n  isSafe,\n  safetyStatus: isSafe ? 'compliant' : 'non-compliant',\n  transformedAt: new Date().toISOString()\n};\n\nreturn [{json: transformedData}];"
          }
        },
        {
          "id": "32",
          "name": "Transform Progress Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            550
          ],
          "parameters": {
            "functionCode": "// Transform construction progress data\nconst data = $input.item.json;\n\n// Calculate progress metrics\nconst totalTasks = data.totalTasks || 100;\nconst completedTasks = data.completedTasks || 0;\nconst progressPercentage = (completedTasks / totalTasks) * 100;\n\n// Determine if progress is on schedule\nconst scheduledPercentage = data.scheduledPercentage || 0;\nconst progressStatus = progressPercentage >= scheduledPercentage ? 'on-schedule' : 'delayed';\n\nconst transformedData = {\n  ...data,\n  progressPercentage: parseFloat(progressPercentage.toFixed(1)),\n  progressStatus,\n  progressDelta: parseFloat((progressPercentage - scheduledPercentage).toFixed(1)),\n  transformedAt: new Date().toISOString()\n};\n\nreturn [{json: transformedData}];"
          }
        },
        {
          "id": "33",
          "name": "Transform Inventory Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            700
          ],
          "parameters": {
            "functionCode": "// Transform inventory and material data\nconst data = $input.item.json;\n\n// Calculate stock levels and reorder flags\nconst materials = data.materials || [];\nconst transformedMaterials = materials.map(material => {\n  const stockLevel = material.currentStock / material.maxStock;\n  const needsReorder = stockLevel < material.reorderThreshold;\n  \n  return {\n    ...material,\n    stockLevel: parseFloat(stockLevel.toFixed(2)),\n    stockStatus: needsReorder ? 'reorder-needed' : 'sufficient',\n    daysRemaining: Math.floor(material.currentStock / (material.dailyUsage || 1))\n  };\n});\n\nconst transformedData = {\n  ...data,\n  materials: transformedMaterials,\n  lowStockItems: transformedMaterials.filter(m => m.stockStatus === 'reorder-needed').length,\n  transformedAt: new Date().toISOString()\n};\n\nreturn [{json: transformedData}];"
          }
        },
        {
          "id": "34",
          "name": "Transform Weather Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            700
          ],
          "parameters": {
            "functionCode": "// Transform weather data for construction site\nconst data = $input.item.json;\n\n// Determine if weather conditions are suitable for construction\nconst windSpeed = data.windSpeed || 0;\nconst precipitation = data.precipitation || 0;\nconst temperature = data.temperature || 20;\n\n// Safety thresholds\nconst isWindSafe = windSpeed < 35; // km/h\nconst isRainSafe = precipitation < 5; // mm\nconst isTempSafe = temperature > 5 && temperature < 35; // Celsius\n\nconst weatherSafe = isWindSafe && isRainSafe && isTempSafe;\n\nconst transformedData = {\n  ...data,\n  isWindSafe,\n  isRainSafe,\n  isTempSafe,\n  weatherSafe,\n  weatherStatus: weatherSafe ? 'suitable' : 'unsuitable',\n  craneOperationAllowed: isWindSafe && windSpeed < 20,\n  concretePouring: isRainSafe && isTempSafe,\n  transformedAt: new Date().toISOString()\n};\n\nreturn [{json: transformedData}];"
          }
        },
        {
          "id": "35",
          "name": "Transform Unknown Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            700
          ],
          "parameters": {
            "functionCode": "// Handle unknown data types\nconst data = $input.item.json;\n\n// Add basic processing metadata\nconst transformedData = {\n  ...data,\n  dataStatus: 'unrecognized-type',\n  processingNote: `Unknown data type: ${data.dataType || 'undefined'}`,\n  transformedAt: new Date().toISOString()\n};\n\nreturn [{json: transformedData}];"
          }
        },
        {
          "id": "36",
          "name": "Merge Transformed Data",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            700,
            700
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "37",
          "name": "Enrich With Processing Metadata",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            700
          ],
          "parameters": {
            "functionCode": "// Add processing metadata to all records\nconst data = $input.item.json;\n\n// Get site information\nconst siteId = data.siteId || 'unknown-site';\nconst projectId = data.projectId || 'unknown-project';\n\n// Add processing context\nconst enrichedData = {\n  ...data,\n  processingId: `proc-${Date.now()}`,\n  processingTimestamp: new Date().toISOString(),\n  dataSource: data.source || 'construction-monitoring',\n  environmentInfo: {\n    siteId,\n    projectId,\n    processingNode: 'data-processing-section'\n  }\n};\n\nreturn [{json: enrichedData}];"
          }
        },
        {
          "id": "38",
          "name": "Split Into Batches",
          "type": "n8n-nodes-base.splitInBatches",
          "typeVersion": 1,
          "position": [
            1100,
            700
          ],
          "parameters": {
            "batchSize": 10
          }
        },
        {
          "id": "39",
          "name": "Is Inventory Batch?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1300,
            700
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.dataType }}",
                  "operation": "equal",
                  "value2": "inventoryData"
                }
              ]
            }
          }
        },
        {
          "id": "40",
          "name": "Process Inventory Batch",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            700
          ],
          "parameters": {
            "functionCode": "// Special processing for inventory batches\nconst data = $input.item.json;\n\n// For inventory data, calculate JIT ordering needs\nlet orderNeeded = false;\nlet orderItems = [];\n\nif (data.materials && Array.isArray(data.materials)) {\n  orderItems = data.materials\n    .filter(m => m.stockStatus === 'reorder-needed')\n    .map(m => ({\n      materialId: m.id,\n      materialName: m.name,\n      currentStock: m.currentStock,\n      orderQuantity: m.maxStock - m.currentStock,\n      priority: m.daysRemaining < 3 ? 'high' : 'normal'\n    }));\n  \n  orderNeeded = orderItems.length > 0;\n}\n\nconst processedData = {\n  ...data,\n  batchProcessed: true,\n  orderNeeded,\n  orderItems,\n  processingNote: 'Inventory batch processed with JIT ordering logic',\n  processedAt: new Date().toISOString()\n};\n\nreturn [{json: processedData}];"
          }
        },
        {
          "id": "41",
          "name": "Process Other Batches",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            850
          ],
          "parameters": {
            "functionCode": "// Standard processing for non-inventory batches\nconst data = $input.item.json;\n\n// Process based on data type\nlet processingNote = '';\nlet alertNeeded = false;\n\nswitch (data.dataType) {\n  case 'safetyData':\n    alertNeeded = !data.isSafe;\n    processingNote = 'Safety data processed';\n    break;\n  case 'progressData':\n    alertNeeded = data.progressStatus === 'delayed' && data.progressDelta < -10;\n    processingNote = 'Progress data processed';\n    break;\n  case 'weatherData':\n    alertNeeded = !data.weatherSafe;\n    processingNote = 'Weather data processed';\n    break;\n  default:\n    processingNote = 'Unknown data type processed with standard logic';\n}\n\nconst processedData = {\n  ...data,\n  batchProcessed: true,\n  alertNeeded,\n  processingNote,\n  processedAt: new Date().toISOString()\n};\n\nreturn [{json: processedData}];"
          }
        },
        {
          "id": "42",
          "name": "Merge Batch Results",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            300,
            850
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "43",
          "name": "Is Last Batch?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            500,
            850
          ],
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $input.last }}",
                  "value2": true
                }
              ]
            }
          }
        },
        {
          "id": "44",
          "name": "Continue Batch Processing",
          "type": "n8n-nodes-base.noOp",
          "typeVersion": 1,
          "position": [
            700,
            850
          ],
          "parameters": {}
        },
        {
          "id": "45",
          "name": "Aggregate Batch Results",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            850
          ],
          "parameters": {
            "functionCode": "// Aggregate results from all batches\nconst items = $input.all.map(i => i.json);\n\n// Calculate summary statistics\nconst dataTypes = {};\nlet alertsNeeded = 0;\nlet ordersNeeded = 0;\n\n// Count by type and status\nitems.forEach(item => {\n  const type = item.dataType || 'unknown';\n  dataTypes[type] = (dataTypes[type] || 0) + 1;\n  \n  if (item.alertNeeded) alertsNeeded++;\n  if (item.orderNeeded) ordersNeeded++;\n});\n\n// Create summary\nconst summary = {\n  totalItemsProcessed: items.length,\n  dataTypeCounts: dataTypes,\n  alertsNeeded,\n  ordersNeeded,\n  processingCompleted: new Date().toISOString(),\n  batchProcessingSummary: 'All batches processed successfully'\n};\n\n// Return original items with summary\nreturn items.map(item => ({\n  json: {\n    ...item,\n    processingComplete: true,\n    batchSummary: summary\n  }\n}));"
          }
        },
        {
          "id": "46",
          "name": "Has Critical Issues?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1100,
            850
          ],
          "parameters": {
            "conditions": {
              "number": [
                {
                  "value1": "={{ $json.batchSummary.alertsNeeded }}",
                  "operation": "larger",
                  "value2": 0
                }
              ]
            }
          }
        },
        {
          "id": "47",
          "name": "Generate Critical Issues Summary",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            850
          ],
          "parameters": {
            "functionCode": "// Generate summary for critical issues\nconst data = $input.item.json;\n\n// Extract critical issues\nlet criticalIssues = [];\n\n// Check for safety issues\nif (data.dataType === 'safetyData' && !data.isSafe) {\n  criticalIssues.push({\n    type: 'safety',\n    description: `Safety compliance issue: ${data.safetyScore * 100}% (below 90% threshold)`,\n    location: data.location || 'Unknown',\n    severity: 'high'\n  });\n}\n\n// Check for weather issues\nif (data.dataType === 'weatherData' && !data.weatherSafe) {\n  const issues = [];\n  if (!data.isWindSafe) issues.push('high wind');\n  if (!data.isRainSafe) issues.push('heavy rain');\n  if (!data.isTempSafe) issues.push('extreme temperature');\n  \n  criticalIssues.push({\n    type: 'weather',\n    description: `Unsafe weather conditions: ${issues.join(', ')}`,\n    location: data.location || 'Site-wide',\n    severity: 'medium'\n  });\n}\n\n// Check for significant delays\nif (data.dataType === 'progressData' && data.progressStatus === 'delayed' && data.progressDelta < -10) {\n  criticalIssues.push({\n    type: 'progress',\n    description: `Significant project delay: ${Math.abs(data.progressDelta)}% behind schedule`,\n    location: data.area || 'Project-wide',\n    severity: 'medium'\n  });\n}\n\n// Check for critical inventory issues\nif (data.dataType === 'inventoryData' && data.orderNeeded) {\n  const urgentItems = data.orderItems.filter(item => item.priority === 'high');\n  if (urgentItems.length > 0) {\n    criticalIssues.push({\n      type: 'inventory',\n      description: `Critical material shortage: ${urgentItems.length} items require immediate ordering`,\n      items: urgentItems.map(i => i.materialName).join(', '),\n      severity: 'high'\n    });\n  }\n}\n\nconst enrichedData = {\n  ...data,\n  criticalIssuesSummary: {\n    hasCriticalIssues: criticalIssues.length > 0,\n    issueCount: criticalIssues.length,\n    issues: criticalIssues,\n    generatedAt: new Date().toISOString()\n  }\n};\n\nreturn [{json: enrichedData}];"
          }
        },
        {
          "id": "48",
          "name": "Generate Standard Summary",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            850
          ],
          "parameters": {
            "functionCode": "// Generate standard summary for non-critical data\nconst data = $input.item.json;\n\n// Create basic summary\nconst standardSummary = {\n  dataType: data.dataType,\n  processingStatus: 'completed',\n  hasCriticalIssues: false,\n  issueCount: 0,\n  generatedAt: new Date().toISOString()\n};\n\n// Add type-specific summaries\nswitch (data.dataType) {\n  case 'safetyData':\n    standardSummary.safetySummary = {\n      complianceScore: data.safetyScore,\n      status: data.safetyStatus\n    };\n    break;\n  case 'progressData':\n    standardSummary.progressSummary = {\n      completion: data.progressPercentage,\n      status: data.progressStatus,\n      delta: data.progressDelta\n    };\n    break;\n  case 'inventoryData':\n    standardSummary.inventorySummary = {\n      totalMaterials: data.materials ? data.materials.length : 0,\n      lowStockItems: data.lowStockItems || 0\n    };\n    break;\n  case 'weatherData':\n    standardSummary.weatherSummary = {\n      suitable: data.weatherSafe,\n      craneOperation: data.craneOperationAllowed,\n      concretePouring: data.concretePouring\n    };\n    break;\n}\n\nconst enrichedData = {\n  ...data,\n  standardSummary\n};\n\nreturn [{json: enrichedData}];"
          }
        },
        {
          "id": "49",
          "name": "Merge Summaries",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            100,
            1000
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "50",
          "name": "Fetch Weather Forecast",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            300,
            1000
          ],
          "parameters": {
            "url": "=https://api.example.com/weather?location={{ $json.location || 'construction-site-1' }}",
            "options": {
              "response": {
                "response": {
                  "fullResponse": true
                }
              }
            }
          }
        },
        {
          "id": "51",
          "name": "Fetch Supplier Inventory",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            500,
            1000
          ],
          "parameters": {
            "url": "=https://api.example.com/suppliers/inventory?project={{ $json.projectId || 'default-project' }}",
            "options": {
              "response": {
                "response": {
                  "fullResponse": true
                }
              }
            }
          }
        },
        {
          "id": "52",
          "name": "Enrich With External Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            1000
          ],
          "parameters": {
            "functionCode": "// Enrich processed data with external API data\nconst data = $input.item.json;\n\n// Extract weather data if available\nlet weatherForecast = {};\nif (data.responseData && data.responseData.weather) {\n  weatherForecast = {\n    forecast: data.responseData.weather.forecast || [],\n    alerts: data.responseData.weather.alerts || [],\n    nextRainEvent: data.responseData.weather.nextRainEvent\n  };\n}\n\n// Extract supplier data if available\nlet supplierData = {};\nif (data.responseData && data.responseData.suppliers) {\n  supplierData = {\n    availableMaterials: data.responseData.suppliers.availableItems || [],\n    leadTimes: data.responseData.suppliers.leadTimes || {},\n    specialOffers: data.responseData.suppliers.specialOffers || []\n  };\n}\n\n// Clean up response data to avoid duplication\nconst { responseData, ...cleanData } = data;\n\n// Combine everything\nconst enrichedData = {\n  ...cleanData,\n  externalData: {\n    weatherForecast,\n    supplierData,\n    retrievedAt: new Date().toISOString()\n  }\n};\n\nreturn [{json: enrichedData}];"
          }
        },
        {
          "id": "53",
          "name": "Any Alerts To Process?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            900,
            1000
          ],
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $json.criticalIssuesSummary ? $json.criticalIssuesSummary.hasCriticalIssues : false }}",
                  "value2": true
                }
              ]
            }
          }
        },
        {
          "id": "54",
          "name": "Format Alerts For Notification",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            1000
          ],
          "parameters": {
            "functionCode": "// Format alerts for notification systems\nconst data = $input.item.json;\nconst issues = data.criticalIssuesSummary?.issues || [];\n\n// Create formatted alerts for different notification channels\nconst emailAlerts = issues.map(issue => ({\n  subject: `ALERT: ${issue.type.toUpperCase()} Issue at Construction Site`,\n  body: `\n    Critical Issue Detected:\\n\n    Type: ${issue.type}\\n\n    Description: ${issue.description}\\n\n    Location: ${issue.location}\\n\n    Severity: ${issue.severity}\\n\n    Detected at: ${data.criticalIssuesSummary.generatedAt}\\n\n    Please take immediate action.\\n\n  `,\n  priority: issue.severity === 'high' ? 'urgent' : 'high'\n}));\n\n// Create SMS alerts (shorter)\nconst smsAlerts = issues.map(issue => ({\n  message: `ALERT: ${issue.type} issue at ${issue.location}. ${issue.description}. Severity: ${issue.severity.toUpperCase()}.`,\n  priority: issue.severity === 'high' ? 'urgent' : 'high'\n}));\n\n// Format for dashboard\nconst dashboardAlerts = issues.map(issue => ({\n  type: issue.type,\n  description: issue.description,\n  location: issue.location,\n  severity: issue.severity,\n  timestamp: data.criticalIssuesSummary.generatedAt,\n  status: 'new',\n  id: `alert-${Date.now()}-${Math.floor(Math.random() * 1000)}`\n}));\n\nconst alertsFormatted = {\n  ...data,\n  formattedAlerts: {\n    email: emailAlerts,\n    sms: smsAlerts,\n    dashboard: dashboardAlerts,\n    formattedAt: new Date().toISOString()\n  }\n};\n\nreturn [{json: alertsFormatted}];"
          }
        },
        {
          "id": "55",
          "name": "Data Processing Output",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            1300,
            1000
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "56",
          "name": "Start External Integrations",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            1000
          ],
          "parameters": {
            "functionCode": "// Initialize external integration process\nconst data = $input.item.json;\nreturn [{json: {\n  ...data,\n  integration_started: true,\n  timestamp: new Date().toISOString()\n}}];"
          }
        },
        {
          "id": "57",
          "name": "Route External Integration",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            100,
            1150
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{ $json.integration_type }}",
            "rules": {
              "rules": [
                {
                  "value2": "weather",
                  "output": 0
                },
                {
                  "value2": "supplier",
                  "output": 1
                },
                {
                  "value2": "vibration",
                  "output": 2
                }
              ]
            },
            "fallbackOutput": 3
          }
        },
        {
          "id": "58",
          "name": "Weather API Authentication",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            300,
            1150
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": {
              "string": [
                {
                  "name": "api_key",
                  "value": "={{ $env.WEATHER_API_KEY }}"
                },
                {
                  "name": "endpoint",
                  "value": "https://api.weatherservice.com/v1/forecast"
                },
                {
                  "name": "location",
                  "value": "={{ $json.site_location || \"51.5074,-0.1278\" }}"
                }
              ]
            }
          }
        },
        {
          "id": "59",
          "name": "Fetch Weather Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            500,
            1150
          ],
          "parameters": {
            "url": "={{ $json.endpoint }}",
            "method": "GET",
            "authentication": "genericCredentialType",
            "allowUnauthorizedCerts": false,
            "queryParameters": {
              "parameters": [
                {
                  "name": "key",
                  "value": "={{ $json.api_key }}"
                },
                {
                  "name": "q",
                  "value": "={{ $json.location }}"
                },
                {
                  "name": "days",
                  "value": "3"
                }
              ]
            },
            "options": {
              "timeout": 5000
            }
          }
        },
        {
          "id": "60",
          "name": "Validate Weather Response",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            700,
            1150
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.current && $json.forecast ? \"valid\" : \"invalid\" }}",
                  "operation": "equal",
                  "value2": "valid"
                }
              ]
            }
          }
        },
        {
          "id": "61",
          "name": "Wait Before Retry",
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1,
          "position": [
            900,
            1150
          ],
          "parameters": {
            "amount": 1,
            "unit": "minutes"
          }
        },
        {
          "id": "62",
          "name": "Map Weather Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            1150
          ],
          "parameters": {
            "functionCode": "// Map weather data to standardized format\nconst data = $input.item.json;\n\nreturn [{\n  json: {\n    source: \"weather_api\",\n    current_temp: data.current.temp_c,\n    current_condition: data.current.condition.text,\n    wind_speed: data.current.wind_kph,\n    wind_direction: data.current.wind_dir,\n    precipitation: data.current.precip_mm,\n    forecast: data.forecast.forecastday.map(day => ({\n      date: day.date,\n      max_temp: day.day.maxtemp_c,\n      min_temp: day.day.mintemp_c,\n      condition: day.day.condition.text,\n      wind_speed: day.day.maxwind_kph,\n      precipitation_chance: day.day.daily_chance_of_rain\n    })),\n    suitable_for_concrete: data.current.precip_mm < 5 && \n                         data.current.temp_c > 5 && \n                         data.current.temp_c < 32 &&\n                         data.current.wind_kph < 30,\n    suitable_for_crane: data.current.wind_kph < 38,\n    original_data: data\n  }\n}];"
          }
        },
        {
          "id": "63",
          "name": "Supplier API Authentication",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            1300,
            1150
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": {
              "string": [
                {
                  "name": "api_key",
                  "value": "={{ $env.SUPPLIER_API_KEY }}"
                },
                {
                  "name": "endpoint",
                  "value": "https://api.constructionsupplier.com/v2/inventory"
                },
                {
                  "name": "supplier_id",
                  "value": "={{ $json.supplier_id || \"main_supplier\" }}"
                }
              ]
            }
          }
        },
        {
          "id": "64",
          "name": "Fetch Supplier Inventory",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            1500,
            1150
          ],
          "parameters": {
            "url": "={{ $json.endpoint }}",
            "method": "GET",
            "authentication": "genericCredentialType",
            "allowUnauthorizedCerts": false,
            "queryParameters": {
              "parameters": [
                {
                  "name": "api_key",
                  "value": "={{ $json.api_key }}"
                },
                {
                  "name": "supplier_id",
                  "value": "={{ $json.supplier_id }}"
                },
                {
                  "name": "project_id",
                  "value": "={{ $json.project_id || \"default\" }}"
                }
              ]
            },
            "options": {
              "timeout": 8000
            }
          }
        },
        {
          "id": "65",
          "name": "Validate Supplier Response",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            100,
            1300
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.status && $json.status === \"success\" && $json.inventory ? \"valid\" : \"invalid\" }}",
                  "operation": "equal",
                  "value2": "valid"
                }
              ]
            }
          }
        },
        {
          "id": "66",
          "name": "Wait Before Supplier Retry",
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1,
          "position": [
            300,
            1300
          ],
          "parameters": {
            "amount": 1,
            "unit": "minutes"
          }
        },
        {
          "id": "67",
          "name": "Map Supplier Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            1300
          ],
          "parameters": {
            "functionCode": "// Map supplier data to standardized format\nconst data = $input.item.json;\n\nreturn [{\n  json: {\n    source: \"supplier_api\",\n    supplier_name: data.supplier_name,\n    inventory_status: data.inventory.map(item => ({\n      material_id: item.id,\n      material_name: item.name,\n      quantity_available: item.quantity,\n      unit: item.unit,\n      price: item.price,\n      currency: item.currency || \"USD\",\n      delivery_time_days: item.delivery_time || 3,\n      in_stock: item.in_stock === true\n    })),\n    low_stock_items: data.inventory.filter(item => item.quantity < item.reorder_level).map(item => item.name),\n    needs_ordering: data.inventory.some(item => item.quantity < item.reorder_level),\n    original_data: data\n  }\n}];"
          }
        },
        {
          "id": "68",
          "name": "Vibration API Authentication",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            700,
            1300
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": {
              "string": [
                {
                  "name": "api_key",
                  "value": "={{ $env.VIBRATION_API_KEY }}"
                },
                {
                  "name": "endpoint",
                  "value": "https://api.vibrationmonitoring.com/v1/readings"
                },
                {
                  "name": "site_id",
                  "value": "={{ $json.site_id || \"main_site\" }}"
                }
              ]
            }
          }
        },
        {
          "id": "69",
          "name": "Fetch Vibration Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            900,
            1300
          ],
          "parameters": {
            "url": "={{ $json.endpoint }}",
            "method": "GET",
            "authentication": "genericCredentialType",
            "allowUnauthorizedCerts": false,
            "queryParameters": {
              "parameters": [
                {
                  "name": "api_key",
                  "value": "={{ $json.api_key }}"
                },
                {
                  "name": "site_id",
                  "value": "={{ $json.site_id }}"
                },
                {
                  "name": "period",
                  "value": "24h"
                }
              ]
            },
            "options": {
              "timeout": 6000
            }
          }
        },
        {
          "id": "70",
          "name": "Validate Vibration Response",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1100,
            1300
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.readings && Array.isArray($json.readings) ? \"valid\" : \"invalid\" }}",
                  "operation": "equal",
                  "value2": "valid"
                }
              ]
            }
          }
        },
        {
          "id": "71",
          "name": "Wait Before Vibration Retry",
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1,
          "position": [
            1300,
            1300
          ],
          "parameters": {
            "amount": 1,
            "unit": "minutes"
          }
        },
        {
          "id": "72",
          "name": "Map Vibration Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            1300
          ],
          "parameters": {
            "functionCode": "// Map vibration data to standardized format\nconst data = $input.item.json;\n\n// Calculate max vibration and check against thresholds\nconst readings = data.readings || [];\nconst maxVibration = readings.reduce((max, reading) => \n  Math.max(max, reading.value), 0);\n\n// Check if any readings exceed safety thresholds\nconst safetyThreshold = 5.0; // Example threshold in mm/s\nconst exceedsThreshold = readings.some(reading => reading.value > safetyThreshold);\n\nreturn [{\n  json: {\n    source: \"vibration_api\",\n    site_id: data.site_id,\n    timestamp: new Date().toISOString(),\n    max_vibration: maxVibration,\n    average_vibration: readings.reduce((sum, reading) => sum + reading.value, 0) / (readings.length || 1),\n    vibration_unit: \"mm/s\",\n    exceeds_threshold: exceedsThreshold,\n    requires_action: exceedsThreshold,\n    readings_summary: readings.map(reading => ({\n      sensor_id: reading.sensor_id,\n      location: reading.location,\n      value: reading.value,\n      timestamp: reading.timestamp,\n      exceeds_threshold: reading.value > safetyThreshold\n    })),\n    original_data: data\n  }\n}];"
          }
        },
        {
          "id": "73",
          "name": "Combine External Data",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            100,
            1450
          ],
          "parameters": {
            "mode": "mergeByPosition"
          }
        },
        {
          "id": "74",
          "name": "Classify Error",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            1450
          ],
          "parameters": {
            "functionCode": "// Get the error data from input\nconst error = $input.all()[0].json.error || {};\n\n// Classify the error based on type\nlet errorType = 'unknown';\nlet severity = 'low';\nlet recoverable = true;\n\nif (error.message && error.message.includes('timeout')) {\n  errorType = 'timeout';\n  severity = 'medium';\n} else if (error.message && error.message.includes('network')) {\n  errorType = 'network';\n  severity = 'high';\n} else if (error.code && error.code.includes('AUTH')) {\n  errorType = 'authentication';\n  severity = 'high';\n} else if (error.status && error.status >= 500) {\n  errorType = 'server';\n  severity = 'high';\n} else if (error.status && error.status >= 400) {\n  errorType = 'client';\n  severity = 'medium';\n}\n\n// Determine if error is recoverable\nif (errorType === 'server' && error.status === 503) {\n  // Service unavailable is usually temporary\n  recoverable = true;\n} else if (errorType === 'authentication') {\n  // Auth errors need manual intervention\n  recoverable = false;\n}\n\nreturn [{\n  json: {\n    error,\n    classification: {\n      type: errorType,\n      severity,\n      recoverable,\n      timestamp: new Date().toISOString(),\n      source: error.source || 'construction-site-monitoring'\n    }\n  }\n}];"
          }
        },
        {
          "id": "75",
          "name": "Determine Recovery Strategy",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            500,
            1450
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{ $json.classification.recoverable }}",
            "rules": [
              {
                "value2": true,
                "output": 0
              },
              {
                "value2": false,
                "output": 1
              }
            ],
            "fallbackOutput": 1
          }
        },
        {
          "id": "76",
          "name": "Execute Fallback Processing",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            1450
          ],
          "parameters": {
            "functionCode": "// Implement fallback processing for recoverable errors\nconst error = $input.all()[0].json;\nconst errorType = error.classification.type;\n\nlet fallbackResult = {};\n\n// Create appropriate fallback based on error type\nswitch(errorType) {\n  case 'timeout':\n  case 'network':\n    // For timeout/network issues, use cached data if available\n    fallbackResult = {\n      useCachedData: true,\n      cacheSource: 'last_successful_run',\n      retryAfter: 300, // 5 minutes\n    };\n    break;\n    \n  case 'server':\n    // For server errors, use alternative data source if available\n    fallbackResult = {\n      useAlternativeSource: true,\n      alternativeSource: 'backup_api',\n      retryAfter: 600, // 10 minutes\n    };\n    break;\n    \n  default:\n    // Default fallback strategy\n    fallbackResult = {\n      useDefaultValues: true,\n      notifyUser: true,\n      retryAfter: 1800, // 30 minutes\n    };\n}\n\nreturn [{\n  json: {\n    error: error.error,\n    classification: error.classification,\n    recovery: {\n      strategy: 'fallback',\n      action: 'executed',\n      fallbackResult\n    }\n  }\n}];"
          }
        },
        {
          "id": "77",
          "name": "Log Error Details",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            1450
          ],
          "parameters": {
            "functionCode": "// Comprehensive error logging function\nconst errorData = $input.all()[0].json;\n\n// Format error details for logging\nconst logEntry = {\n  timestamp: new Date().toISOString(),\n  errorType: errorData.classification.type,\n  severity: errorData.classification.severity,\n  message: errorData.error.message || 'Unknown error',\n  source: errorData.classification.source,\n  recoverable: errorData.classification.recoverable,\n  recoveryStrategy: errorData.recovery ? errorData.recovery.strategy : 'none',\n  stackTrace: errorData.error.stack || '',\n  context: {\n    operation: errorData.error.operation || 'unknown',\n    component: errorData.error.component || 'unknown',\n    inputData: errorData.error.inputData || {}\n  }\n};\n\n// In a real scenario, this would write to a logging system\n// For this example, we'll just pass it through\n\nconsole.log('ERROR LOG:', JSON.stringify(logEntry, null, 2));\n\nreturn [{\n  json: {\n    ...errorData,\n    logging: {\n      status: 'completed',\n      logEntry\n    }\n  }\n}];"
          }
        },
        {
          "id": "78",
          "name": "Notify Administrators",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            1100,
            1450
          ],
          "parameters": {
            "fromEmail": "alerts@construction-monitoring.com",
            "toEmail": "=admin@construction-monitoring.com",
            "subject": "=Construction Site Monitoring Error: {{ $json.classification.type }} ({{ $json.classification.severity }})",
            "text": "=Error Details:\n\nType: {{ $json.classification.type }}\nSeverity: {{ $json.classification.severity }}\nTimestamp: {{ $json.classification.timestamp }}\nRecoverable: {{ $json.classification.recoverable }}\n\nMessage: {{ $json.error.message }}\nSource: {{ $json.classification.source }}\n\nRecovery Strategy: {{ $json.recovery.strategy }}\nAction Taken: {{ $json.recovery.action }}\n\nFull Error Log:\n{{ JSON.stringify($json.logging.logEntry, null, 2) }}\n\nPlease take appropriate action based on the error severity.",
            "options": {
              "attachments": "={{[]}}"
            }
          }
        },
        {
          "id": "79",
          "name": "Collect Activity & Performance Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            1450
          ],
          "parameters": {
            "functionCode": "// Get the incoming data\nconst inputData = $input.all();\n\n// Generate activity data\nconst activityData = {\n  timestamp: new Date().toISOString(),\n  workflowId: $workflow.id,\n  executionId: $execution.id,\n  nodeName: $node.name,\n  dataSize: JSON.stringify(inputData).length,\n  processingTime: Date.now() - $execution.startedAt,\n  inputDataCount: inputData.length\n};\n\n// Return the original data with activity tracking\nreturn inputData.map(item => {\n  const json = item.json;\n  return {\n    json: {\n      ...json,\n      _activityData: activityData\n    }\n  };\n});"
          }
        },
        {
          "id": "80",
          "name": "Check For Critical Events",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1500,
            1450
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.status }}",
                  "operation": "contains",
                  "value2": "error"
                }
              ],
              "number": [
                {
                  "value1": "={{ $json.responseCode || 200 }}",
                  "operation": "larger",
                  "value2": 399
                }
              ],
              "boolean": [
                {
                  "value1": "={{ $json.isEmergency || false }}",
                  "operation": "equal",
                  "value2": true
                }
              ]
            },
            "combineOperation": "any"
          }
        },
        {
          "id": "81",
          "name": "Create Critical Audit Trail",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            1600
          ],
          "parameters": {
            "functionCode": "// Create detailed audit trail for critical events\nconst inputData = $input.item;\n\nconst criticalAudit = {\n  timestamp: new Date().toISOString(),\n  severity: 'CRITICAL',\n  source: inputData.json._activityData?.nodeName || 'unknown',\n  eventType: inputData.json.status || 'error',\n  details: JSON.stringify(inputData.json),\n  alertSent: true,\n  responseCode: inputData.json.responseCode,\n  errorMessage: inputData.json.error || inputData.json.errorMessage,\n  affectedComponents: inputData.json.components || ['main-system'],\n  executionId: $execution.id\n};\n\nreturn [{\n  json: {\n    ...inputData.json,\n    _auditTrail: criticalAudit,\n    _metrics: {\n      criticalEvents: 1,\n      lastCriticalTimestamp: new Date().toISOString(),\n      responseTime: inputData.json._activityData?.processingTime || 0,\n      dataSize: inputData.json._activityData?.dataSize || 0\n    }\n  }\n}];"
          }
        },
        {
          "id": "82",
          "name": "Create Standard Audit Trail",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            1600
          ],
          "parameters": {
            "functionCode": "// Create standard audit trail for normal operations\nconst inputData = $input.item;\n\nconst standardAudit = {\n  timestamp: new Date().toISOString(),\n  severity: 'INFO',\n  source: inputData.json._activityData?.nodeName || 'unknown',\n  eventType: inputData.json.operation || 'standard-operation',\n  details: JSON.stringify(inputData.json).substring(0, 100) + '...',\n  alertSent: false,\n  responseCode: inputData.json.responseCode || 200,\n  executionId: $execution.id\n};\n\nreturn [{\n  json: {\n    ...inputData.json,\n    _auditTrail: standardAudit,\n    _metrics: {\n      standardEvents: 1,\n      lastStandardTimestamp: new Date().toISOString(),\n      responseTime: inputData.json._activityData?.processingTime || 0,\n      dataSize: inputData.json._activityData?.dataSize || 0\n    }\n  }\n}];"
          }
        },
        {
          "id": "83",
          "name": "Merge Monitoring Data",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            500,
            1600
          ],
          "parameters": {
            "mode": "mergeByPosition"
          }
        }
      ],
      "connections": {
        "Main System Trigger": {
          "main": [
            [
              {
                "node": "Validate Input Data",
                "type": "main",
                "index": 0
              },
              {
                "node": "Validate Input Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate Input Data": {
          "main": [
            [
              {
                "node": "Is Data Valid?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Data Valid?": {
          "main": [
            [
              {
                "node": "Route By Event Type",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Route By Event Type": {
          "main": [
            [
              {
                "node": "Process Safety Event",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Safety Event": {
          "main": [
            [
              {
                "node": "Process Progress Event",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Progress Event": {
          "main": [
            [
              {
                "node": "Process Weather Event",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Weather Event": {
          "main": [
            [
              {
                "node": "Merge All Results",
                "type": "main",
                "index": 0
              },
              {
                "node": "Merge All Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check If Alert Needed": {
          "main": [
            [
              {
                "node": "Send Alert Notification",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Webhook Trigger": {
          "main": [
            [
              {
                "node": "Validate Input Data",
                "type": "main",
                "index": 0
              },
              {
                "node": "Route By Task Type",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Alert Notification": {
          "main": [
            [
              {
                "node": "Webhook Trigger",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Route By Task Type": {
          "main": [
            [
              {
                "node": "Process Safety Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Safety Data": {
          "main": [
            [
              {
                "node": "Process Worker Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Worker Data": {
          "main": [
            [
              {
                "node": "Process Progress Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Progress Data": {
          "main": [
            [
              {
                "node": "Handle Unknown Task",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge All Results": {
          "main": [
            [
              {
                "node": "Format Response",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Error Trigger": {
          "main": [
            [
              {
                "node": "Process Error",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Error": {
          "main": [
            [
              {
                "node": "Prepare Data for Validation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Prepare Data for Validation": {
          "main": [
            [
              {
                "node": "Schema Validation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Schema Validation": {
          "main": [
            [
              {
                "node": "Type Checking",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Type Checking": {
          "main": [
            [
              {
                "node": "Business Rule Validation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Sanitize Data": {
          "main": [
            [
              {
                "node": "Validation Decision",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validation Decision": {
          "main": [
            [
              {
                "node": "Format Validation Errors",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Validation Errors": {
          "main": [
            [
              {
                "node": "Prepare For Next Section",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Prepare For Next Section": {
          "main": [
            [
              {
                "node": "Data Processing Entry Point",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Data Processing Entry Point": {
          "main": [
            [
              {
                "node": "Route By Data Type",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Route By Data Type": {
          "main": [
            [
              {
                "node": "Transform Safety Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Transform Safety Data": {
          "main": [
            [
              {
                "node": "Transform Progress Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Transform Inventory Data": {
          "main": [
            [
              {
                "node": "Transform Weather Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Transform Weather Data": {
          "main": [
            [
              {
                "node": "Transform Unknown Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Transform Unknown Data": {
          "main": [
            [
              {
                "node": "Merge Transformed Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Transformed Data": {
          "main": [
            [
              {
                "node": "Enrich With Processing Metadata",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Enrich With Processing Metadata": {
          "main": [
            [
              {
                "node": "Split Into Batches",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Split Into Batches": {
          "main": [
            [
              {
                "node": "Is Inventory Batch?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Inventory Batch?": {
          "main": [
            [
              {
                "node": "Process Inventory Batch",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Other Batches": {
          "main": [
            [
              {
                "node": "Merge Batch Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Batch Results": {
          "main": [
            [
              {
                "node": "Is Last Batch?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Last Batch?": {
          "main": [
            [
              {
                "node": "Continue Batch Processing",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Continue Batch Processing": {
          "main": [
            [
              {
                "node": "Aggregate Batch Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Aggregate Batch Results": {
          "main": [
            [
              {
                "node": "Has Critical Issues?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Has Critical Issues?": {
          "main": [
            [
              {
                "node": "Generate Critical Issues Summary",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Generate Critical Issues Summary": {
          "main": [
            [
              {
                "node": "Generate Standard Summary",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Summaries": {
          "main": [
            [
              {
                "node": "Fetch Weather Forecast",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Weather Forecast": {
          "main": [
            [
              {
                "node": "Fetch Supplier Inventory",
                "type": "main",
                "index": 0
              },
              {
                "node": "Fetch Supplier Inventory",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Supplier Inventory": {
          "main": [
            [
              {
                "node": "Enrich With External Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Enrich With External Data": {
          "main": [
            [
              {
                "node": "Any Alerts To Process?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Any Alerts To Process?": {
          "main": [
            [
              {
                "node": "Format Alerts For Notification",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Alerts For Notification": {
          "main": [
            [
              {
                "node": "Data Processing Output",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Data Processing Output": {
          "main": [
            [
              {
                "node": "Start External Integrations",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Route External Integration": {
          "main": [
            [
              {
                "node": "Weather API Authentication",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Weather API Authentication": {
          "main": [
            [
              {
                "node": "Fetch Weather Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Weather Data": {
          "main": [
            [
              {
                "node": "Validate Weather Response",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate Weather Response": {
          "main": [
            [
              {
                "node": "Wait Before Retry",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wait Before Retry": {
          "main": [
            [
              {
                "node": "Map Weather Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Map Weather Data": {
          "main": [
            [
              {
                "node": "Supplier API Authentication",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate Supplier Response": {
          "main": [
            [
              {
                "node": "Wait Before Supplier Retry",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wait Before Supplier Retry": {
          "main": [
            [
              {
                "node": "Map Supplier Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Map Supplier Data": {
          "main": [
            [
              {
                "node": "Vibration API Authentication",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Vibration API Authentication": {
          "main": [
            [
              {
                "node": "Fetch Vibration Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Vibration Data": {
          "main": [
            [
              {
                "node": "Validate Vibration Response",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate Vibration Response": {
          "main": [
            [
              {
                "node": "Wait Before Vibration Retry",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wait Before Vibration Retry": {
          "main": [
            [
              {
                "node": "Map Vibration Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Combine External Data": {
          "main": [
            [
              {
                "node": "Classify Error",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Classify Error": {
          "main": [
            [
              {
                "node": "Determine Recovery Strategy",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Determine Recovery Strategy": {
          "main": [
            [
              {
                "node": "Execute Fallback Processing",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Execute Fallback Processing": {
          "main": [
            [
              {
                "node": "Log Error Details",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Log Error Details": {
          "main": [
            [
              {
                "node": "Notify Administrators",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Notify Administrators": {
          "main": [
            [
              {
                "node": "Collect Activity & Performance Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Collect Activity & Performance Data": {
          "main": [
            [
              {
                "node": "Check For Critical Events",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create Critical Audit Trail": {
          "main": [
            [
              {
                "node": "Create Standard Audit Trail",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create Standard Audit Trail": {
          "main": [
            [
              {
                "node": "Merge Monitoring Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {},
      "active": false
    },
    "provider": "anthropic",
    "model": "claude-3-7-sonnet-20250219",
    "timestamp": "2025-07-22T16:25:46.012Z",
    "nodeCount": 83,
    "connectionCount": 75
  },
  {
    "id": "63e66032-c530-4b5a-977e-0561cab24666",
    "prompt": "To create a comprehensive n8n workflow for Construction Site Safety and Progress Monitoring, we'll implement a series of interconnected features using various n8n nodes. We'll follow the CRITICAL ORCHESTRATION REQUIRED structure to ensure all components are integrated and work together seamlessly.\n\n### Workflow Structure:\n\n1. **Main Entry Point:**\n   - **Trigger Node:** Use `n8n-nodes-base.webhook` to initiate the workflow based on incoming data or events.\n\n2. **Central Router:**\n   - **Switch Node:** This will route the workflow to different branches based on the type of data/event received (e.g., safety monitoring, progress updates, emergency handling).\n\n3. **Feature Branches:**\n\n#### Helmet and Seat Belt Monitoring\n- **Camera Integration:**\n  - **HTTP Request Node:** Connect cameras to monitor helmet and seat belt usage.\n  - **Image Analysis:** Use an external API for image analysis to detect compliance.\n  - **Decision Node:** Route based on compliance; notify management if non-compliance is detected.\n\n#### Daily Worker Entry/Exit and Timekeeping\n- **RFID/Barcode Scanning:**\n  - **HTTP Request Node:** For scanning worker badges.\n  - **Database Node:** Log entries/exits in a timekeeping database.\n  - **Set Node:** Prepare data for daily reports.\n\n#### Weekly Progress Photography with Drones\n- **Drone Operation:**\n  - **Execute Command Node:** Trigger drones for scheduled photography.\n  - **Google Drive Node:** Upload images to cloud storage.\n  - **HTTP Request Node:** Use image processing API for progress analysis.\n\n#### Weather Monitoring During Concrete Pouring\n- **Weather API Integration:**\n  - **HTTP Request Node:** Fetch current weather data.\n  - **Decision Node:** If adverse weather conditions (e.g., rain), delay pouring.\n  - **Set Node:** Notify site managers of weather status.\n\n#### Tower Crane Wind Sensors and Automatic Shutdown\n- **Wind Sensor Monitoring:**\n  - **n8n-nodes-base.mqtt:** Connect to wind sensors.\n  - **Decision Node:** If wind exceeds limits, trigger emergency shutdown.\n  - **Email Node:** Notify crane operators and safety managers.\n\n#### Material Stock Tracking and JIT Ordering\n- **Inventory Management:**\n  - **Database Node:** Track material levels.\n  - **Decision Node:** If stock below threshold, trigger JIT ordering.\n  - **HTTP Request Node:** Send order requests to suppliers.\n\n#### Emergency Protocol in Case of Workplace Accidents\n- **Emergency Response:**\n  - **Error Trigger Node:** Capture incident events.\n  - **Email Node:** Immediate alerts to safety team.\n  - **Function Node:** Log details and initiate emergency protocol.\n\n#### Night Security Patrol Route Tracking\n- **Patrol Monitoring:**\n  - **GPS Tracking Node:** Monitor security routes.\n  - **Set Node:** Log patrol data for security reports.\n  - **Decision Node:** Alert if patrol deviates from route.\n\n#### Neighboring Building Vibration Sensor Monitoring\n- **Vibration Monitoring:**\n  - **n8n-nodes-base.mqtt:** Connect to vibration sensors.\n  - **Decision Node:** If vibrations exceed limits, notify construction manager.\n  - **Email Node:** Detailed report to stakeholders.\n\n#### Contractor Progress Payment Photo Documentation\n- **Progress Payment Verification:**\n  - **HTTP Request Node:** Receive photo documentation from contractors.\n  - **Decision Node:** Verify documentation completeness.\n  - **Set Node:** Prepare payment release documentation.\n\n4. **Central Merge Node:**\n   - **Merge Node:** Combine outputs from all feature branches for a cohesive overview.\n\n5. **Final Processing/Response:**\n   - **Set Node:** Compile a summary report.\n   - **Email Node:** Send daily/weekly summaries to project management.\n\n### Error Handling:\n- **Error Trigger Node:** Global error handling for capturing any workflow failures.\n- **Function Node:** Log errors and attempt recovery.\n- **Email Node:** Send notifications for unresolved errors.\n\n### Validation Checklist:\n☑ All nodes are connected and data flows logically  \n☑ Error handling is comprehensive and covers all branches  \n☑ All branches merge back to the central flow  \n☑ Decision nodes handle both true/false paths  \n☑ Data transformation nodes are included where necessary  \n\nThis workflow ensures thorough monitoring and management of construction site safety and progress, meeting the requirements for interconnected feature orchestration and comprehensive error handling.",
    "workflow": {
      "name": "Construction Site Safety and Progress Monitoring99",
      "nodes": [
        {
          "id": "1",
          "name": "Main Trigger",
          "type": "n8n-nodes-base.webhook",
          "typeVersion": 1,
          "position": [
            100,
            100
          ],
          "parameters": {
            "path": "construction-monitoring",
            "responseMode": "lastNode",
            "options": {}
          }
        },
        {
          "id": "2",
          "name": "Route By Task Type",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            300,
            100
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{ $json.taskType }}",
            "rules": [
              {
                "value2": "safety",
                "output": 0
              },
              {
                "value2": "progress",
                "output": 1
              },
              {
                "value2": "emergency",
                "output": 2
              },
              {
                "value2": "weather",
                "output": 3
              },
              {
                "value2": "inventory",
                "output": 4
              }
            ],
            "fallbackOutput": 5
          }
        },
        {
          "id": "3",
          "name": "Process Safety Monitoring",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            100
          ],
          "parameters": {
            "functionCode": "// Process safety monitoring data (helmet detection, seatbelt usage, etc.)\nconst data = $input.item.json;\nconst processed = {\n  ...data,\n  safetyStatus: data.compliance ? 'compliant' : 'non-compliant',\n  processedAt: new Date().toISOString(),\n  requiresAlert: !data.compliance,\n  alertType: !data.compliance ? 'safety_violation' : null,\n  alertMessage: !data.compliance ? `Safety violation detected: ${data.details || 'Unknown issue'}` : null\n};\n\nreturn [{json: processed}];"
          }
        },
        {
          "id": "4",
          "name": "Process Progress Monitoring",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            100
          ],
          "parameters": {
            "functionCode": "// Process construction progress data (drone photos, inspections, etc.)\nconst data = $input.item.json;\nconst processed = {\n  ...data,\n  progressPercentage: data.currentProgress || 0,\n  isOnSchedule: (data.currentProgress >= data.expectedProgress),\n  processedAt: new Date().toISOString(),\n  requiresAlert: (data.currentProgress < data.expectedProgress),\n  alertType: (data.currentProgress < data.expectedProgress) ? 'schedule_delay' : null,\n  alertMessage: (data.currentProgress < data.expectedProgress) ? `Project behind schedule: ${data.expectedProgress - data.currentProgress}% behind` : null\n};\n\nreturn [{json: processed}];"
          }
        },
        {
          "id": "5",
          "name": "Process Emergency Protocol",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            100
          ],
          "parameters": {
            "functionCode": "// Process emergency situation data\nconst data = $input.item.json;\nconst processed = {\n  ...data,\n  emergencyType: data.type || 'unknown',\n  severity: data.severity || 'high',\n  processedAt: new Date().toISOString(),\n  requiresAlert: true,\n  alertType: 'emergency',\n  alertMessage: `EMERGENCY: ${data.details || 'Emergency situation reported'}`\n};\n\nreturn [{json: processed}];"
          }
        },
        {
          "id": "6",
          "name": "Process Weather Monitoring",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            100
          ],
          "parameters": {
            "functionCode": "// Process weather monitoring data for concrete pouring, etc.\nconst data = $input.item.json;\nconst isSafe = data.precipitation < 5 && data.windSpeed < 20;\nconst processed = {\n  ...data,\n  weatherStatus: isSafe ? 'suitable' : 'unsuitable',\n  processedAt: new Date().toISOString(),\n  requiresAlert: !isSafe,\n  alertType: !isSafe ? 'weather_warning' : null,\n  alertMessage: !isSafe ? `Unsuitable weather conditions for construction: ${data.details || 'Check weather data'}` : null\n};\n\nreturn [{json: processed}];"
          }
        },
        {
          "id": "7",
          "name": "Process Inventory Management",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            100
          ],
          "parameters": {
            "functionCode": "// Process inventory management data\nconst data = $input.item.json;\nconst lowStock = (data.currentStock < data.minThreshold);\nconst processed = {\n  ...data,\n  stockStatus: lowStock ? 'low' : 'adequate',\n  processedAt: new Date().toISOString(),\n  requiresAlert: lowStock,\n  alertType: lowStock ? 'low_stock' : null,\n  alertMessage: lowStock ? `Low stock alert: ${data.itemName} (${data.currentStock}/${data.minThreshold})` : null\n};\n\nreturn [{json: processed}];"
          }
        },
        {
          "id": "8",
          "name": "Handle Unknown Task Type",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            100
          ],
          "parameters": {
            "functionCode": "// Handle unknown task types\nconst data = $input.item.json;\nconst processed = {\n  ...data,\n  status: 'unrecognized',\n  processedAt: new Date().toISOString(),\n  requiresAlert: false,\n  alertType: null,\n  alertMessage: null,\n  error: `Unknown task type: ${data.taskType || 'No task type provided'}`\n};\n\nreturn [{json: processed}];"
          }
        },
        {
          "id": "9",
          "name": "Merge All Results",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            100,
            250
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "10",
          "name": "Check For Alerts",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            300,
            250
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.requiresAlert }}",
                  "operation": "equal",
                  "value2": "true"
                }
              ]
            }
          }
        },
        {
          "id": "11",
          "name": "Send Alert Notification",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            500,
            250
          ],
          "parameters": {
            "fromEmail": "alerts@construction-monitoring.com",
            "toEmail": "={{ $json.alertRecipients || 'site-manager@construction.com' }}",
            "subject": "={{ 'ALERT: ' + $json.alertType + ' - Construction Site Monitoring' }}",
            "text": "={{ 'Alert Message: ' + $json.alertMessage + '\\n\\nDetails: ' + JSON.stringify($json, null, 2) }}",
            "options": {}
          }
        },
        {
          "id": "12",
          "name": "Prepare Response",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            700,
            250
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": [
              {
                "name": "success",
                "value": "true",
                "type": "boolean"
              },
              {
                "name": "message",
                "value": "={{ 'Data processed successfully' }}",
                "type": "string"
              },
              {
                "name": "data",
                "value": "={{ $json }}",
                "type": "json"
              },
              {
                "name": "timestamp",
                "value": "={{ $now }}",
                "type": "string"
              }
            ]
          }
        },
        {
          "id": "13",
          "name": "Merge Responses",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            900,
            250
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "14",
          "name": "Respond To Webhook",
          "type": "n8n-nodes-base.respondToWebhook",
          "typeVersion": 1,
          "position": [
            1100,
            250
          ],
          "parameters": {}
        },
        {
          "id": "15",
          "name": "Main Webhook Trigger",
          "type": "n8n-nodes-base.webhook",
          "typeVersion": 1,
          "position": [
            1300,
            250
          ],
          "parameters": {
            "path": "construction-monitoring",
            "responseMode": "lastNode",
            "options": {}
          }
        },
        {
          "id": "16",
          "name": "Validate Input Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            250
          ],
          "parameters": {
            "functionCode": "// Validate incoming data structure\nconst inputData = items[0].json;\nconst validationErrors = [];\n\n// Check required fields\nif (!inputData.taskType) {\n  validationErrors.push('Missing taskType field');\n}\n\n// Return validation result\nif (validationErrors.length > 0) {\n  return [{json: {\n    valid: false,\n    errors: validationErrors,\n    inputData\n  }}];\n} else {\n  return [{json: {\n    valid: true,\n    data: inputData\n  }}];\n}\n"
          }
        },
        {
          "id": "17",
          "name": "Check Validation Result",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            100,
            400
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{$json[\"valid\"]}}",
                  "operation": "equal",
                  "value2": true
                }
              ]
            }
          }
        },
        {
          "id": "18",
          "name": "Route By Task Type",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            300,
            400
          ],
          "parameters": {
            "dataPropertyName": "data.taskType",
            "rules": [
              {
                "value": "safety",
                "output": 0
              },
              {
                "value": "progress",
                "output": 1
              },
              {
                "value": "materials",
                "output": 2
              },
              {
                "value": "emergency",
                "output": 3
              }
            ],
            "fallbackOutput": 4
          }
        },
        {
          "id": "19",
          "name": "Process Construction Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            400
          ],
          "parameters": {
            "functionCode": "// Process construction data based on task type\nconst data = items[0].json.data;\nconst taskType = data.taskType;\n\nlet result;\n\nswitch(taskType) {\n  case 'safety':\n    result = {\n      processed: true,\n      taskType: 'safety',\n      safetyStatus: analyzeHelmetData(data),\n      timestamp: new Date().toISOString()\n    };\n    break;\n  case 'progress':\n    result = {\n      processed: true,\n      taskType: 'progress',\n      progressStatus: analyzeProgressData(data),\n      timestamp: new Date().toISOString()\n    };\n    break;\n  case 'materials':\n    result = {\n      processed: true,\n      taskType: 'materials',\n      inventoryStatus: analyzeInventoryData(data),\n      timestamp: new Date().toISOString()\n    };\n    break;\n  case 'emergency':\n    result = {\n      processed: true,\n      taskType: 'emergency',\n      emergencyStatus: processEmergencyData(data),\n      priority: 'HIGH',\n      timestamp: new Date().toISOString()\n    };\n    break;\n  default:\n    result = {\n      processed: true,\n      taskType: 'unknown',\n      status: 'processed with default handler',\n      timestamp: new Date().toISOString()\n    };\n}\n\nreturn [{json: result}];\n\n// Helper functions\nfunction analyzeHelmetData(data) {\n  // Analyze helmet and safety equipment data\n  return {\n    compliant: data.helmetDetected === true,\n    location: data.location,\n    detectionConfidence: data.confidence || 0.8\n  };\n}\n\nfunction analyzeProgressData(data) {\n  // Analyze construction progress data\n  return {\n    currentPhase: data.phase,\n    percentComplete: data.percentComplete || 0,\n    onSchedule: data.onSchedule === true\n  };\n}\n\nfunction analyzeInventoryData(data) {\n  // Analyze material inventory data\n  return {\n    material: data.material,\n    currentStock: data.currentStock,\n    reorderNeeded: (data.currentStock < data.reorderThreshold)\n  };\n}\n\nfunction processEmergencyData(data) {\n  // Process emergency situation data\n  return {\n    type: data.emergencyType,\n    location: data.location,\n    requiresEvacuation: data.severity > 7,\n    responders: data.responders || ['safety-team']\n  };\n}"
          }
        },
        {
          "id": "20",
          "name": "Merge All Branches",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            700,
            400
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "21",
          "name": "Check For Critical Issues",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            900,
            400
          ],
          "parameters": {
            "conditions": {
              "or": [
                {
                  "string": [
                    {
                      "value1": "={{$json[\"taskType\"]}}",
                      "operation": "equal",
                      "value2": "emergency"
                    }
                  ]
                },
                {
                  "boolean": [
                    {
                      "value1": "={{$json.safetyStatus ? $json.safetyStatus.compliant === false : false}}",
                      "value2": true
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "22",
          "name": "Send Critical Alert",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            1100,
            400
          ],
          "parameters": {
            "from": "alerts@construction-monitor.com",
            "to": "safety-team@construction-company.com",
            "subject": "=CRITICAL ALERT: {{$json.taskType}} Issue Detected",
            "text": "=A critical issue has been detected:\n\nType: {{$json.taskType}}\nTimestamp: {{$json.timestamp}}\n\nDetails: {{JSON.stringify($json, null, 2)}}\n\nPlease take immediate action.\n\nThis is an automated alert."
          }
        },
        {
          "id": "23",
          "name": "Prepare Response",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            400
          ],
          "parameters": {
            "functionCode": "// Prepare final response\nconst data = items[0].json;\n\nreturn [{\n  json: {\n    success: true,\n    data: data,\n    message: `Successfully processed ${data.taskType} data`,\n    timestamp: new Date().toISOString()\n  }\n}];"
          }
        },
        {
          "id": "24",
          "name": "Error Handler",
          "type": "n8n-nodes-base.errorTrigger",
          "typeVersion": 1,
          "position": [
            1500,
            400
          ],
          "parameters": {
            "errorMessage": "=Workflow failed: {{$execution.error.message}}"
          }
        },
        {
          "id": "25",
          "name": "Prepare Data for Validation",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            550
          ],
          "parameters": {
            "functionCode": "// Prepare the data for validation\nconst inputData = items[0].json;\n\n// Structure the data for validation pipeline\nconst dataForValidation = {\n  ...inputData,\n  _validationContext: {\n    timestamp: new Date().toISOString(),\n    validationStarted: true,\n    errors: []\n  }\n};\n\nreturn [{json: dataForValidation}];"
          }
        },
        {
          "id": "26",
          "name": "Schema Validation",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            550
          ],
          "parameters": {
            "functionCode": "// Schema validation for construction site data\nconst data = items[0].json;\nconst errors = [];\n\n// Define required fields based on data type\nconst requiredFields = {\n  safety: ['siteId', 'timestamp', 'safetyType', 'value'],\n  progress: ['siteId', 'timestamp', 'progressType', 'completionPercentage'],\n  worker: ['workerId', 'siteId', 'timestamp', 'action'],\n  material: ['siteId', 'materialId', 'quantity', 'unit'],\n  weather: ['siteId', 'timestamp', 'temperature', 'conditions'],\n  crane: ['craneId', 'siteId', 'timestamp', 'windSpeed']\n};\n\n// Determine data type\nconst dataType = data.dataType || 'unknown';\n\n// Check required fields\nif (requiredFields[dataType]) {\n  for (const field of requiredFields[dataType]) {\n    if (data[field] === undefined) {\n      errors.push(`Missing required field: ${field} for ${dataType} data`);\n    }\n  }\n}\n\n// Add validation results to context\ndata._validationContext.schemaValidation = {\n  passed: errors.length === 0,\n  errors\n};\n\nif (errors.length > 0) {\n  data._validationContext.errors = [...data._validationContext.errors, ...errors];\n}\n\nreturn [{json: data}];"
          }
        },
        {
          "id": "27",
          "name": "Type Checking",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            550
          ],
          "parameters": {
            "functionCode": "// Type checking for construction site data\nconst data = items[0].json;\nconst errors = [];\n\n// Define type expectations\nconst typeChecks = {\n  siteId: { type: 'string', pattern: /^[A-Z]{2}\\d{4}$/ },\n  workerId: { type: 'string' },\n  timestamp: { type: 'string', isDate: true },\n  safetyType: { type: 'string', enum: ['helmet', 'seatbelt', 'harness', 'goggles'] },\n  value: { type: 'boolean' },\n  completionPercentage: { type: 'number', min: 0, max: 100 },\n  action: { type: 'string', enum: ['entry', 'exit', 'break'] },\n  quantity: { type: 'number', min: 0 },\n  temperature: { type: 'number' },\n  windSpeed: { type: 'number', min: 0 }\n};\n\n// Check types for present fields\nfor (const [field, value] of Object.entries(data)) {\n  if (field.startsWith('_')) continue; // Skip internal fields\n  \n  const check = typeChecks[field];\n  if (!check) continue; // Skip fields without type definitions\n  \n  // Type checks\n  if (check.type === 'string' && typeof value !== 'string') {\n    errors.push(`Field ${field} must be a string`);\n  } else if (check.type === 'number' && typeof value !== 'number') {\n    errors.push(`Field ${field} must be a number`);\n  } else if (check.type === 'boolean' && typeof value !== 'boolean') {\n    errors.push(`Field ${field} must be a boolean`);\n  }\n  \n  // Additional checks for strings\n  if (typeof value === 'string' && check.type === 'string') {\n    if (check.pattern && !check.pattern.test(value)) {\n      errors.push(`Field ${field} does not match required pattern`);\n    }\n    if (check.enum && !check.enum.includes(value)) {\n      errors.push(`Field ${field} must be one of: ${check.enum.join(', ')}`);\n    }\n    if (check.isDate && isNaN(Date.parse(value))) {\n      errors.push(`Field ${field} must be a valid date string`);\n    }\n  }\n  \n  // Additional checks for numbers\n  if (typeof value === 'number' && check.type === 'number') {\n    if (check.min !== undefined && value < check.min) {\n      errors.push(`Field ${field} must be at least ${check.min}`);\n    }\n    if (check.max !== undefined && value > check.max) {\n      errors.push(`Field ${field} must be at most ${check.max}`);\n    }\n  }\n}\n\n// Add validation results to context\ndata._validationContext.typeChecking = {\n  passed: errors.length === 0,\n  errors\n};\n\nif (errors.length > 0) {\n  data._validationContext.errors = [...data._validationContext.errors, ...errors];\n}\n\nreturn [{json: data}];"
          }
        },
        {
          "id": "28",
          "name": "Business Rule Validation",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            550
          ],
          "parameters": {
            "functionCode": "// Business rule validation for construction site data\nconst data = items[0].json;\nconst errors = [];\n\n// Get current time for time-based validations\nconst now = new Date();\nconst dataTime = data.timestamp ? new Date(data.timestamp) : null;\n\n// Business rules by data type\nswitch (data.dataType) {\n  case 'safety':\n    // Safety data shouldn't be older than 1 hour\n    if (dataTime && (now - dataTime) > 3600000) {\n      errors.push('Safety data is too old (>1 hour)');\n    }\n    break;\n    \n  case 'progress':\n    // Progress percentage must be consistent with previous reports\n    if (data.completionPercentage < data.previousCompletionPercentage) {\n      errors.push('Progress percentage cannot decrease');\n    }\n    // Daily progress shouldn't exceed 5% for most tasks\n    if (data.previousCompletionPercentage && \n        (data.completionPercentage - data.previousCompletionPercentage) > 5) {\n      errors.push('Daily progress increase seems unusually high');\n    }\n    break;\n    \n  case 'worker':\n    // Worker can't exit without entering first\n    if (data.action === 'exit' && !data.hasEnteredToday) {\n      errors.push('Worker exit recorded without prior entry');\n    }\n    break;\n    \n  case 'material':\n    // Material quantity shouldn't exceed storage capacity\n    if (data.quantity > data.storageCapacity) {\n      errors.push(`Material quantity exceeds storage capacity (${data.storageCapacity})`);\n    }\n    break;\n    \n  case 'crane':\n    // Wind speed safety check\n    if (data.windSpeed > 20) {\n      errors.push('Wind speed exceeds safe crane operation limit');\n    }\n    break;\n}\n\n// Cross-field validations\nif (data.emergencyStatus && !data.emergencyType) {\n  errors.push('Emergency status set but no emergency type specified');\n}\n\nif (data.materialId && data.quantity <= 0) {\n  errors.push('Material quantity must be positive');\n}\n\n// Add validation results to context\ndata._validationContext.businessRules = {\n  passed: errors.length === 0,\n  errors\n};\n\nif (errors.length > 0) {\n  data._validationContext.errors = [...data._validationContext.errors, ...errors];\n}\n\nreturn [{json: data}];"
          }
        },
        {
          "id": "29",
          "name": "Sanitize Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            550
          ],
          "parameters": {
            "functionCode": "// Sanitize data to prevent injection and ensure data quality\nconst data = items[0].json;\n\n// Create a sanitized copy of the data\nconst sanitized = {};\n\n// Helper functions for sanitization\nconst sanitizers = {\n  string: (value, maxLength = 255) => {\n    if (typeof value !== 'string') return value;\n    // Trim whitespace, limit length, and escape HTML\n    let clean = value.trim();\n    if (clean.length > maxLength) {\n      clean = clean.substring(0, maxLength);\n    }\n    // Basic HTML escaping\n    clean = clean\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\"/g, '&quot;')\n      .replace(/'/g, '&#039;');\n    return clean;\n  },\n  number: (value, min = null, max = null) => {\n    // Convert to number and apply bounds\n    const num = Number(value);\n    if (isNaN(num)) return 0;\n    if (min !== null && num < min) return min;\n    if (max !== null && num > max) return max;\n    return num;\n  },\n  boolean: (value) => {\n    // Ensure boolean type\n    return Boolean(value);\n  },\n  date: (value) => {\n    // Ensure valid date string\n    const date = new Date(value);\n    return isNaN(date) ? new Date().toISOString() : date.toISOString();\n  }\n};\n\n// Copy and sanitize each field based on expected type\nfor (const [key, value] of Object.entries(data)) {\n  // Skip internal validation context\n  if (key === '_validationContext') {\n    sanitized[key] = value;\n    continue;\n  }\n  \n  // Apply appropriate sanitizer based on field name or type\n  if (key.includes('Id') || key.includes('Type') || key.includes('Name') || typeof value === 'string') {\n    sanitized[key] = sanitizers.string(value);\n  } else if (key.includes('Percentage') || key.includes('Speed') || key.includes('Quantity') || typeof value === 'number') {\n    sanitized[key] = sanitizers.number(value);\n  } else if (key.includes('Is') || key.includes('Has') || typeof value === 'boolean') {\n    sanitized[key] = sanitizers.boolean(value);\n  } else if (key === 'timestamp' || key.includes('Date') || key.includes('Time')) {\n    sanitized[key] = sanitizers.date(value);\n  } else {\n    // Default: copy as is for unknown types\n    sanitized[key] = value;\n  }\n}\n\n// Add sanitization metadata\nsanitized._validationContext = {\n  ...data._validationContext,\n  sanitized: true,\n  sanitizedAt: new Date().toISOString()\n};\n\nreturn [{json: sanitized}];"
          }
        },
        {
          "id": "30",
          "name": "Validation Decision",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1100,
            550
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json._validationContext.errors.length }}",
                  "operation": "equal",
                  "value2": "0"
                }
              ]
            }
          }
        },
        {
          "id": "31",
          "name": "Format Validation Errors",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            550
          ],
          "parameters": {
            "functionCode": "// Format validation errors for response\nconst data = items[0].json;\nconst errors = data._validationContext.errors || [];\n\n// Create a structured error response\nconst errorResponse = {\n  valid: false,\n  errors: errors,\n  errorCount: errors.length,\n  dataType: data.dataType || 'unknown',\n  timestamp: new Date().toISOString(),\n  originalData: {}\n};\n\n// Copy original data fields (excluding validation context)\nfor (const [key, value] of Object.entries(data)) {\n  if (key !== '_validationContext') {\n    errorResponse.originalData[key] = value;\n  }\n}\n\n// Add error categories for easier debugging\nconst errorCategories = {\n  schema: 0,\n  type: 0,\n  business: 0,\n  other: 0\n};\n\n// Count errors by category\nerrors.forEach(error => {\n  if (error.includes('required field') || error.includes('missing')) {\n    errorCategories.schema++;\n  } else if (error.includes('must be a') || error.includes('type')) {\n    errorCategories.type++;\n  } else {\n    errorCategories.business++;\n  }\n});\n\nerrorResponse.errorCategories = errorCategories;\n\n// Add validation summary\nerrorResponse.validationSummary = {\n  schemaValidation: data._validationContext.schemaValidation?.passed || false,\n  typeChecking: data._validationContext.typeChecking?.passed || false,\n  businessRules: data._validationContext.businessRules?.passed || false,\n  sanitized: data._validationContext.sanitized || false\n};\n\nreturn [{json: errorResponse}];"
          }
        },
        {
          "id": "32",
          "name": "Prepare For Next Section",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            550
          ],
          "parameters": {
            "functionCode": "// Prepare validated data for next processing section\nconst data = items[0].json;\n\n// Remove validation context from output\nconst cleanData = {};\nfor (const [key, value] of Object.entries(data)) {\n  if (key !== '_validationContext') {\n    cleanData[key] = value;\n  }\n}\n\n// Add validation metadata\ncleanData.validated = true;\ncleanData.validatedAt = new Date().toISOString();\n\n// Add validation summary\ncleanData.validationSummary = {\n  passed: true,\n  schemaValidation: data._validationContext.schemaValidation?.passed || false,\n  typeChecking: data._validationContext.typeChecking?.passed || false,\n  businessRules: data._validationContext.businessRules?.passed || false,\n  sanitized: data._validationContext.sanitized || false\n};\n\nreturn [{json: cleanData}];"
          }
        },
        {
          "id": "33",
          "name": "Data Input Preparation",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            700
          ],
          "parameters": {
            "functionCode": "// Prepare incoming data for processing\nconst data = $input.item.json;\n\n// Add metadata and normalize structure\nconst prepared = {\n  ...data,\n  processingStarted: new Date().toISOString(),\n  normalized: true,\n  processingBatch: Math.floor(Math.random() * 1000).toString()\n};\n\nreturn [{json: prepared}];"
          }
        },
        {
          "id": "34",
          "name": "Route By Data Type",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            300,
            700
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{$json.dataType}}",
            "rules": [
              {
                "value2": "safetyData",
                "output": 0
              },
              {
                "value2": "progressData",
                "output": 1
              },
              {
                "value2": "materialData",
                "output": 2
              }
            ],
            "fallbackOutput": 3
          }
        },
        {
          "id": "35",
          "name": "Transform Safety Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            700
          ],
          "parameters": {
            "functionCode": "// Transform safety monitoring data\nconst data = $input.item.json;\n\nconst transformed = {\n  ...data,\n  safetyScore: data.complianceRate ? Math.round(data.complianceRate * 100) : 0,\n  riskLevel: data.incidents > 5 ? 'high' : data.incidents > 2 ? 'medium' : 'low',\n  transformedAt: new Date().toISOString(),\n  dataCategory: 'safety'\n};\n\nreturn [{json: transformed}];"
          }
        },
        {
          "id": "36",
          "name": "Transform Progress Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            700
          ],
          "parameters": {
            "functionCode": "// Transform construction progress data\nconst data = $input.item.json;\n\nconst transformed = {\n  ...data,\n  completionPercentage: data.tasksCompleted / data.totalTasks * 100,\n  onSchedule: data.daysDelayed <= 0,\n  transformedAt: new Date().toISOString(),\n  dataCategory: 'progress'\n};\n\nreturn [{json: transformed}];"
          }
        },
        {
          "id": "37",
          "name": "Transform Material Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            700
          ],
          "parameters": {
            "functionCode": "// Transform material inventory data\nconst data = $input.item.json;\n\nconst transformed = {\n  ...data,\n  stockStatus: data.currentStock < data.minRequired ? 'low' : 'adequate',\n  daysRemaining: Math.floor(data.currentStock / data.dailyUsage),\n  needsOrder: data.currentStock < data.minRequired,\n  transformedAt: new Date().toISOString(),\n  dataCategory: 'material'\n};\n\nreturn [{json: transformed}];"
          }
        },
        {
          "id": "38",
          "name": "Transform Other Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            700
          ],
          "parameters": {
            "functionCode": "// Handle any other data types\nconst data = $input.item.json;\n\nconst transformed = {\n  ...data,\n  processed: true,\n  transformedAt: new Date().toISOString(),\n  dataCategory: 'other'\n};\n\nreturn [{json: transformed}];"
          }
        },
        {
          "id": "39",
          "name": "Merge Transformed Data",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            1300,
            700
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "40",
          "name": "Enrich With Context",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            700
          ],
          "parameters": {
            "functionCode": "// Add contextual information to the data\nconst data = $input.item.json;\n\n// Add site information, weather conditions, etc.\nconst enriched = {\n  ...data,\n  siteLocation: 'Main Construction Site',\n  weatherConditions: 'Sunny',\n  temperature: 75,\n  timestamp: new Date().toISOString(),\n  enriched: true\n};\n\nreturn [{json: enriched}];"
          }
        },
        {
          "id": "41",
          "name": "Check For Batch Processing",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            100,
            850
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{$json.batchProcessing}}",
                  "operation": "equal",
                  "value2": "true"
                }
              ]
            }
          }
        },
        {
          "id": "42",
          "name": "Split Into Batches",
          "type": "n8n-nodes-base.splitInBatches",
          "typeVersion": 1,
          "position": [
            300,
            850
          ],
          "parameters": {
            "batchSize": 10
          }
        },
        {
          "id": "43",
          "name": "Process Each Batch",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            850
          ],
          "parameters": {
            "functionCode": "// Process each batch of data\nconst data = $input.item.json;\n\n// Simulate batch processing\nconst processed = {\n  ...data,\n  batchProcessed: true,\n  batchId: $input.item.json.batchId || Math.floor(Math.random() * 1000),\n  processingTime: Math.floor(Math.random() * 500) + 100\n};\n\nreturn [{json: processed}];"
          }
        },
        {
          "id": "44",
          "name": "Continue Batch?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            700,
            850
          ],
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{$input.item.json.keepGoing}}",
                  "value2": true
                }
              ]
            }
          }
        },
        {
          "id": "45",
          "name": "Aggregate Batch Results",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            850
          ],
          "parameters": {
            "functionCode": "// Aggregate results from batch processing\nconst items = $input.all();\nlet totalItems = 0;\nlet processedItems = 0;\nlet errorItems = 0;\n\nconst categories = {};\n\nitems.forEach(item => {\n  totalItems++;\n  if (item.json.batchProcessed) processedItems++;\n  if (item.json.error) errorItems++;\n  \n  // Count by category\n  const category = item.json.dataCategory || 'unknown';\n  categories[category] = (categories[category] || 0) + 1;\n});\n\nconst result = {\n  batchSummary: true,\n  totalItems,\n  processedItems,\n  errorItems,\n  successRate: totalItems > 0 ? (processedItems / totalItems * 100).toFixed(2) + '%' : '0%',\n  categories,\n  completedAt: new Date().toISOString()\n};\n\nreturn [{json: result}];"
          }
        },
        {
          "id": "46",
          "name": "Skip Batch Processing",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            1100,
            850
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": {
              "string": [
                {
                  "name": "batchProcessing",
                  "value": "false"
                }
              ],
              "boolean": [
                {
                  "name": "skippedBatchProcessing",
                  "value": true
                }
              ]
            }
          }
        },
        {
          "id": "47",
          "name": "Merge Processing Paths",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            1300,
            850
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "48",
          "name": "Calculate Quality Metrics",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            850
          ],
          "parameters": {
            "functionCode": "// Calculate quality metrics based on processed data\nconst data = $input.item.json;\n\n// For batch summary, use the existing data\nif (data.batchSummary) {\n  return [{json: data}];\n}\n\n// For individual items, calculate quality metrics\nlet qualityScore = 0;\n\nif (data.dataCategory === 'safety') {\n  qualityScore = data.safetyScore || 0;\n} else if (data.dataCategory === 'progress') {\n  qualityScore = data.completionPercentage || 0;\n} else if (data.dataCategory === 'material') {\n  qualityScore = data.daysRemaining > 5 ? 100 : data.daysRemaining * 20;\n} else {\n  qualityScore = 50; // Default for unknown categories\n}\n\nconst result = {\n  ...data,\n  qualityScore,\n  qualityLevel: qualityScore >= 80 ? 'high' : qualityScore >= 50 ? 'medium' : 'low',\n  metricsCalculatedAt: new Date().toISOString()\n};\n\nreturn [{json: result}];"
          }
        },
        {
          "id": "49",
          "name": "Check For Issues",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            100,
            1000
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{$json.qualityLevel}}",
            "rules": [
              {
                "value2": "low",
                "output": 0
              },
              {
                "value2": "medium",
                "output": 1
              },
              {
                "value2": "high",
                "output": 2
              }
            ],
            "fallbackOutput": 3
          }
        },
        {
          "id": "50",
          "name": "Create Critical Alert",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            300,
            1000
          ],
          "parameters": {
            "keepOnlySet": false,
            "values": {
              "boolean": [
                {
                  "name": "criticalAlert",
                  "value": true
                }
              ],
              "string": [
                {
                  "name": "alertLevel",
                  "value": "critical"
                },
                {
                  "name": "alertMessage",
                  "value": "=Critical issue detected in {{$json.dataCategory}} with score {{$json.qualityScore}}"
                }
              ]
            }
          }
        },
        {
          "id": "51",
          "name": "Create Warning Alert",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            500,
            1000
          ],
          "parameters": {
            "keepOnlySet": false,
            "values": {
              "boolean": [
                {
                  "name": "warningAlert",
                  "value": true
                }
              ],
              "string": [
                {
                  "name": "alertLevel",
                  "value": "warning"
                },
                {
                  "name": "alertMessage",
                  "value": "=Warning: Potential issue in {{$json.dataCategory}} with score {{$json.qualityScore}}"
                }
              ]
            }
          }
        },
        {
          "id": "52",
          "name": "Create Info Alert",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            700,
            1000
          ],
          "parameters": {
            "keepOnlySet": false,
            "values": {
              "boolean": [
                {
                  "name": "infoAlert",
                  "value": true
                }
              ],
              "string": [
                {
                  "name": "alertLevel",
                  "value": "info"
                },
                {
                  "name": "alertMessage",
                  "value": "=Normal operation in {{$json.dataCategory}} with score {{$json.qualityScore}}"
                }
              ]
            }
          }
        },
        {
          "id": "53",
          "name": "No Alert Needed",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            900,
            1000
          ],
          "parameters": {
            "keepOnlySet": false,
            "values": {
              "boolean": [
                {
                  "name": "noAlert",
                  "value": true
                }
              ],
              "string": [
                {
                  "name": "alertLevel",
                  "value": "none"
                }
              ]
            }
          }
        },
        {
          "id": "54",
          "name": "Merge Alerts",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            1100,
            1000
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "55",
          "name": "Fetch Reference Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1300,
            1000
          ],
          "parameters": {
            "url": "https://api.example.com/construction-reference-data",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "options": {
              "response": {
                "response": {
                  "fullResponse": true
                }
              }
            }
          }
        },
        {
          "id": "56",
          "name": "Handle API Error",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1500,
            1000
          ],
          "parameters": {
            "conditions": {
              "number": [
                {
                  "value1": "={{$json.statusCode}}",
                  "operation": "notEqual",
                  "value2": 200
                }
              ]
            }
          }
        },
        {
          "id": "57",
          "name": "Create Mock Reference Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            1150
          ],
          "parameters": {
            "functionCode": "// Create mock reference data when API fails\nconst data = $input.item.json;\n\nconst mockReferenceData = {\n  safetyStandards: {\n    helmetsRequired: true,\n    safetyVestsRequired: true,\n    minimumSafetyScore: 80\n  },\n  materialStandards: {\n    cementMinStock: 100,\n    steelMinStock: 50,\n    timberMinStock: 200\n  },\n  progressStandards: {\n    expectedDailyProgress: 2.5,\n    tolerableDelay: 3\n  },\n  apiError: true\n};\n\nreturn [{\n  json: {\n    ...data,\n    referenceData: mockReferenceData,\n    referenceSource: 'mock'\n  }\n}];"
          }
        },
        {
          "id": "58",
          "name": "Process Reference Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            1150
          ],
          "parameters": {
            "functionCode": "// Process reference data from API\nconst data = $input.item.json;\n\n// Extract reference data from API response\nconst referenceData = data.body || {};\n\nreturn [{\n  json: {\n    ...data,\n    referenceData,\n    referenceSource: 'api'\n  }\n}];"
          }
        },
        {
          "id": "59",
          "name": "Merge Reference Data",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            500,
            1150
          ],
          "parameters": {
            "mode": "passThrough"
          }
        },
        {
          "id": "60",
          "name": "Finalize Data Processing",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            1150
          ],
          "parameters": {
            "functionCode": "// Final data processing and enrichment\nconst data = $input.item.json;\n\n// Create a comprehensive processed result\nconst finalized = {\n  ...data,\n  processingCompleted: true,\n  finalizedAt: new Date().toISOString(),\n  processingDuration: new Date().getTime() - new Date(data.processingStarted || Date.now()).getTime(),\n  dataReady: true\n};\n\n// Add compliance status based on reference data\nif (data.referenceData && data.dataCategory === 'safety') {\n  const minScore = data.referenceData.safetyStandards?.minimumSafetyScore || 80;\n  finalized.compliant = (data.qualityScore >= minScore);\n  finalized.complianceGap = data.compliant ? 0 : (minScore - data.qualityScore);\n}\n\nreturn [{json: finalized}];"
          }
        },
        {
          "id": "61",
          "name": "Start External Integrations",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            1150
          ],
          "parameters": {
            "functionCode": "// Initialize the external integrations section\nconst data = $input.all();\nreturn [{json: {data: data[0].json, integrationType: 'weather'}}];"
          }
        },
        {
          "id": "62",
          "name": "Route External Integration",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            1100,
            1150
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{$json.integrationType}}",
            "rules": [
              {
                "value2": "weather",
                "output": 0
              },
              {
                "value2": "supplier",
                "output": 1
              },
              {
                "value2": "vibration",
                "output": 2
              }
            ],
            "fallbackOutput": 3
          }
        },
        {
          "id": "63",
          "name": "Weather API Authentication",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1300,
            1150
          ],
          "parameters": {
            "url": "https://api.weather.com/auth",
            "method": "POST",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpBasicAuth",
            "sendBody": true,
            "bodyParameters": {
              "parameters": [
                {
                  "name": "apiKey",
                  "value": "={{$env.WEATHER_API_KEY}}"
                }
              ]
            },
            "options": {
              "timeout": 5000
            }
          }
        },
        {
          "id": "64",
          "name": "Fetch Weather Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1500,
            1150
          ],
          "parameters": {
            "url": "https://api.weather.com/v1/forecast",
            "method": "GET",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendQuery": true,
            "queryParameters": {
              "parameters": [
                {
                  "name": "lat",
                  "value": "={{$json.siteLocation.latitude}}"
                },
                {
                  "name": "lon",
                  "value": "={{$json.siteLocation.longitude}}"
                }
              ]
            },
            "options": {
              "timeout": 5000
            }
          }
        },
        {
          "id": "65",
          "name": "Validate Weather Response",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            100,
            1300
          ],
          "parameters": {
            "type": "boolean",
            "value1": "={{$json.hasOwnProperty('error') || $json.status >= 400}}",
            "value2": "true"
          }
        },
        {
          "id": "66",
          "name": "Wait Before Retry",
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1,
          "position": [
            300,
            1300
          ],
          "parameters": {
            "amount": 5,
            "unit": "seconds"
          }
        },
        {
          "id": "67",
          "name": "Map Weather Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            1300
          ],
          "parameters": {
            "functionCode": "// Map weather data to standardized format\nconst weatherData = $input.item;\n\nconst mappedData = {\n  temperature: weatherData.json.current.temperature,\n  windSpeed: weatherData.json.current.windSpeed,\n  precipitation: weatherData.json.current.precipitation,\n  forecast: weatherData.json.forecast.map(day => ({\n    date: day.date,\n    temperature: day.temperature,\n    conditions: day.conditions\n  })),\n  suitableForConcrete: weatherData.json.current.temperature > 5 && \n                       weatherData.json.current.precipitation < 5\n};\n\nreturn [{json: mappedData}];"
          }
        },
        {
          "id": "68",
          "name": "Supplier API Authentication",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            700,
            1300
          ],
          "parameters": {
            "url": "https://api.constructionsupplier.com/auth",
            "method": "POST",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpBasicAuth",
            "sendBody": true,
            "bodyParameters": {
              "parameters": [
                {
                  "name": "apiKey",
                  "value": "={{$env.SUPPLIER_API_KEY}}"
                }
              ]
            },
            "options": {
              "timeout": 5000
            }
          }
        },
        {
          "id": "69",
          "name": "Fetch Supplier Inventory",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            900,
            1300
          ],
          "parameters": {
            "url": "https://api.constructionsupplier.com/v1/inventory",
            "method": "GET",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendQuery": true,
            "queryParameters": {
              "parameters": [
                {
                  "name": "projectId",
                  "value": "={{$json.projectId}}"
                },
                {
                  "name": "materialTypes",
                  "value": "={{JSON.stringify($json.requiredMaterials)}}"
                }
              ]
            },
            "options": {
              "timeout": 5000
            }
          }
        },
        {
          "id": "70",
          "name": "Validate Supplier Response",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1100,
            1300
          ],
          "parameters": {
            "type": "boolean",
            "value1": "={{$json.hasOwnProperty('error') || $json.status >= 400}}",
            "value2": "true"
          }
        },
        {
          "id": "71",
          "name": "Wait Before Supplier Retry",
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1,
          "position": [
            1300,
            1300
          ],
          "parameters": {
            "amount": 5,
            "unit": "seconds"
          }
        },
        {
          "id": "72",
          "name": "Map Supplier Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            1300
          ],
          "parameters": {
            "functionCode": "// Map supplier data to standardized format\nconst supplierData = $input.item;\n\nconst mappedData = {\n  availableMaterials: supplierData.json.inventory.map(item => ({\n    materialId: item.id,\n    name: item.name,\n    quantity: item.availableQuantity,\n    unitPrice: item.unitPrice,\n    deliveryTime: item.estimatedDeliveryDays\n  })),\n  stockStatus: supplierData.json.inventory.map(item => ({\n    materialId: item.id,\n    name: item.name,\n    inStock: item.availableQuantity > 0,\n    belowThreshold: item.availableQuantity < item.reorderThreshold\n  })),\n  jitOrderingAvailable: supplierData.json.jitAvailable\n};\n\nreturn [{json: mappedData}];"
          }
        },
        {
          "id": "73",
          "name": "Vibration API Authentication",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            100,
            1450
          ],
          "parameters": {
            "url": "https://api.vibrationmonitoring.com/auth",
            "method": "POST",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpBasicAuth",
            "sendBody": true,
            "bodyParameters": {
              "parameters": [
                {
                  "name": "apiKey",
                  "value": "={{$env.VIBRATION_API_KEY}}"
                }
              ]
            },
            "options": {
              "timeout": 5000
            }
          }
        },
        {
          "id": "74",
          "name": "Fetch Vibration Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            300,
            1450
          ],
          "parameters": {
            "url": "https://api.vibrationmonitoring.com/v1/sensors/data",
            "method": "GET",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendQuery": true,
            "queryParameters": {
              "parameters": [
                {
                  "name": "siteId",
                  "value": "={{$json.siteId}}"
                },
                {
                  "name": "timeframe",
                  "value": "last24h"
                }
              ]
            },
            "options": {
              "timeout": 5000
            }
          }
        },
        {
          "id": "75",
          "name": "Validate Vibration Response",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            500,
            1450
          ],
          "parameters": {
            "type": "boolean",
            "value1": "={{$json.hasOwnProperty('error') || $json.status >= 400}}",
            "value2": "true"
          }
        },
        {
          "id": "76",
          "name": "Wait Before Vibration Retry",
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1,
          "position": [
            700,
            1450
          ],
          "parameters": {
            "amount": 5,
            "unit": "seconds"
          }
        },
        {
          "id": "77",
          "name": "Map Vibration Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            1450
          ],
          "parameters": {
            "functionCode": "// Map vibration data to standardized format\nconst vibrationData = $input.item;\n\nconst mappedData = {\n  sensors: vibrationData.json.sensors.map(sensor => ({\n    sensorId: sensor.id,\n    location: sensor.location,\n    currentLevel: sensor.currentLevel,\n    maxLevel: sensor.maxLevel,\n    averageLevel: sensor.averageLevel,\n    timestamp: sensor.lastUpdated\n  })),\n  exceededThreshold: vibrationData.json.sensors.some(s => s.currentLevel > s.threshold),\n  neighboringBuildingsAffected: vibrationData.json.neighboringBuildingsAffected,\n  recommendedAction: vibrationData.json.recommendedAction\n};\n\nreturn [{json: mappedData}];"
          }
        },
        {
          "id": "78",
          "name": "Handle Unknown Integration",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            1450
          ],
          "parameters": {
            "functionCode": "// Handle unknown integration type\nconst data = $input.item;\n\nreturn [{\n  json: {\n    error: true,\n    message: `Unknown integration type: ${data.json.integrationType}`,\n    originalData: data.json\n  }\n}];"
          }
        },
        {
          "id": "79",
          "name": "Combine External Data",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            1300,
            1450
          ],
          "parameters": {
            "mode": "mergeByPosition"
          }
        },
        {
          "id": "80",
          "name": "Classify Construction Error",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            1450
          ],
          "parameters": {
            "functionCode": "// Classify the error based on its characteristics\nconst error = $input.all()[0].json.error || {};\nconst errorType = error.message || 'Unknown error';\nlet severity, category, recoverable;\n\n// Classify error severity\nif (errorType.includes('safety') || errorType.includes('emergency') || errorType.includes('critical')) {\n  severity = 'critical';\n} else if (errorType.includes('warning') || errorType.includes('delay')) {\n  severity = 'warning';\n} else {\n  severity = 'info';\n}\n\n// Classify error category\nif (errorType.includes('sensor') || errorType.includes('camera') || errorType.includes('device')) {\n  category = 'hardware';\n} else if (errorType.includes('api') || errorType.includes('connection') || errorType.includes('timeout')) {\n  category = 'connectivity';\n} else if (errorType.includes('validation') || errorType.includes('format')) {\n  category = 'data';\n} else {\n  category = 'system';\n}\n\n// Determine if error is recoverable\nrecoverable = !errorType.includes('fatal') && !errorType.includes('critical shutdown');\n\nreturn [{\n  json: {\n    error,\n    classification: {\n      severity,\n      category,\n      recoverable,\n      timestamp: new Date().toISOString(),\n      errorId: `ERR-${Date.now()}-${Math.floor(Math.random() * 1000)}`\n    }\n  }\n}];"
          }
        },
        {
          "id": "81",
          "name": "Determine Recovery Strategy",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            100,
            1600
          ],
          "parameters": {
            "rules": {
              "rules": [
                {
                  "conditions": [
                    {
                      "id": "1",
                      "name": "Recoverable & Not Critical",
                      "value1": "={{$json.classification.recoverable}}",
                      "value2": true,
                      "operation": "equal"
                    },
                    {
                      "id": "2",
                      "name": "Not Critical",
                      "value1": "={{$json.classification.severity}}",
                      "value2": "critical",
                      "operation": "notEqual"
                    }
                  ],
                  "combinator": "and",
                  "output": 0
                },
                {
                  "conditions": [
                    {
                      "id": "3",
                      "name": "Hardware Error",
                      "value1": "={{$json.classification.category}}",
                      "value2": "hardware",
                      "operation": "equal"
                    }
                  ],
                  "output": 1
                },
                {
                  "conditions": [
                    {
                      "id": "4",
                      "name": "Connectivity Error",
                      "value1": "={{$json.classification.category}}",
                      "value2": "connectivity",
                      "operation": "equal"
                    }
                  ],
                  "output": 2
                }
              ]
            },
            "fallbackOutput": 3
          }
        },
        {
          "id": "82",
          "name": "Execute Fallback Processing",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            1600
          ],
          "parameters": {
            "functionCode": "// Implement recovery strategies based on error classification\nconst error = $input.all()[0].json;\nconst { classification } = error;\nlet recoveryAction, fallbackData;\n\nswitch (classification.category) {\n  case 'hardware':\n    recoveryAction = 'switch_to_backup_system';\n    fallbackData = { useBackupSensors: true, notifyMaintenance: true };\n    break;\n  case 'connectivity':\n    recoveryAction = 'retry_with_exponential_backoff';\n    fallbackData = { maxRetries: 3, initialDelay: 1000 };\n    break;\n  case 'data':\n    recoveryAction = 'use_cached_data';\n    fallbackData = { useCachedData: true, cacheValidityMinutes: 60 };\n    break;\n  default:\n    recoveryAction = 'manual_intervention';\n    fallbackData = { requiresHumanReview: true };\n}\n\n// If critical safety error, override with emergency protocol\nif (classification.severity === 'critical') {\n  recoveryAction = 'emergency_protocol';\n  fallbackData = { \n    evacuateSite: classification.category === 'hardware',\n    shutdownEquipment: true,\n    notifyEmergencyContacts: true\n  };\n}\n\nreturn [{\n  json: {\n    ...error,\n    recovery: {\n      action: recoveryAction,\n      fallbackData,\n      recoveryTimestamp: new Date().toISOString(),\n      recoveryId: `REC-${Date.now()}`\n    }\n  }\n}];"
          }
        },
        {
          "id": "83",
          "name": "Log Error Details",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            1600
          ],
          "parameters": {
            "functionCode": "// Log error details for auditing and troubleshooting\nconst errorData = $input.all()[0].json;\nconst { error, classification, recovery } = errorData;\n\n// Format log entry\nconst logEntry = {\n  timestamp: new Date().toISOString(),\n  errorId: classification.errorId,\n  severity: classification.severity,\n  category: classification.category,\n  message: error.message || 'Unknown error',\n  details: error.stack || error.details || {},\n  recoveryAction: recovery.action,\n  recoveryId: recovery.recoveryId,\n  source: error.source || 'construction_monitoring',\n  affectedSystem: error.system || 'unknown',\n  contextData: {\n    constructionSite: error.siteId || 'unknown',\n    component: error.component || 'unknown',\n    operationType: error.operation || 'unknown'\n  }\n};\n\n// In a real implementation, this would write to a database or logging service\nconsole.log('ERROR LOG:', JSON.stringify(logEntry, null, 2));\n\n// Simulate writing to database\nreturn [{\n  json: {\n    ...errorData,\n    logging: {\n      status: 'success',\n      logId: `LOG-${Date.now()}`,\n      logEntry\n    }\n  }\n}];"
          }
        },
        {
          "id": "84",
          "name": "Notify Administrators",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            700,
            1600
          ],
          "parameters": {
            "fromEmail": "={{$json.error.system}}@constructionmonitoring.com",
            "toEmail": "={{$json.classification.severity === 'critical' ? 'emergency@constructionmonitoring.com,site-manager@constructionmonitoring.com' : 'support@constructionmonitoring.com'}}",
            "subject": "={{$json.classification.severity === 'critical' ? '🚨 CRITICAL ERROR: ' + $json.error.message : 'Error in Construction Monitoring: ' + $json.error.message}}",
            "text": "=Error Details:\n\nError ID: {{$json.classification.errorId}}\nTimestamp: {{$json.classification.timestamp}}\nSeverity: {{$json.classification.severity}}\nCategory: {{$json.classification.category}}\nRecoverable: {{$json.classification.recoverable}}\n\nError Message: {{$json.error.message}}\n\nRecovery Action: {{$json.recovery.action}}\nRecovery ID: {{$json.recovery.recoveryId}}\n\nAffected System: {{$json.error.system || 'Unknown'}}\nConstruction Site: {{$json.error.siteId || 'Unknown'}}\n\nLog ID: {{$json.logging.logId}}\n\nPlease check the monitoring system for more details.",
            "options": {
              "ccEmail": "={{$json.classification.severity === 'critical' ? 'safety-team@constructionmonitoring.com' : ''}}",
              "priority": "={{$json.classification.severity === 'critical' ? 'high' : 'normal'}}",
              "attachments": []
            }
          }
        },
        {
          "id": "85",
          "name": "Collect Activity & Metrics",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            1600
          ],
          "parameters": {
            "functionCode": "// Get input data\nconst inputData = $input.all();\n\n// Create activity log\nconst activityLog = {\n  timestamp: new Date().toISOString(),\n  operation: inputData[0].json.operation || 'unknown',\n  status: inputData[0].json.status || 'completed',\n  duration: inputData[0].json.duration || 0,\n  user: inputData[0].json.user || 'system',\n  details: inputData[0].json.details || {}\n};\n\n// Create performance metrics\nconst performanceMetrics = {\n  executionTime: inputData[0].json.duration || 0,\n  resourceUsage: inputData[0].json.resourceUsage || {\n    cpu: Math.random() * 100,\n    memory: Math.random() * 1024\n  },\n  timestamp: new Date().toISOString()\n};\n\nreturn [{\n  json: {\n    activityLog,\n    performanceMetrics,\n    originalData: inputData[0].json\n  }\n}];"
          }
        },
        {
          "id": "86",
          "name": "Check For Critical Events",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1100,
            1600
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.activityLog.status }}",
                  "operation": "contains",
                  "value2": "error"
                }
              ],
              "or": [
                {
                  "value1": "={{ $json.performanceMetrics.executionTime }}",
                  "operation": "larger",
                  "value2": 5000
                }
              ]
            }
          }
        },
        {
          "id": "87",
          "name": "Create Critical Audit Trail",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            1600
          ],
          "parameters": {
            "functionCode": "// Create detailed audit trail for critical events\nconst inputData = $input.item;\n\nconst criticalAuditTrail = {\n  id: `audit-${Date.now()}`,\n  severity: 'critical',\n  timestamp: new Date().toISOString(),\n  operation: inputData.activityLog.operation,\n  status: inputData.activityLog.status,\n  details: inputData.activityLog.details,\n  user: inputData.activityLog.user,\n  performanceIssue: inputData.performanceMetrics.executionTime > 5000,\n  metrics: inputData.performanceMetrics,\n  alertSent: true,\n  retentionPeriod: '90days'\n};\n\nreturn [{\n  json: {\n    auditTrail: criticalAuditTrail,\n    originalData: inputData.originalData,\n    activityLog: inputData.activityLog,\n    performanceMetrics: inputData.performanceMetrics,\n    isCritical: true\n  }\n}];"
          }
        },
        {
          "id": "88",
          "name": "Create Standard Audit Trail",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            1600
          ],
          "parameters": {
            "functionCode": "// Create standard audit trail for normal events\nconst inputData = $input.item;\n\nconst standardAuditTrail = {\n  id: `audit-${Date.now()}`,\n  severity: 'normal',\n  timestamp: new Date().toISOString(),\n  operation: inputData.activityLog.operation,\n  status: inputData.activityLog.status,\n  details: inputData.activityLog.details,\n  user: inputData.activityLog.user,\n  metrics: inputData.performanceMetrics,\n  alertSent: false,\n  retentionPeriod: '30days'\n};\n\nreturn [{\n  json: {\n    auditTrail: standardAuditTrail,\n    originalData: inputData.originalData,\n    activityLog: inputData.activityLog,\n    performanceMetrics: inputData.performanceMetrics,\n    isCritical: false\n  }\n}];"
          }
        },
        {
          "id": "89",
          "name": "Merge Monitoring Data",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            100,
            1750
          ],
          "parameters": {
            "mode": "mergeByPosition"
          }
        }
      ],
      "connections": {
        "Main Trigger": {
          "main": [
            [
              {
                "node": "Route By Task Type",
                "type": "main",
                "index": 0
              },
              {
                "node": "Route By Task Type",
                "type": "main",
                "index": 0
              },
              {
                "node": "Route By Task Type",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Route By Task Type": {
          "main": [
            [
              {
                "node": "Process Safety Monitoring",
                "type": "main",
                "index": 0
              },
              {
                "node": "Process Construction Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Safety Monitoring": {
          "main": [
            [
              {
                "node": "Process Progress Monitoring",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Progress Monitoring": {
          "main": [
            [
              {
                "node": "Process Emergency Protocol",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Emergency Protocol": {
          "main": [
            [
              {
                "node": "Process Weather Monitoring",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Weather Monitoring": {
          "main": [
            [
              {
                "node": "Process Inventory Management",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Inventory Management": {
          "main": [
            [
              {
                "node": "Handle Unknown Task Type",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge All Results": {
          "main": [
            [
              {
                "node": "Check For Alerts",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check For Alerts": {
          "main": [
            [
              {
                "node": "Send Alert Notification",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Alert Notification": {
          "main": [
            [
              {
                "node": "Prepare Response",
                "type": "main",
                "index": 0
              },
              {
                "node": "Prepare Response",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Prepare Response": {
          "main": [
            [
              {
                "node": "Merge Responses",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Responses": {
          "main": [
            [
              {
                "node": "Respond To Webhook",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Main Webhook Trigger": {
          "main": [
            [
              {
                "node": "Route By Task Type",
                "type": "main",
                "index": 0
              },
              {
                "node": "Validate Input Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Respond To Webhook": {
          "main": [
            [
              {
                "node": "Main Webhook Trigger",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Construction Data": {
          "main": [
            [
              {
                "node": "Merge All Branches",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge All Branches": {
          "main": [
            [
              {
                "node": "Check For Critical Issues",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check For Critical Issues": {
          "main": [
            [
              {
                "node": "Send Critical Alert",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Prepare Data for Validation": {
          "main": [
            [
              {
                "node": "Schema Validation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Schema Validation": {
          "main": [
            [
              {
                "node": "Type Checking",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Type Checking": {
          "main": [
            [
              {
                "node": "Business Rule Validation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Business Rule Validation": {
          "main": [
            [
              {
                "node": "Sanitize Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Sanitize Data": {
          "main": [
            [
              {
                "node": "Validation Decision",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validation Decision": {
          "main": [
            [
              {
                "node": "Format Validation Errors",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Validation Errors": {
          "main": [
            [
              {
                "node": "Prepare For Next Section",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Data Input Preparation": {
          "main": [
            [
              {
                "node": "Route By Data Type",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Route By Data Type": {
          "main": [
            [
              {
                "node": "Transform Safety Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Transform Safety Data": {
          "main": [
            [
              {
                "node": "Transform Progress Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Transform Progress Data": {
          "main": [
            [
              {
                "node": "Transform Material Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Transform Material Data": {
          "main": [
            [
              {
                "node": "Transform Other Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Transform Other Data": {
          "main": [
            [
              {
                "node": "Merge Transformed Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Transformed Data": {
          "main": [
            [
              {
                "node": "Enrich With Context",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check For Batch Processing": {
          "main": [
            [
              {
                "node": "Split Into Batches",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Split Into Batches": {
          "main": [
            [
              {
                "node": "Process Each Batch",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Each Batch": {
          "main": [
            [
              {
                "node": "Continue Batch?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Continue Batch?": {
          "main": [
            [
              {
                "node": "Aggregate Batch Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Aggregate Batch Results": {
          "main": [
            [
              {
                "node": "Skip Batch Processing",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Skip Batch Processing": {
          "main": [
            [
              {
                "node": "Merge Processing Paths",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Processing Paths": {
          "main": [
            [
              {
                "node": "Calculate Quality Metrics",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check For Issues": {
          "main": [
            [
              {
                "node": "Create Critical Alert",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create Critical Alert": {
          "main": [
            [
              {
                "node": "Create Warning Alert",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create Warning Alert": {
          "main": [
            [
              {
                "node": "Create Info Alert",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create Info Alert": {
          "main": [
            [
              {
                "node": "No Alert Needed",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "No Alert Needed": {
          "main": [
            [
              {
                "node": "Merge Alerts",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Alerts": {
          "main": [
            [
              {
                "node": "Fetch Reference Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Reference Data": {
          "main": [
            [
              {
                "node": "Handle API Error",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create Mock Reference Data": {
          "main": [
            [
              {
                "node": "Process Reference Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Reference Data": {
          "main": [
            [
              {
                "node": "Merge Reference Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Reference Data": {
          "main": [
            [
              {
                "node": "Finalize Data Processing",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Finalize Data Processing": {
          "main": [
            [
              {
                "node": "Start External Integrations",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Start External Integrations": {
          "main": [
            [
              {
                "node": "Route External Integration",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Route External Integration": {
          "main": [
            [
              {
                "node": "Weather API Authentication",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Weather API Authentication": {
          "main": [
            [
              {
                "node": "Fetch Weather Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate Weather Response": {
          "main": [
            [
              {
                "node": "Wait Before Retry",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wait Before Retry": {
          "main": [
            [
              {
                "node": "Map Weather Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Map Weather Data": {
          "main": [
            [
              {
                "node": "Supplier API Authentication",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Supplier API Authentication": {
          "main": [
            [
              {
                "node": "Fetch Supplier Inventory",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Supplier Inventory": {
          "main": [
            [
              {
                "node": "Validate Supplier Response",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate Supplier Response": {
          "main": [
            [
              {
                "node": "Wait Before Supplier Retry",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wait Before Supplier Retry": {
          "main": [
            [
              {
                "node": "Map Supplier Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Vibration API Authentication": {
          "main": [
            [
              {
                "node": "Fetch Vibration Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Vibration Data": {
          "main": [
            [
              {
                "node": "Validate Vibration Response",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate Vibration Response": {
          "main": [
            [
              {
                "node": "Wait Before Vibration Retry",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wait Before Vibration Retry": {
          "main": [
            [
              {
                "node": "Map Vibration Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Map Vibration Data": {
          "main": [
            [
              {
                "node": "Handle Unknown Integration",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Handle Unknown Integration": {
          "main": [
            [
              {
                "node": "Combine External Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Combine External Data": {
          "main": [
            [
              {
                "node": "Classify Construction Error",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Determine Recovery Strategy": {
          "main": [
            [
              {
                "node": "Execute Fallback Processing",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Execute Fallback Processing": {
          "main": [
            [
              {
                "node": "Log Error Details",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Log Error Details": {
          "main": [
            [
              {
                "node": "Notify Administrators",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Notify Administrators": {
          "main": [
            [
              {
                "node": "Collect Activity & Metrics",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Collect Activity & Metrics": {
          "main": [
            [
              {
                "node": "Check For Critical Events",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check For Critical Events": {
          "main": [
            [
              {
                "node": "Create Critical Audit Trail",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create Critical Audit Trail": {
          "main": [
            [
              {
                "node": "Create Standard Audit Trail",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {},
      "active": false
    },
    "provider": "anthropic",
    "model": "claude-3-7-sonnet-20250219",
    "timestamp": "2025-07-23T02:50:29.481Z",
    "nodeCount": 89,
    "connectionCount": 78
  },
  {
    "id": "abb09784-ab65-422a-a6ee-d308a2b80acb",
    "prompt": "Construction Site Safety and Progress Monitoring\n\n360° management for large construction projects:\n\n- Helmet and seat belt monitoring with cameras\n- Daily worker entry and exit and timekeeping\n- Weekly progress photography with drones\n- Weather monitoring during concrete pouring\n- Tower crane wind sensors and automatic shutdown\n- Material stock tracking and JIT ordering\n- Emergency protocol in case of workplace accidents\n- Night security patrol route tracking\n- Neighboring building vibration sensor monitoring\n- Contractor progress payment photo documentation",
    "workflow": {
      "name": "Construction Site Safety and Progress Monitoring98",
      "nodes": [
        {
          "id": "1",
          "name": "Main Data Intake Webhook",
          "type": "n8n-nodes-base.webhook",
          "typeVersion": 1,
          "position": [
            240,
            400
          ],
          "parameters": {
            "httpMethod": "POST",
            "options": {},
            "path": "construction-site-data"
          },
          "webhookId": "construction-site-monitoring"
        },
        {
          "id": "2",
          "name": "Is Safety Monitoring?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            480,
            400
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.dataType }}",
                  "operation": "equal",
                  "value2": "safety_monitoring"
                }
              ]
            }
          }
        },
        {
          "id": "3",
          "name": "Is Progress Tracking?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            480,
            600
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.dataType }}",
                  "operation": "equal",
                  "value2": "progress_tracking"
                }
              ]
            }
          }
        },
        {
          "id": "4",
          "name": "Is Environmental Monitoring?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            480,
            800
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.dataType }}",
                  "operation": "equal",
                  "value2": "environmental_monitoring"
                }
              ]
            }
          }
        },
        {
          "id": "5",
          "name": "Is Resource Management?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            480,
            1000
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.dataType }}",
                  "operation": "equal",
                  "value2": "resource_management"
                }
              ]
            }
          }
        },
        {
          "id": "6",
          "name": "Is Emergency Protocol?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            480,
            1200
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.dataType }}",
                  "operation": "equal",
                  "value2": "emergency_protocol"
                }
              ]
            }
          }
        },
        {
          "id": "7",
          "name": "Is Helmet Monitoring?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            700,
            300
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.safetyType }}",
                  "operation": "equal",
                  "value2": "helmet_monitoring"
                }
              ]
            }
          }
        },
        {
          "id": "8",
          "name": "Is Seatbelt Monitoring?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            700,
            400
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.safetyType }}",
                  "operation": "equal",
                  "value2": "seatbelt_monitoring"
                }
              ]
            }
          }
        },
        {
          "id": "9",
          "name": "Is Worker Tracking?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            700,
            500
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.safetyType }}",
                  "operation": "equal",
                  "value2": "worker_tracking"
                }
              ]
            }
          }
        },
        {
          "id": "10",
          "name": "Process Helmet Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            300
          ],
          "parameters": {
            "functionCode": "// Process helmet monitoring data from camera system\nconst helmetData = $input.item.json;\n\n// Analyze if workers are wearing helmets\nconst workersWithoutHelmets = helmetData.detections.filter(worker => !worker.wearing_helmet);\n\n// Create safety violation records if needed\nif (workersWithoutHelmets.length > 0) {\n  return {\n    safetyViolation: true,\n    violationType: 'missing_helmet',\n    violationCount: workersWithoutHelmets.length,\n    timestamp: new Date().toISOString(),\n    locationZone: helmetData.zone,\n    detections: workersWithoutHelmets,\n    imageUrl: helmetData.imageUrl\n  };\n} else {\n  return {\n    safetyViolation: false,\n    checkType: 'helmet_monitoring',\n    timestamp: new Date().toISOString(),\n    locationZone: helmetData.zone\n  };\n}"
          }
        },
        {
          "id": "11",
          "name": "Process Seatbelt Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            400
          ],
          "parameters": {
            "functionCode": "// Process seatbelt monitoring data from camera system\nconst seatbeltData = $input.item.json;\n\n// Analyze if equipment operators are wearing seatbelts\nconst operatorsWithoutSeatbelts = seatbeltData.detections.filter(operator => !operator.wearing_seatbelt);\n\n// Create safety violation records if needed\nif (operatorsWithoutSeatbelts.length > 0) {\n  return {\n    safetyViolation: true,\n    violationType: 'missing_seatbelt',\n    violationCount: operatorsWithoutSeatbelts.length,\n    timestamp: new Date().toISOString(),\n    equipmentType: seatbeltData.equipmentType,\n    equipmentId: seatbeltData.equipmentId,\n    operators: operatorsWithoutSeatbelts,\n    imageUrl: seatbeltData.imageUrl\n  };\n} else {\n  return {\n    safetyViolation: false,\n    checkType: 'seatbelt_monitoring',\n    timestamp: new Date().toISOString(),\n    equipmentType: seatbeltData.equipmentType,\n    equipmentId: seatbeltData.equipmentId\n  };\n}"
          }
        },
        {
          "id": "12",
          "name": "Process Worker Tracking",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            500
          ],
          "parameters": {
            "functionCode": "// Process worker entry/exit and timekeeping data\nconst workerData = $input.item.json;\n\n// Determine if this is an entry or exit event\nconst isEntry = workerData.eventType === 'entry';\n\n// Calculate hours if this is an exit event and we have entry time\nlet hoursWorked = null;\nif (!isEntry && workerData.entryTime) {\n  const entryTime = new Date(workerData.entryTime).getTime();\n  const exitTime = new Date(workerData.timestamp).getTime();\n  hoursWorked = (exitTime - entryTime) / (1000 * 60 * 60); // Convert ms to hours\n}\n\nreturn {\n  workerId: workerData.workerId,\n  workerName: workerData.workerName,\n  eventType: workerData.eventType,\n  timestamp: workerData.timestamp,\n  locationZone: workerData.zone,\n  hoursWorked: hoursWorked,\n  projectId: workerData.projectId\n};"
          }
        },
        {
          "id": "13",
          "name": "Is Safety Violation?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1100,
            300
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.safetyViolation }}",
                  "operation": "equal",
                  "value2": "true"
                }
              ]
            }
          }
        },
        {
          "id": "14",
          "name": "Is Seatbelt Violation?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1100,
            400
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.safetyViolation }}",
                  "operation": "equal",
                  "value2": "true"
                }
              ]
            }
          }
        },
        {
          "id": "15",
          "name": "Record Helmet Violation",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1300,
            250
          ],
          "parameters": {
            "method": "POST",
            "options": {
              "redirect": {
                "redirect": {
                  "followRedirects": true
                }
              }
            },
            "url": "=https://api.construction-safety.example.com/violations",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"violationType\",\"value\":\"={{ $json.violationType }}\"},{\"name\":\"timestamp\",\"value\":\"={{ $json.timestamp }}\"},{\"name\":\"locationZone\",\"value\":\"={{ $json.locationZone }}\"},{\"name\":\"imageUrl\",\"value\":\"={{ $json.imageUrl }}\"},{\"name\":\"detections\",\"value\":\"={{ JSON.stringify($json.detections) }}\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "16",
          "name": "Record Seatbelt Violation",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1300,
            350
          ],
          "parameters": {
            "method": "POST",
            "options": {
              "redirect": {
                "redirect": {
                  "followRedirects": true
                }
              }
            },
            "url": "=https://api.construction-safety.example.com/violations",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"violationType\",\"value\":\"={{ $json.violationType }}\"},{\"name\":\"timestamp\",\"value\":\"={{ $json.timestamp }}\"},{\"name\":\"equipmentType\",\"value\":\"={{ $json.equipmentType }}\"},{\"name\":\"equipmentId\",\"value\":\"={{ $json.equipmentId }}\"},{\"name\":\"imageUrl\",\"value\":\"={{ $json.imageUrl }}\"},{\"name\":\"operators\",\"value\":\"={{ JSON.stringify($json.operators) }}\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "17",
          "name": "Send Helmet Violation Alert",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            1500,
            250
          ],
          "parameters": {
            "options": {},
            "to": "safety@construction-company.example",
            "subject": "=Safety Violation Alert: {{ $json.violationType }}",
            "text": "=A safety violation has been detected:\n\nType: {{ $json.violationType }}\nLocation: {{ $json.locationZone }}\nTime: {{ $json.timestamp }}\nViolation Count: {{ $json.violationCount }}\n\nPlease check the safety monitoring system for details and image evidence.\n\nThis is an automated alert."
          }
        },
        {
          "id": "18",
          "name": "Send Seatbelt Violation Alert",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            1500,
            350
          ],
          "parameters": {
            "options": {},
            "to": "safety@construction-company.example",
            "subject": "=Safety Violation Alert: {{ $json.violationType }}",
            "text": "=A safety violation has been detected:\n\nType: {{ $json.violationType }}\nEquipment: {{ $json.equipmentType }} (ID: {{ $json.equipmentId }})\nTime: {{ $json.timestamp }}\nViolation Count: {{ $json.violationCount }}\n\nPlease check the safety monitoring system for details and image evidence.\n\nThis is an automated alert."
          }
        },
        {
          "id": "19",
          "name": "Record Compliant Helmet Check",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1300,
            450
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "=https://api.construction-safety.example.com/safety-checks",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"checkType\",\"value\":\"={{ $json.checkType }}\"},{\"name\":\"timestamp\",\"value\":\"={{ $json.timestamp }}\"},{\"name\":\"locationZone\",\"value\":\"={{ $json.locationZone }}\"},{\"name\":\"status\",\"value\":\"compliant\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "20",
          "name": "Record Compliant Seatbelt Check",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1300,
            550
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "=https://api.construction-safety.example.com/safety-checks",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"checkType\",\"value\":\"={{ $json.checkType }}\"},{\"name\":\"timestamp\",\"value\":\"={{ $json.timestamp }}\"},{\"name\":\"equipmentType\",\"value\":\"={{ $json.equipmentType }}\"},{\"name\":\"equipmentId\",\"value\":\"={{ $json.equipmentId }}\"},{\"name\":\"status\",\"value\":\"compliant\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "21",
          "name": "Record Worker Entry/Exit",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1100,
            500
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "=https://api.construction-site.example.com/worker-tracking",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"workerId\",\"value\":\"={{ $json.workerId }}\"},{\"name\":\"workerName\",\"value\":\"={{ $json.workerName }}\"},{\"name\":\"eventType\",\"value\":\"={{ $json.eventType }}\"},{\"name\":\"timestamp\",\"value\":\"={{ $json.timestamp }}\"},{\"name\":\"locationZone\",\"value\":\"={{ $json.locationZone }}\"},{\"name\":\"projectId\",\"value\":\"={{ $json.projectId }}\"},{\"name\":\"hoursWorked\",\"value\":\"={{ $json.hoursWorked }}\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "22",
          "name": "Is Drone Photography?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            700,
            600
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.progressType }}",
                  "operation": "equal",
                  "value2": "drone_photography"
                }
              ]
            }
          }
        },
        {
          "id": "23",
          "name": "Is Payment Documentation?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            700,
            700
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.progressType }}",
                  "operation": "equal",
                  "value2": "payment_documentation"
                }
              ]
            }
          }
        },
        {
          "id": "24",
          "name": "Process Drone Photography",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            600
          ],
          "parameters": {
            "functionCode": "// Process drone photography data\nconst droneData = $input.item.json;\n\n// Extract relevant information and organize data\nreturn {\n  captureDate: droneData.timestamp,\n  projectId: droneData.projectId,\n  droneId: droneData.droneId,\n  flightPath: droneData.flightPath,\n  imageUrls: droneData.images,\n  coveragePercentage: droneData.coveragePercentage,\n  weatherConditions: droneData.weatherConditions,\n  notes: droneData.notes || '',\n  operator: droneData.operator,\n  weekNumber: droneData.weekNumber\n};"
          }
        },
        {
          "id": "25",
          "name": "Process Payment Documentation",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            700
          ],
          "parameters": {
            "functionCode": "// Process payment documentation photos\nconst paymentData = $input.item.json;\n\n// Organize payment documentation data\nreturn {\n  captureDate: paymentData.timestamp,\n  projectId: paymentData.projectId,\n  contractorId: paymentData.contractorId,\n  contractorName: paymentData.contractorName,\n  paymentPhase: paymentData.paymentPhase,\n  completionPercentage: paymentData.completionPercentage,\n  imageUrls: paymentData.images,\n  notes: paymentData.notes || '',\n  capturedBy: paymentData.capturedBy,\n  paymentAmount: paymentData.paymentAmount,\n  invoiceNumber: paymentData.invoiceNumber\n};"
          }
        },
        {
          "id": "26",
          "name": "Save Drone Photography Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1100,
            600
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "=https://api.construction-site.example.com/progress-tracking/drone",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"captureDate\",\"value\":\"={{ $json.captureDate }}\"},{\"name\":\"projectId\",\"value\":\"={{ $json.projectId }}\"},{\"name\":\"droneId\",\"value\":\"={{ $json.droneId }}\"},{\"name\":\"imageUrls\",\"value\":\"={{ JSON.stringify($json.imageUrls) }}\"},{\"name\":\"coveragePercentage\",\"value\":\"={{ $json.coveragePercentage }}\"},{\"name\":\"weatherConditions\",\"value\":\"={{ $json.weatherConditions }}\"},{\"name\":\"notes\",\"value\":\"={{ $json.notes }}\"},{\"name\":\"weekNumber\",\"value\":\"={{ $json.weekNumber }}\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "27",
          "name": "Save Payment Documentation",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1100,
            700
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "=https://api.construction-site.example.com/progress-tracking/payment",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"captureDate\",\"value\":\"={{ $json.captureDate }}\"},{\"name\":\"projectId\",\"value\":\"={{ $json.projectId }}\"},{\"name\":\"contractorId\",\"value\":\"={{ $json.contractorId }}\"},{\"name\":\"contractorName\",\"value\":\"={{ $json.contractorName }}\"},{\"name\":\"paymentPhase\",\"value\":\"={{ $json.paymentPhase }}\"},{\"name\":\"completionPercentage\",\"value\":\"={{ $json.completionPercentage }}\"},{\"name\":\"imageUrls\",\"value\":\"={{ JSON.stringify($json.imageUrls) }}\"},{\"name\":\"paymentAmount\",\"value\":\"={{ $json.paymentAmount }}\"},{\"name\":\"invoiceNumber\",\"value\":\"={{ $json.invoiceNumber }}\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "28",
          "name": "Notify About Drone Photography",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            1300,
            600
          ],
          "parameters": {
            "options": {},
            "to": "=project-manager@construction-company.example",
            "subject": "=Weekly Drone Photography Update - Week {{ $json.weekNumber }}",
            "text": "=Weekly drone photography for project {{ $json.projectId }} has been captured and is now available for review.\n\nCapture Date: {{ $json.captureDate }}\nCoverage: {{ $json.coveragePercentage }}%\nWeather: {{ $json.weatherConditions }}\nOperator: {{ $json.operator }}\n\nYou can view the images at the following URLs:\n{{ $json.imageUrls.join('\\n') }}\n\nNotes: {{ $json.notes }}\n\nThis is an automated notification."
          }
        },
        {
          "id": "29",
          "name": "Notify About Payment Documentation",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            1300,
            700
          ],
          "parameters": {
            "options": {},
            "to": "=finance@construction-company.example, project-manager@construction-company.example",
            "subject": "=Payment Documentation Complete - {{ $json.contractorName }}",
            "text": "=Payment documentation for contractor {{ $json.contractorName }} has been captured and is now available for review.\n\nProject ID: {{ $json.projectId }}\nContractor: {{ $json.contractorName }} (ID: {{ $json.contractorId }})\nPayment Phase: {{ $json.paymentPhase }}\nCompletion: {{ $json.completionPercentage }}%\nAmount: ${{ $json.paymentAmount }}\nInvoice #: {{ $json.invoiceNumber }}\n\nYou can view the documentation photos at the following URLs:\n{{ $json.imageUrls.join('\\n') }}\n\nCaptured by: {{ $json.capturedBy }}\nNotes: {{ $json.notes }}\n\nThis is an automated notification."
          }
        },
        {
          "id": "30",
          "name": "Is Weather Monitoring?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            700,
            800
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.environmentalType }}",
                  "operation": "equal",
                  "value2": "weather_monitoring"
                }
              ]
            }
          }
        },
        {
          "id": "31",
          "name": "Is Crane Wind Monitoring?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            700,
            900
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.environmentalType }}",
                  "operation": "equal",
                  "value2": "crane_wind_monitoring"
                }
              ]
            }
          }
        },
        {
          "id": "32",
          "name": "Is Vibration Monitoring?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            700,
            1000
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.environmentalType }}",
                  "operation": "equal",
                  "value2": "vibration_monitoring"
                }
              ]
            }
          }
        },
        {
          "id": "33",
          "name": "Process Weather Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            800
          ],
          "parameters": {
            "functionCode": "// Process weather monitoring data\nconst weatherData = $input.item.json;\n\n// Check if weather conditions are suitable for concrete pouring\nconst temperature = weatherData.temperature;\nconst humidity = weatherData.humidity;\nconst precipitation = weatherData.precipitation;\nconst windSpeed = weatherData.windSpeed;\n\n// Define acceptable ranges for concrete pouring\nconst tempMin = 5; // °C\nconst tempMax = 32; // °C\nconst maxHumidity = 90; // %\nconst maxPrecipitation = 0.5; // mm\nconst maxWindSpeed = 20; // km/h\n\n// Determine if conditions are suitable\nconst tempSuitable = temperature >= tempMin && temperature <= tempMax;\nconst humiditySuitable = humidity <= maxHumidity;\nconst precipitationSuitable = precipitation <= maxPrecipitation;\nconst windSuitable = windSpeed <= maxWindSpeed;\n\nconst suitable = tempSuitable && humiditySuitable && precipitationSuitable && windSuitable;\n\n// Generate status message\nlet statusMessage = '';\nif (!tempSuitable) statusMessage += `Temperature outside range (${tempMin}-${tempMax}°C). `;\nif (!humiditySuitable) statusMessage += `Humidity too high (>${maxHumidity}%). `;\nif (!precipitationSuitable) statusMessage += `Precipitation too high (>${maxPrecipitation}mm). `;\nif (!windSuitable) statusMessage += `Wind too strong (>${maxWindSpeed}km/h). `;\n\nif (suitable) statusMessage = 'Weather conditions suitable for concrete pouring.';\n\nreturn {\n  timestamp: weatherData.timestamp,\n  projectId: weatherData.projectId,\n  locationZone: weatherData.zone,\n  temperature: temperature,\n  humidity: humidity,\n  precipitation: precipitation,\n  windSpeed: windSpeed,\n  suitable: suitable,\n  statusMessage: statusMessage\n};"
          }
        },
        {
          "id": "34",
          "name": "Process Crane Wind Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            900
          ],
          "parameters": {
            "functionCode": "// Process crane wind monitoring data\nconst windData = $input.item.json;\n\n// Extract wind speed and crane data\nconst windSpeed = windData.windSpeed;\nconst gustSpeed = windData.gustSpeed;\nconst craneId = windData.craneId;\nconst craneType = windData.craneType;\n\n// Define safety thresholds\nconst warningThreshold = 30; // km/h\nconst shutdownThreshold = 50; // km/h\nconst gustShutdownThreshold = 65; // km/h\n\n// Determine action needed\nlet actionNeeded = 'none';\nlet alertLevel = 'normal';\nlet statusMessage = 'Wind conditions safe for crane operation.';\n\nif (gustSpeed >= gustShutdownThreshold || windSpeed >= shutdownThreshold) {\n  actionNeeded = 'shutdown';\n  alertLevel = 'critical';\n  statusMessage = `CRITICAL: Wind conditions unsafe for crane operation. Immediate shutdown required. Wind: ${windSpeed} km/h, Gusts: ${gustSpeed} km/h`;\n} else if (windSpeed >= warningThreshold) {\n  actionNeeded = 'warning';\n  alertLevel = 'warning';\n  statusMessage = `WARNING: Wind conditions approaching unsafe levels. Monitor closely. Wind: ${windSpeed} km/h, Gusts: ${gustSpeed} km/h`;\n}\n\nreturn {\n  timestamp: windData.timestamp,\n  projectId: windData.projectId,\n  craneId: craneId,\n  craneType: craneType,\n  windSpeed: windSpeed,\n  gustSpeed: gustSpeed,\n  actionNeeded: actionNeeded,\n  alertLevel: alertLevel,\n  statusMessage: statusMessage\n};"
          }
        },
        {
          "id": "35",
          "name": "Process Vibration Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            1000
          ],
          "parameters": {
            "functionCode": "// Process vibration monitoring data\nconst vibrationData = $input.item.json;\n\n// Extract vibration readings\nconst vibrationLevel = vibrationData.vibrationLevel; // mm/s\nconst buildingId = vibrationData.buildingId;\nconst buildingType = vibrationData.buildingType;\nconst sensorId = vibrationData.sensorId;\n\n// Define vibration thresholds based on building type\nlet threshold;\nswitch (buildingType) {\n  case 'historical':\n    threshold = 3; // mm/s\n    break;\n  case 'residential':\n    threshold = 5; // mm/s\n    break;\n  case 'commercial':\n    threshold = 8; // mm/s\n    break;\n  case 'industrial':\n    threshold = 12; // mm/s\n    break;\n  default:\n    threshold = 5; // mm/s (default)\n}\n\n// Determine if vibration level is acceptable\nconst isExcessive = vibrationLevel > threshold;\nlet alertLevel = 'normal';\nlet statusMessage = `Vibration levels within acceptable range for ${buildingType} building.`;\n\nif (isExcessive) {\n  alertLevel = 'warning';\n  statusMessage = `WARNING: Excessive vibration detected at ${buildingType} building. Measured: ${vibrationLevel} mm/s, Threshold: ${threshold} mm/s`;\n}\n\nreturn {\n  timestamp: vibrationData.timestamp,\n  projectId: vibrationData.projectId,\n  buildingId: buildingId,\n  buildingType: buildingType,\n  sensorId: sensorId,\n  vibrationLevel: vibrationLevel,\n  threshold: threshold,\n  isExcessive: isExcessive,\n  alertLevel: alertLevel,\n  statusMessage: statusMessage\n};"
          }
        },
        {
          "id": "36",
          "name": "Save Weather Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1100,
            800
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "=https://api.construction-site.example.com/environmental/weather",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"timestamp\",\"value\":\"={{ $json.timestamp }}\"},{\"name\":\"projectId\",\"value\":\"={{ $json.projectId }}\"},{\"name\":\"locationZone\",\"value\":\"={{ $json.locationZone }}\"},{\"name\":\"temperature\",\"value\":\"={{ $json.temperature }}\"},{\"name\":\"humidity\",\"value\":\"={{ $json.humidity }}\"},{\"name\":\"precipitation\",\"value\":\"={{ $json.precipitation }}\"},{\"name\":\"windSpeed\",\"value\":\"={{ $json.windSpeed }}\"},{\"name\":\"suitable\",\"value\":\"={{ $json.suitable }}\"},{\"name\":\"statusMessage\",\"value\":\"={{ $json.statusMessage }}\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "37",
          "name": "Weather Suitable for Concrete?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1300,
            800
          ],
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $json.suitable }}",
                  "value2": true
                }
              ]
            }
          }
        },
        {
          "id": "38",
          "name": "Send Concrete Weather Alert",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            1500,
            800
          ],
          "parameters": {
            "options": {},
            "to": "=construction-manager@construction-company.example",
            "subject": "=ALERT: Unsuitable Weather for Concrete Pouring",
            "text": "=WEATHER ALERT: Conditions not suitable for concrete pouring\n\nProject ID: {{ $json.projectId }}\nLocation Zone: {{ $json.locationZone }}\nTimestamp: {{ $json.timestamp }}\n\nCurrent Conditions:\n- Temperature: {{ $json.temperature }}°C\n- Humidity: {{ $json.humidity }}%\n- Precipitation: {{ $json.precipitation }}mm\n- Wind Speed: {{ $json.windSpeed }}km/h\n\nStatus: {{ $json.statusMessage }}\n\nPlease reschedule concrete pouring operations until conditions improve.\n\nThis is an automated alert."
          }
        },
        {
          "id": "39",
          "name": "Save Crane Wind Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1100,
            900
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "=https://api.construction-site.example.com/environmental/crane-wind",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"timestamp\",\"value\":\"={{ $json.timestamp }}\"},{\"name\":\"projectId\",\"value\":\"={{ $json.projectId }}\"},{\"name\":\"craneId\",\"value\":\"={{ $json.craneId }}\"},{\"name\":\"craneType\",\"value\":\"={{ $json.craneType }}\"},{\"name\":\"windSpeed\",\"value\":\"={{ $json.windSpeed }}\"},{\"name\":\"gustSpeed\",\"value\":\"={{ $json.gustSpeed }}\"},{\"name\":\"actionNeeded\",\"value\":\"={{ $json.actionNeeded }}\"},{\"name\":\"alertLevel\",\"value\":\"={{ $json.alertLevel }}\"},{\"name\":\"statusMessage\",\"value\":\"={{ $json.statusMessage }}\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "40",
          "name": "Crane Shutdown Needed?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1300,
            900
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.actionNeeded }}",
                  "operation": "equal",
                  "value2": "shutdown"
                }
              ]
            }
          }
        },
        {
          "id": "41",
          "name": "Trigger Crane Shutdown",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1500,
            850
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "=https://api.construction-site.example.com/crane/{{ $json.craneId }}/shutdown",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"reason\",\"value\":\"high_wind\"},{\"name\":\"windSpeed\",\"value\":\"={{ $json.windSpeed }}\"},{\"name\":\"gustSpeed\",\"value\":\"={{ $json.gustSpeed }}\"},{\"name\":\"timestamp\",\"value\":\"={{ $json.timestamp }}\"},{\"name\":\"automatic\",\"value\":\"true\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "42",
          "name": "Send Crane Shutdown Alert",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            1700,
            850
          ],
          "parameters": {
            "options": {},
            "to": "=crane-operators@construction-company.example, site-manager@construction-company.example",
            "subject": "=CRITICAL ALERT: Automatic Crane Shutdown Due to High Winds",
            "text": "=CRITICAL WIND ALERT: Automatic crane shutdown initiated\n\nProject ID: {{ $json.projectId }}\nCrane ID: {{ $json.craneId }}\nCrane Type: {{ $json.craneType }}\nTimestamp: {{ $json.timestamp }}\n\nWind Conditions:\n- Wind Speed: {{ $json.windSpeed }} km/h\n- Gust Speed: {{ $json.gustSpeed }} km/h\n\nStatus: {{ $json.statusMessage }}\n\nAUTOMATIC SHUTDOWN has been initiated. Do not attempt to operate the crane until wind conditions improve and a safety inspection has been completed.\n\nThis is an automated safety alert."
          }
        },
        {
          "id": "43",
          "name": "Crane Warning Needed?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1300,
            1000
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.actionNeeded }}",
                  "operation": "equal",
                  "value2": "warning"
                }
              ]
            }
          }
        },
        {
          "id": "44",
          "name": "Send Crane Wind Warning",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            1500,
            1000
          ],
          "parameters": {
            "options": {},
            "to": "=crane-operators@construction-company.example",
            "subject": "=WARNING: High Wind Conditions for Crane Operations",
            "text": "=WIND WARNING: High wind conditions detected\n\nProject ID: {{ $json.projectId }}\nCrane ID: {{ $json.craneId }}\nCrane Type: {{ $json.craneType }}\nTimestamp: {{ $json.timestamp }}\n\nWind Conditions:\n- Wind Speed: {{ $json.windSpeed }} km/h\n- Gust Speed: {{ $json.gustSpeed }} km/h\n\nStatus: {{ $json.statusMessage }}\n\nPlease monitor wind conditions closely and be prepared to cease operations if winds increase.\n\nThis is an automated warning."
          }
        },
        {
          "id": "45",
          "name": "Save Vibration Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1100,
            1000
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "=https://api.construction-site.example.com/environmental/vibration",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"timestamp\",\"value\":\"={{ $json.timestamp }}\"},{\"name\":\"projectId\",\"value\":\"={{ $json.projectId }}\"},{\"name\":\"buildingId\",\"value\":\"={{ $json.buildingId }}\"},{\"name\":\"buildingType\",\"value\":\"={{ $json.buildingType }}\"},{\"name\":\"sensorId\",\"value\":\"={{ $json.sensorId }}\"},{\"name\":\"vibrationLevel\",\"value\":\"={{ $json.vibrationLevel }}\"},{\"name\":\"threshold\",\"value\":\"={{ $json.threshold }}\"},{\"name\":\"isExcessive\",\"value\":\"={{ $json.isExcessive }}\"},{\"name\":\"alertLevel\",\"value\":\"={{ $json.alertLevel }}\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "46",
          "name": "Excessive Vibration?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1300,
            1100
          ],
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $json.isExcessive }}",
                  "value2": true
                }
              ]
            }
          }
        },
        {
          "id": "47",
          "name": "Send Vibration Alert",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            1500,
            1100
          ],
          "parameters": {
            "options": {},
            "to": "=site-manager@construction-company.example, safety@construction-company.example",
            "subject": "=ALERT: Excessive Vibration Detected in Neighboring Building",
            "text": "=VIBRATION ALERT: Excessive levels detected\n\nProject ID: {{ $json.projectId }}\nBuilding ID: {{ $json.buildingId }}\nBuilding Type: {{ $json.buildingType }}\nSensor ID: {{ $json.sensorId }}\nTimestamp: {{ $json.timestamp }}\n\nVibration Data:\n- Measured Level: {{ $json.vibrationLevel }} mm/s\n- Threshold: {{ $json.threshold }} mm/s\n\nStatus: {{ $json.statusMessage }}\n\nPlease review construction activities that may be causing excessive vibration and take appropriate mitigation measures immediately.\n\nThis is an automated alert."
          }
        },
        {
          "id": "48",
          "name": "Is Material Tracking?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            700,
            1100
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.resourceType }}",
                  "operation": "equal",
                  "value2": "material_tracking"
                }
              ]
            }
          }
        },
        {
          "id": "49",
          "name": "Is Security Patrol?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            700,
            1200
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.resourceType }}",
                  "operation": "equal",
                  "value2": "security_patrol"
                }
              ]
            }
          }
        },
        {
          "id": "50",
          "name": "Process Material Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            1100
          ],
          "parameters": {
            "functionCode": "// Process material tracking data\nconst materialData = $input.item.json;\n\n// Extract material information\nconst materialType = materialData.materialType;\nconst currentStock = materialData.currentStock;\nconst minimumStock = materialData.minimumStock;\nconst unitOfMeasure = materialData.unitOfMeasure;\nconst averageDailyUsage = materialData.averageDailyUsage;\n\n// Calculate days of supply remaining\nconst daysRemaining = averageDailyUsage > 0 ? Math.floor(currentStock / averageDailyUsage) : 999;\n\n// Determine if reorder is needed\nconst needsReorder = currentStock <= minimumStock;\n\n// Calculate order quantity (typically 2 weeks supply or minimum order quantity)\nconst standardOrderQuantity = Math.max(materialData.minimumOrderQuantity || 0, averageDailyUsage * 14);\n\n// Prepare response\nreturn {\n  timestamp: materialData.timestamp,\n  projectId: materialData.projectId,\n  materialId: materialData.materialId,\n  materialType: materialType,\n  materialName: materialData.materialName,\n  currentStock: currentStock,\n  minimumStock: minimumStock,\n  unitOfMeasure: unitOfMeasure,\n  averageDailyUsage: averageDailyUsage,\n  daysRemaining: daysRemaining,\n  needsReorder: needsReorder,\n  suggestedOrderQuantity: standardOrderQuantity,\n  supplier: materialData.supplier,\n  supplierContact: materialData.supplierContact,\n  leadTimeInDays: materialData.leadTimeInDays || 5\n};"
          }
        },
        {
          "id": "51",
          "name": "Process Security Patrol Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            1200
          ],
          "parameters": {
            "functionCode": "// Process security patrol data\nconst patrolData = $input.item.json;\n\n// Extract patrol information\nconst guardId = patrolData.guardId;\nconst guardName = patrolData.guardName;\nconst checkpoints = patrolData.checkpoints || [];\nconst startTime = patrolData.startTime;\nconst endTime = patrolData.endTime || null;\n\n// Calculate patrol duration if completed\nlet patrolDuration = null;\nif (endTime) {\n  const start = new Date(startTime).getTime();\n  const end = new Date(endTime).getTime();\n  patrolDuration = Math.round((end - start) / (1000 * 60)); // Duration in minutes\n}\n\n// Check for missed checkpoints\nconst requiredCheckpoints = patrolData.requiredCheckpoints || [];\nconst missedCheckpoints = [];\n\nif (requiredCheckpoints.length > 0) {\n  const visitedIds = checkpoints.map(cp => cp.checkpointId);\n  \n  for (const required of requiredCheckpoints) {\n    if (!visitedIds.includes(required.checkpointId)) {\n      missedCheckpoints.push(required);\n    }\n  }\n}\n\n// Determine patrol status\nlet patrolStatus = 'in_progress';\nlet statusMessage = 'Patrol in progress';\n\nif (endTime) {\n  if (missedCheckpoints.length === 0) {\n    patrolStatus = 'completed';\n    statusMessage = 'Patrol completed successfully';\n  } else {\n    patrolStatus = 'incomplete';\n    statusMessage = `Patrol completed with ${missedCheckpoints.length} missed checkpoints`;\n  }\n}\n\nreturn {\n  timestamp: patrolData.timestamp,\n  projectId: patrolData.projectId,\n  patrolId: patrolData.patrolId,\n  guardId: guardId,\n  guardName: guardName,\n  startTime: startTime,\n  endTime: endTime,\n  patrolDuration: patrolDuration,\n  checkpoints: checkpoints,\n  missedCheckpoints: missedCheckpoints,\n  patrolStatus: patrolStatus,\n  statusMessage: statusMessage\n};"
          }
        },
        {
          "id": "52",
          "name": "Save Material Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1100,
            1100
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "=https://api.construction-site.example.com/resources/materials",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"timestamp\",\"value\":\"={{ $json.timestamp }}\"},{\"name\":\"projectId\",\"value\":\"={{ $json.projectId }}\"},{\"name\":\"materialId\",\"value\":\"={{ $json.materialId }}\"},{\"name\":\"materialName\",\"value\":\"={{ $json.materialName }}\"},{\"name\":\"currentStock\",\"value\":\"={{ $json.currentStock }}\"},{\"name\":\"minimumStock\",\"value\":\"={{ $json.minimumStock }}\"},{\"name\":\"daysRemaining\",\"value\":\"={{ $json.daysRemaining }}\"},{\"name\":\"needsReorder\",\"value\":\"={{ $json.needsReorder }}\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "53",
          "name": "Material Needs Reorder?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1300,
            1150
          ],
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $json.needsReorder }}",
                  "value2": true
                }
              ]
            }
          }
        },
        {
          "id": "54",
          "name": "Create Material Order",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1500,
            1150
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "=https://api.construction-site.example.com/resources/orders",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"projectId\",\"value\":\"={{ $json.projectId }}\"},{\"name\":\"materialId\",\"value\":\"={{ $json.materialId }}\"},{\"name\":\"materialName\",\"value\":\"={{ $json.materialName }}\"},{\"name\":\"orderQuantity\",\"value\":\"={{ $json.suggestedOrderQuantity }}\"},{\"name\":\"unitOfMeasure\",\"value\":\"={{ $json.unitOfMeasure }}\"},{\"name\":\"supplier\",\"value\":\"={{ $json.supplier }}\"},{\"name\":\"supplierContact\",\"value\":\"={{ $json.supplierContact }}\"},{\"name\":\"requestDate\",\"value\":\"={{ $json.timestamp }}\"},{\"name\":\"expectedDeliveryDate\",\"value\":\"={{ new Date(Date.now() + $json.leadTimeInDays * 24 * 60 * 60 * 1000).toISOString() }}\"},{\"name\":\"status\",\"value\":\"requested\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "55",
          "name": "Send Material Order Alert",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            1700,
            1150
          ],
          "parameters": {
            "options": {},
            "to": "=procurement@construction-company.example",
            "subject": "=Material Reorder Required: {{ $json.materialName }}",
            "text": "=MATERIAL REORDER ALERT\n\nProject ID: {{ $json.projectId }}\nMaterial: {{ $json.materialName }} (ID: {{ $json.materialId }})\n\nCurrent Stock: {{ $json.currentStock }} {{ $json.unitOfMeasure }}\nMinimum Stock: {{ $json.minimumStock }} {{ $json.unitOfMeasure }}\nDays Remaining: {{ $json.daysRemaining }}\n\nSuggested Order:\n- Quantity: {{ $json.suggestedOrderQuantity }} {{ $json.unitOfMeasure }}\n- Supplier: {{ $json.supplier }}\n- Contact: {{ $json.supplierContact }}\n- Lead Time: {{ $json.leadTimeInDays }} days\n\nAn order has been automatically created in the system. Please review and approve.\n\nThis is an automated notification."
          }
        },
        {
          "id": "56",
          "name": "Save Security Patrol Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1100,
            1200
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "=https://api.construction-site.example.com/security/patrols",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"patrolId\",\"value\":\"={{ $json.patrolId }}\"},{\"name\":\"projectId\",\"value\":\"={{ $json.projectId }}\"},{\"name\":\"guardId\",\"value\":\"={{ $json.guardId }}\"},{\"name\":\"guardName\",\"value\":\"={{ $json.guardName }}\"},{\"name\":\"startTime\",\"value\":\"={{ $json.startTime }}\"},{\"name\":\"endTime\",\"value\":\"={{ $json.endTime }}\"},{\"name\":\"patrolDuration\",\"value\":\"={{ $json.patrolDuration }}\"},{\"name\":\"checkpoints\",\"value\":\"={{ JSON.stringify($json.checkpoints) }}\"},{\"name\":\"patrolStatus\",\"value\":\"={{ $json.patrolStatus }}\"},{\"name\":\"statusMessage\",\"value\":\"={{ $json.statusMessage }}\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "57",
          "name": "Missed Checkpoints?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1300,
            1200
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.patrolStatus }}",
                  "operation": "equal",
                  "value2": "incomplete"
                }
              ]
            }
          }
        },
        {
          "id": "58",
          "name": "Send Missed Checkpoint Alert",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            1500,
            1200
          ],
          "parameters": {
            "options": {},
            "to": "=security-manager@construction-company.example",
            "subject": "=Security Alert: Incomplete Patrol with Missed Checkpoints",
            "text": "=SECURITY PATROL ALERT: Incomplete patrol detected\n\nProject ID: {{ $json.projectId }}\nPatrol ID: {{ $json.patrolId }}\nGuard: {{ $json.guardName }} (ID: {{ $json.guardId }})\n\nPatrol Details:\n- Start Time: {{ $json.startTime }}\n- End Time: {{ $json.endTime }}\n- Duration: {{ $json.patrolDuration }} minutes\n\nStatus: {{ $json.statusMessage }}\n\nMissed Checkpoints:\n{% for checkpoint in $json.missedCheckpoints %}\n- {{ checkpoint.checkpointName }} (ID: {{ checkpoint.checkpointId }})\n{% endfor %}\n\nPlease review security coverage and ensure all checkpoints are being properly monitored.\n\nThis is an automated security alert."
          }
        },
        {
          "id": "59",
          "name": "Process Emergency Protocol",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            1300
          ],
          "parameters": {
            "functionCode": "// Process emergency protocol data\nconst emergencyData = $input.item.json;\n\n// Extract emergency information\nconst emergencyType = emergencyData.emergencyType;\nconst severity = emergencyData.severity;\nconst location = emergencyData.location;\nconst affectedWorkers = emergencyData.affectedWorkers || [];\n\n// Generate emergency response actions based on type\nlet responseActions = [];\nlet externalServices = [];\nlet notificationList = [];\n\nswitch (emergencyType) {\n  case 'injury':\n    responseActions = [\n      'Secure the area',\n      'Provide first aid',\n      'Contact site medical personnel',\n      'Prepare incident report'\n    ];\n    externalServices = severity >= 3 ? ['Ambulance'] : [];\n    notificationList = ['site_manager', 'safety_officer', 'project_manager'];\n    break;\n    \n  case 'fire':\n    responseActions = [\n      'Evacuate the area',\n      'Activate fire alarm',\n      'Use fire extinguishers if safe',\n      'Account for all personnel'\n    ];\n    externalServices = ['Fire Department'];\n    notificationList = ['site_manager', 'safety_officer', 'project_manager', 'all_workers'];\n    break;\n    \n  case 'structural_failure':\n    responseActions = [\n      'Evacuate the area',\n      'Secure perimeter',\n      'Shut down affected equipment',\n      'Account for all personnel'\n    ];\n    externalServices = severity >= 3 ? ['Emergency Services', 'Structural Engineer'] : ['Structural Engineer'];\n    notificationList = ['site_manager', 'safety_officer', 'project_manager', 'engineering_team', 'all_workers'];\n    break;\n    \n  case 'equipment_failure':\n    responseActions = [\n      'Shut down equipment',\n      'Secure the area',\n      'Assess damage',\n      'Check for injuries'\n    ];\n    externalServices = [];\n    notificationList = ['site_manager', 'equipment_manager', 'safety_officer'];\n    break;\n    \n  case 'gas_leak':\n    responseActions = [\n      'Evacuate the area',\n      'Shut off gas supply if possible',\n      'Eliminate ignition sources',\n      'Account for all personnel'\n    ];\n    externalServices = ['Fire Department', 'Gas Company'];\n    notificationList = ['site_manager', 'safety_officer', 'project_manager', 'all_workers'];\n    break;\n    \n  default:\n    responseActions = [\n      'Secure the area',\n      'Assess the situation',\n      'Contact site manager',\n      'Wait for instructions'\n    ];\n    notificationList = ['site_manager', 'safety_officer'];\n}\n\n// Add severity-based actions\nif (severity >= 4) {\n  responseActions.push('Implement full site evacuation');\n  notificationList.push('executive_team');\n}\n\nreturn {\n  timestamp: emergencyData.timestamp,\n  projectId: emergencyData.projectId,\n  emergencyId: emergencyData.emergencyId,\n  emergencyType: emergencyType,\n  severity: severity,\n  location: location,\n  affectedWorkers: affectedWorkers,\n  responseActions: responseActions,\n  externalServices: externalServices,\n  notificationList: notificationList,\n  reportedBy: emergencyData.reportedBy\n};"
          }
        },
        {
          "id": "60",
          "name": "Record Emergency Incident",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            900,
            1300
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "=https://api.construction-site.example.com/emergency/incidents",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"emergencyId\",\"value\":\"={{ $json.emergencyId }}\"},{\"name\":\"projectId\",\"value\":\"={{ $json.projectId }}\"},{\"name\":\"timestamp\",\"value\":\"={{ $json.timestamp }}\"},{\"name\":\"emergencyType\",\"value\":\"={{ $json.emergencyType }}\"},{\"name\":\"severity\",\"value\":\"={{ $json.severity }}\"},{\"name\":\"location\",\"value\":\"={{ $json.location }}\"},{\"name\":\"affectedWorkers\",\"value\":\"={{ JSON.stringify($json.affectedWorkers) }}\"},{\"name\":\"responseActions\",\"value\":\"={{ JSON.stringify($json.responseActions) }}\"},{\"name\":\"externalServices\",\"value\":\"={{ JSON.stringify($json.externalServices) }}\"},{\"name\":\"reportedBy\",\"value\":\"={{ $json.reportedBy }}\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "61",
          "name": "Is High Severity Emergency?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1100,
            1300
          ],
          "parameters": {
            "conditions": {
              "number": [
                {
                  "value1": "={{ $json.severity }}",
                  "operation": "larger",
                  "value2": 2
                }
              ]
            }
          }
        },
        {
          "id": "62",
          "name": "Send High Severity Emergency Alert",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            1300,
            1250
          ],
          "parameters": {
            "options": {},
            "to": "=emergency-response@construction-company.example, site-manager@construction-company.example, safety@construction-company.example",
            "subject": "=EMERGENCY ALERT: {{ $json.emergencyType }} (Severity {{ $json.severity }})",
            "text": "=EMERGENCY PROTOCOL ACTIVATED\n\nProject ID: {{ $json.projectId }}\nEmergency ID: {{ $json.emergencyId }}\nType: {{ $json.emergencyType }}\nSeverity: {{ $json.severity }}/5\nLocation: {{ $json.location }}\nTime: {{ $json.timestamp }}\nReported By: {{ $json.reportedBy }}\n\n{% if $json.affectedWorkers.length > 0 %}\nAffected Workers:\n{% for worker in $json.affectedWorkers %}\n- {{ worker.name }} (ID: {{ worker.id }})\n{% endfor %}\n{% endif %}\n\nRequired Actions:\n{% for action in $json.responseActions %}\n- {{ action }}\n{% endfor %}\n\n{% if $json.externalServices.length > 0 %}\nExternal Services to Contact:\n{% for service in $json.externalServices %}\n- {{ service }}\n{% endfor %}\n{% endif %}\n\nTHIS IS A HIGH PRIORITY EMERGENCY ALERT. IMMEDIATE ACTION REQUIRED.\n\nAccess the emergency management system for real-time updates and coordination."
          }
        },
        {
          "id": "63",
          "name": "Send Standard Emergency Alert",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            1300,
            1350
          ],
          "parameters": {
            "options": {},
            "to": "=site-manager@construction-company.example, safety@construction-company.example",
            "subject": "=Emergency Notification: {{ $json.emergencyType }}",
            "text": "=Emergency Protocol Activated\n\nProject ID: {{ $json.projectId }}\nEmergency ID: {{ $json.emergencyId }}\nType: {{ $json.emergencyType }}\nSeverity: {{ $json.severity }}/5\nLocation: {{ $json.location }}\nTime: {{ $json.timestamp }}\nReported By: {{ $json.reportedBy }}\n\n{% if $json.affectedWorkers.length > 0 %}\nAffected Workers:\n{% for worker in $json.affectedWorkers %}\n- {{ worker.name }} (ID: {{ worker.id }})\n{% endfor %}\n{% endif %}\n\nRecommended Actions:\n{% for action in $json.responseActions %}\n- {{ action }}\n{% endfor %}\n\n{% if $json.externalServices.length > 0 %}\nExternal Services to Consider:\n{% for service in $json.externalServices %}\n- {{ service }}\n{% endfor %}\n{% endif %}\n\nThis is an automated notification. Please assess the situation and respond according to site safety protocols."
          }
        },
        {
          "id": "64",
          "name": "Is Injury Emergency?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1500,
            1300
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.emergencyType }}",
                  "operation": "equal",
                  "value2": "injury"
                }
              ]
            }
          }
        },
        {
          "id": "65",
          "name": "Create Injury Incident Report",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1700,
            1250
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "=https://api.construction-site.example.com/safety/incident-reports",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"emergencyId\",\"value\":\"={{ $json.emergencyId }}\"},{\"name\":\"projectId\",\"value\":\"={{ $json.projectId }}\"},{\"name\":\"incidentType\",\"value\":\"injury\"},{\"name\":\"timestamp\",\"value\":\"={{ $json.timestamp }}\"},{\"name\":\"location\",\"value\":\"={{ $json.location }}\"},{\"name\":\"severity\",\"value\":\"={{ $json.severity }}\"},{\"name\":\"affectedWorkers\",\"value\":\"={{ JSON.stringify($json.affectedWorkers) }}\"},{\"name\":\"reportedBy\",\"value\":\"={{ $json.reportedBy }}\"},{\"name\":\"status\",\"value\":\"open\"},{\"name\":\"requiredFollowUp\",\"value\":\"true\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "66",
          "name": "Is Severe Injury?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1900,
            1250
          ],
          "parameters": {
            "conditions": {
              "number": [
                {
                  "value1": "={{ $json.severity }}",
                  "operation": "larger",
                  "value2": 3
                }
              ]
            }
          }
        },
        {
          "id": "67",
          "name": "Request Ambulance Service",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            2100,
            1200
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "=https://api.construction-site.example.com/emergency/external-notification",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"emergencyId\",\"value\":\"={{ $json.emergencyId }}\"},{\"name\":\"projectId\",\"value\":\"={{ $json.projectId }}\"},{\"name\":\"serviceType\",\"value\":\"ambulance\"},{\"name\":\"location\",\"value\":\"={{ $json.location }}\"},{\"name\":\"severity\",\"value\":\"={{ $json.severity }}\"},{\"name\":\"details\",\"value\":\"=Workplace injury requiring immediate medical attention. {{ $json.affectedWorkers.length }} worker(s) affected.\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "68",
          "name": "Send Medical Emergency Alert",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            2300,
            1200
          ],
          "parameters": {
            "options": {},
            "to": "=medical@construction-company.example, hse-manager@construction-company.example",
            "subject": "=CRITICAL: Severe Injury Incident - Medical Emergency",
            "text": "=SEVERE INJURY ALERT - MEDICAL EMERGENCY\n\nProject ID: {{ $json.projectId }}\nEmergency ID: {{ $json.emergencyId }}\nLocation: {{ $json.location }}\nSeverity: {{ $json.severity }}/5 (CRITICAL)\nTime: {{ $json.timestamp }}\n\nAffected Workers:\n{% for worker in $json.affectedWorkers %}\n- {{ worker.name }} (ID: {{ worker.id }})\n{% endfor %}\n\nEMERGENCY RESPONSE STATUS:\n- Incident report created\n- Emergency protocol activated\n- Ambulance service requested\n- Site medical team notified\n\nPlease coordinate with emergency services upon arrival and prepare for potential regulatory reporting requirements.\n\nTHIS IS A CRITICAL MEDICAL EMERGENCY NOTIFICATION."
          }
        },
        {
          "id": "69",
          "name": "Send Injury Report Notification",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            2100,
            1300
          ],
          "parameters": {
            "options": {},
            "to": "=medical@construction-company.example",
            "subject": "=Injury Incident Report Created",
            "text": "=Injury Incident Report\n\nProject ID: {{ $json.projectId }}\nEmergency ID: {{ $json.emergencyId }}\nLocation: {{ $json.location }}\nSeverity: {{ $json.severity }}/5\nTime: {{ $json.timestamp }}\n\nAffected Workers:\n{% for worker in $json.affectedWorkers %}\n- {{ worker.name }} (ID: {{ worker.id }})\n{% endfor %}\n\nAn incident report has been created in the system. Please follow up with appropriate medical assessment and documentation.\n\nThis is an automated notification."
          }
        },
        {
          "id": "70",
          "name": "Is Fire Emergency?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1500,
            1400
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.emergencyType }}",
                  "operation": "equal",
                  "value2": "fire"
                }
              ]
            }
          }
        },
        {
          "id": "71",
          "name": "Request Fire Department",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1700,
            1400
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "=https://api.construction-site.example.com/emergency/external-notification",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"emergencyId\",\"value\":\"={{ $json.emergencyId }}\"},{\"name\":\"projectId\",\"value\":\"={{ $json.projectId }}\"},{\"name\":\"serviceType\",\"value\":\"fire_department\"},{\"name\":\"location\",\"value\":\"={{ $json.location }}\"},{\"name\":\"severity\",\"value\":\"={{ $json.severity }}\"},{\"name\":\"details\",\"value\":\"=Fire emergency at construction site. Severity: {{ $json.severity }}/5. Site evacuation in progress.\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "72",
          "name": "Trigger Site Evacuation Alarm",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1900,
            1400
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "=https://api.construction-site.example.com/emergency/site-alarm",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"alarmType\",\"value\":\"evacuation\"},{\"name\":\"projectId\",\"value\":\"={{ $json.projectId }}\"},{\"name\":\"emergencyId\",\"value\":\"={{ $json.emergencyId }}\"},{\"name\":\"location\",\"value\":\"={{ $json.location }}\"},{\"name\":\"message\",\"value\":\"=EMERGENCY EVACUATION: Fire detected. Proceed to nearest exit and assembly point immediately.\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "73",
          "name": "Send Fire Evacuation Alert",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            2100,
            1400
          ],
          "parameters": {
            "options": {},
            "to": "=all-workers@construction-company.example",
            "bcc": "=site-manager@construction-company.example, safety@construction-company.example",
            "subject": "=EMERGENCY: FIRE EVACUATION REQUIRED",
            "text": "=⚠️ EMERGENCY EVACUATION NOTICE ⚠️\n\nA FIRE HAS BEEN DETECTED AT THE CONSTRUCTION SITE.\n\nLocation: {{ $json.location }}\n\nALL PERSONNEL MUST:\n1. STOP WORK IMMEDIATELY\n2. PROCEED TO THE NEAREST EXIT\n3. GO TO YOUR DESIGNATED ASSEMBLY POINT\n4. REPORT TO YOUR SUPERVISOR\n\nDO NOT return to the site until an all-clear is issued by authorized personnel.\n\nEmergency services have been notified.\n\nTHIS IS NOT A DRILL."
          }
        },
        {
          "id": "74",
          "name": "Error Handler",
          "type": "n8n-nodes-base.errorTrigger",
          "typeVersion": 1,
          "position": [
            240,
            1400
          ],
          "parameters": {
            "name": "Construction Site Monitoring Error Handler",
            "errorDescription": "=Error in construction site monitoring system: {{ $json.error?.message || $json.message || 'Unknown error' }}",
            "continueOnFail": true
          }
        },
        {
          "id": "75",
          "name": "Process Error",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            440,
            1400
          ],
          "parameters": {
            "functionCode": "// Log error details\nconst errorData = $input.item.json;\n\n// Format error information\nconst errorTimestamp = new Date().toISOString();\nconst errorMessage = errorData.error?.message || errorData.message || 'Unknown error';\nconst errorWorkflow = 'Construction Site Safety and Progress Monitoring';\nconst errorNodeName = errorData.node?.name || 'Unknown node';\n\nreturn {\n  timestamp: errorTimestamp,\n  errorMessage: errorMessage,\n  workflow: errorWorkflow,\n  nodeName: errorNodeName,\n  payload: JSON.stringify(errorData),\n  severity: 'high'\n};"
          }
        },
        {
          "id": "76",
          "name": "Log Error",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            640,
            1400
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "=https://api.construction-site.example.com/system/error-logs",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"timestamp\",\"value\":\"={{ $json.timestamp }}\"},{\"name\":\"errorMessage\",\"value\":\"={{ $json.errorMessage }}\"},{\"name\":\"workflow\",\"value\":\"={{ $json.workflow }}\"},{\"name\":\"nodeName\",\"value\":\"={{ $json.nodeName }}\"},{\"name\":\"payload\",\"value\":\"={{ $json.payload }}\"},{\"name\":\"severity\",\"value\":\"={{ $json.severity }}\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "77",
          "name": "Send Error Alert",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            840,
            1400
          ],
          "parameters": {
            "options": {},
            "to": "=system-admin@construction-company.example",
            "subject": "=ERROR: Construction Site Monitoring System Failure",
            "text": "=SYSTEM ERROR ALERT\n\nThe Construction Site Safety and Progress Monitoring system has encountered an error:\n\nTimestamp: {{ $json.timestamp }}\nError: {{ $json.errorMessage }}\nWorkflow: {{ $json.workflow }}\nNode: {{ $json.nodeName }}\nSeverity: {{ $json.severity }}\n\nPlease check the system logs for more details.\n\nThis is an automated alert."
          }
        },
        {
          "id": "78",
          "name": "Daily Summary Trigger",
          "type": "n8n-nodes-base.scheduleTrigger",
          "typeVersion": 1,
          "position": [
            240,
            1600
          ],
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "cronExpression",
                  "expression": "0 0 * * *"
                }
              ]
            }
          }
        },
        {
          "id": "79",
          "name": "Fetch Daily Summary Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            440,
            1600
          ],
          "parameters": {
            "method": "GET",
            "options": {},
            "url": "=https://api.construction-site.example.com/daily-summary",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth"
          }
        },
        {
          "id": "80",
          "name": "Format Daily Summary",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            640,
            1600
          ],
          "parameters": {
            "functionCode": "// Process daily summary data\nconst summaryData = $input.item.json;\n\n// Format the data for the report\nconst date = new Date().toISOString().split('T')[0];\nconst safetyIncidents = summaryData.safetyIncidents || [];\nconst progressUpdates = summaryData.progressUpdates || [];\nconst materialAlerts = summaryData.materialAlerts || [];\nconst environmentalAlerts = summaryData.environmentalAlerts || [];\n\n// Calculate statistics\nconst totalWorkers = summaryData.workerStats.totalPresent || 0;\nconst totalHours = summaryData.workerStats.totalHours || 0;\nconst averageHours = totalWorkers > 0 ? (totalHours / totalWorkers).toFixed(1) : 0;\n\n// Format safety incident summary\nlet safetySection = '';\nif (safetyIncidents.length === 0) {\n  safetySection = 'No safety incidents reported today.\\n';\n} else {\n  safetySection = `${safetyIncidents.length} safety incident(s) reported:\\n`;\n  safetyIncidents.forEach(incident => {\n    safetySection += `- ${incident.type} (Severity: ${incident.severity}) at ${incident.location}\\n`;\n  });\n}\n\n// Format progress updates\nlet progressSection = '';\nif (progressUpdates.length === 0) {\n  progressSection = 'No progress updates recorded today.\\n';\n} else {\n  progressSection = 'Progress updates:\\n';\n  progressUpdates.forEach(update => {\n    progressSection += `- ${update.area}: ${update.description} (${update.completionPercentage}% complete)\\n`;\n  });\n}\n\n// Format material alerts\nlet materialsSection = '';\nif (materialAlerts.length === 0) {\n  materialsSection = 'No material stock alerts today.\\n';\n} else {\n  materialsSection = 'Material alerts:\\n';\n  materialAlerts.forEach(alert => {\n    materialsSection += `- ${alert.materialName}: ${alert.currentStock} ${alert.unitOfMeasure} remaining (${alert.daysRemaining} days supply)\\n`;\n  });\n}\n\n// Format environmental alerts\nlet environmentalSection = '';\nif (environmentalAlerts.length === 0) {\n  environmentalSection = 'No environmental alerts today.\\n';\n} else {\n  environmentalSection = 'Environmental alerts:\\n';\n  environmentalAlerts.forEach(alert => {\n    environmentalSection += `- ${alert.type}: ${alert.description}\\n`;\n  });\n}\n\nreturn {\n  date: date,\n  totalWorkers: totalWorkers,\n  totalHours: totalHours,\n  averageHours: averageHours,\n  safetySection: safetySection,\n  progressSection: progressSection,\n  materialsSection: materialsSection,\n  environmentalSection: environmentalSection,\n  projectId: summaryData.projectId,\n  projectName: summaryData.projectName\n};"
          }
        },
        {
          "id": "81",
          "name": "Send Daily Summary Report",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            840,
            1600
          ],
          "parameters": {
            "options": {},
            "to": "=project-team@construction-company.example",
            "subject": "=Daily Construction Site Summary - {{ $json.projectName }} - {{ $json.date }}",
            "text": "=DAILY CONSTRUCTION SITE SUMMARY\n\nProject: {{ $json.projectName }} (ID: {{ $json.projectId }})\nDate: {{ $json.date }}\n\nWORKFORCE SUMMARY:\n- Total Workers On Site: {{ $json.totalWorkers }}\n- Total Hours Logged: {{ $json.totalHours }}\n- Average Hours Per Worker: {{ $json.averageHours }}\n\nSAFETY SUMMARY:\n{{ $json.safetySection }}\n\nPROGRESS SUMMARY:\n{{ $json.progressSection }}\n\nMATERIAL INVENTORY ALERTS:\n{{ $json.materialsSection }}\n\nENVIRONMENTAL ALERTS:\n{{ $json.environmentalSection }}\n\nFor complete details, please log into the construction management system.\n\nThis is an automated daily summary report."
          }
        }
      ],
      "connections": {
        "Main Data Intake Webhook": {
          "main": [
            [
              {
                "node": "Is Safety Monitoring?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Safety Monitoring?": {
          "main": [
            [
              {
                "node": "Is Helmet Monitoring?",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Is Progress Tracking?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Progress Tracking?": {
          "main": [
            [
              {
                "node": "Is Drone Photography?",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Is Environmental Monitoring?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Environmental Monitoring?": {
          "main": [
            [
              {
                "node": "Is Weather Monitoring?",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Is Resource Management?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Resource Management?": {
          "main": [
            [
              {
                "node": "Is Material Tracking?",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Is Emergency Protocol?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Emergency Protocol?": {
          "main": [
            [
              {
                "node": "Process Emergency Protocol",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Is Security Patrol?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Helmet Monitoring?": {
          "main": [
            [
              {
                "node": "Process Helmet Data",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Is Seatbelt Monitoring?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Seatbelt Monitoring?": {
          "main": [
            [
              {
                "node": "Process Seatbelt Data",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Is Worker Tracking?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Worker Tracking?": {
          "main": [
            [
              {
                "node": "Process Worker Tracking",
                "type": "main",
                "index": 0
              }
            ],
            []
          ]
        },
        "Process Helmet Data": {
          "main": [
            [
              {
                "node": "Is Safety Violation?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Seatbelt Data": {
          "main": [
            [
              {
                "node": "Is Seatbelt Violation?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Worker Tracking": {
          "main": [
            [
              {
                "node": "Record Worker Entry/Exit",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Safety Violation?": {
          "main": [
            [
              {
                "node": "Record Helmet Violation",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Record Compliant Helmet Check",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Seatbelt Violation?": {
          "main": [
            [
              {
                "node": "Record Seatbelt Violation",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Record Compliant Seatbelt Check",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Record Helmet Violation": {
          "main": [
            [
              {
                "node": "Send Helmet Violation Alert",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Record Seatbelt Violation": {
          "main": [
            [
              {
                "node": "Send Seatbelt Violation Alert",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Drone Photography?": {
          "main": [
            [
              {
                "node": "Process Drone Photography",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Is Payment Documentation?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Payment Documentation?": {
          "main": [
            [
              {
                "node": "Process Payment Documentation",
                "type": "main",
                "index": 0
              }
            ],
            []
          ]
        },
        "Process Drone Photography": {
          "main": [
            [
              {
                "node": "Save Drone Photography Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Payment Documentation": {
          "main": [
            [
              {
                "node": "Save Payment Documentation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Save Drone Photography Data": {
          "main": [
            [
              {
                "node": "Notify About Drone Photography",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Save Payment Documentation": {
          "main": [
            [
              {
                "node": "Notify About Payment Documentation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Weather Monitoring?": {
          "main": [
            [
              {
                "node": "Process Weather Data",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Is Crane Wind Monitoring?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Crane Wind Monitoring?": {
          "main": [
            [
              {
                "node": "Process Crane Wind Data",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Is Vibration Monitoring?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Vibration Monitoring?": {
          "main": [
            [
              {
                "node": "Process Vibration Data",
                "type": "main",
                "index": 0
              }
            ],
            []
          ]
        },
        "Process Weather Data": {
          "main": [
            [
              {
                "node": "Save Weather Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Crane Wind Data": {
          "main": [
            [
              {
                "node": "Save Crane Wind Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Vibration Data": {
          "main": [
            [
              {
                "node": "Save Vibration Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Save Weather Data": {
          "main": [
            [
              {
                "node": "Weather Suitable for Concrete?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Weather Suitable for Concrete?": {
          "main": [
            [],
            [
              {
                "node": "Send Concrete Weather Alert",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Save Crane Wind Data": {
          "main": [
            [
              {
                "node": "Crane Shutdown Needed?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Crane Shutdown Needed?": {
          "main": [
            [
              {
                "node": "Trigger Crane Shutdown",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Crane Warning Needed?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Trigger Crane Shutdown": {
          "main": [
            [
              {
                "node": "Send Crane Shutdown Alert",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Crane Warning Needed?": {
          "main": [
            [
              {
                "node": "Send Crane Wind Warning",
                "type": "main",
                "index": 0
              }
            ],
            []
          ]
        },
        "Save Vibration Data": {
          "main": [
            [
              {
                "node": "Excessive Vibration?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Excessive Vibration?": {
          "main": [
            [
              {
                "node": "Send Vibration Alert",
                "type": "main",
                "index": 0
              }
            ],
            []
          ]
        },
        "Is Material Tracking?": {
          "main": [
            [
              {
                "node": "Process Material Data",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Is Security Patrol?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Security Patrol?": {
          "main": [
            [
              {
                "node": "Process Security Patrol Data",
                "type": "main",
                "index": 0
              }
            ],
            []
          ]
        },
        "Process Material Data": {
          "main": [
            [
              {
                "node": "Save Material Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Security Patrol Data": {
          "main": [
            [
              {
                "node": "Save Security Patrol Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Save Material Data": {
          "main": [
            [
              {
                "node": "Material Needs Reorder?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Material Needs Reorder?": {
          "main": [
            [
              {
                "node": "Create Material Order",
                "type": "main",
                "index": 0
              }
            ],
            []
          ]
        },
        "Create Material Order": {
          "main": [
            [
              {
                "node": "Send Material Order Alert",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Save Security Patrol Data": {
          "main": [
            [
              {
                "node": "Missed Checkpoints?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Missed Checkpoints?": {
          "main": [
            [
              {
                "node": "Send Missed Checkpoint Alert",
                "type": "main",
                "index": 0
              }
            ],
            []
          ]
        },
        "Process Emergency Protocol": {
          "main": [
            [
              {
                "node": "Record Emergency Incident",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Record Emergency Incident": {
          "main": [
            [
              {
                "node": "Is High Severity Emergency?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is High Severity Emergency?": {
          "main": [
            [
              {
                "node": "Send High Severity Emergency Alert",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Send Standard Emergency Alert",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send High Severity Emergency Alert": {
          "main": [
            [
              {
                "node": "Is Injury Emergency?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Standard Emergency Alert": {
          "main": [
            [
              {
                "node": "Is Injury Emergency?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Injury Emergency?": {
          "main": [
            [
              {
                "node": "Create Injury Incident Report",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Is Fire Emergency?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create Injury Incident Report": {
          "main": [
            [
              {
                "node": "Is Severe Injury?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Severe Injury?": {
          "main": [
            [
              {
                "node": "Request Ambulance Service",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Send Injury Report Notification",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Request Ambulance Service": {
          "main": [
            [
              {
                "node": "Send Medical Emergency Alert",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Fire Emergency?": {
          "main": [
            [
              {
                "node": "Request Fire Department",
                "type": "main",
                "index": 0
              }
            ],
            []
          ]
        },
        "Request Fire Department": {
          "main": [
            [
              {
                "node": "Trigger Site Evacuation Alarm",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Trigger Site Evacuation Alarm": {
          "main": [
            [
              {
                "node": "Send Fire Evacuation Alert",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Error Handler": {
          "main": [
            [
              {
                "node": "Process Error",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Error": {
          "main": [
            [
              {
                "node": "Log Error",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Log Error": {
          "main": [
            [
              {
                "node": "Send Error Alert",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Daily Summary Trigger": {
          "main": [
            [
              {
                "node": "Fetch Daily Summary Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Daily Summary Data": {
          "main": [
            [
              {
                "node": "Format Daily Summary",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Daily Summary": {
          "main": [
            [
              {
                "node": "Send Daily Summary Report",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "active": false,
      "settings": {},
      "versionId": "a608334b-e2ea-443b-92a6-7a4a74820a40",
      "meta": {
        "instanceId": "7221b4279d96e7954ef75d7c02b5031844eee3ca1705c75c15ad040f91c7b140",
        "userConfigurationRequired": {
          "hasRequiredValues": true,
          "analysis": [
            {
              "nodeId": "15",
              "nodeName": "Record Helmet Violation",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "url",
                  "description": "API endpoint URL",
                  "example": "https://api.yourservice.com/endpoint",
                  "type": "endpoint"
                }
              ]
            },
            {
              "nodeId": "16",
              "nodeName": "Record Seatbelt Violation",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "url",
                  "description": "API endpoint URL",
                  "example": "https://api.yourservice.com/endpoint",
                  "type": "endpoint"
                }
              ]
            },
            {
              "nodeId": "17",
              "nodeName": "Send Helmet Violation Alert",
              "nodeType": "n8n-nodes-base.emailSend",
              "missingValues": [
                {
                  "parameter": "fromEmail",
                  "description": "Sender email address",
                  "example": "noreply@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "toEmail",
                  "description": "Recipient email address",
                  "example": "admin@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "smtp",
                  "description": "SMTP server configuration",
                  "type": "configuration",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "18",
              "nodeName": "Send Seatbelt Violation Alert",
              "nodeType": "n8n-nodes-base.emailSend",
              "missingValues": [
                {
                  "parameter": "fromEmail",
                  "description": "Sender email address",
                  "example": "noreply@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "toEmail",
                  "description": "Recipient email address",
                  "example": "admin@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "smtp",
                  "description": "SMTP server configuration",
                  "type": "configuration",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "19",
              "nodeName": "Record Compliant Helmet Check",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "url",
                  "description": "API endpoint URL",
                  "example": "https://api.yourservice.com/endpoint",
                  "type": "endpoint"
                }
              ]
            },
            {
              "nodeId": "20",
              "nodeName": "Record Compliant Seatbelt Check",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "url",
                  "description": "API endpoint URL",
                  "example": "https://api.yourservice.com/endpoint",
                  "type": "endpoint"
                }
              ]
            },
            {
              "nodeId": "21",
              "nodeName": "Record Worker Entry/Exit",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "url",
                  "description": "API endpoint URL",
                  "example": "https://api.yourservice.com/endpoint",
                  "type": "endpoint"
                }
              ]
            },
            {
              "nodeId": "26",
              "nodeName": "Save Drone Photography Data",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "url",
                  "description": "API endpoint URL",
                  "example": "https://api.yourservice.com/endpoint",
                  "type": "endpoint"
                }
              ]
            },
            {
              "nodeId": "27",
              "nodeName": "Save Payment Documentation",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "url",
                  "description": "API endpoint URL",
                  "example": "https://api.yourservice.com/endpoint",
                  "type": "endpoint"
                }
              ]
            },
            {
              "nodeId": "28",
              "nodeName": "Notify About Drone Photography",
              "nodeType": "n8n-nodes-base.emailSend",
              "missingValues": [
                {
                  "parameter": "fromEmail",
                  "description": "Sender email address",
                  "example": "noreply@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "toEmail",
                  "description": "Recipient email address",
                  "example": "admin@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "smtp",
                  "description": "SMTP server configuration",
                  "type": "configuration",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "29",
              "nodeName": "Notify About Payment Documentation",
              "nodeType": "n8n-nodes-base.emailSend",
              "missingValues": [
                {
                  "parameter": "fromEmail",
                  "description": "Sender email address",
                  "example": "noreply@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "toEmail",
                  "description": "Recipient email address",
                  "example": "admin@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "smtp",
                  "description": "SMTP server configuration",
                  "type": "configuration",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "36",
              "nodeName": "Save Weather Data",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "url",
                  "description": "API endpoint URL",
                  "example": "https://api.yourservice.com/endpoint",
                  "type": "endpoint"
                }
              ]
            },
            {
              "nodeId": "38",
              "nodeName": "Send Concrete Weather Alert",
              "nodeType": "n8n-nodes-base.emailSend",
              "missingValues": [
                {
                  "parameter": "fromEmail",
                  "description": "Sender email address",
                  "example": "noreply@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "toEmail",
                  "description": "Recipient email address",
                  "example": "admin@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "smtp",
                  "description": "SMTP server configuration",
                  "type": "configuration",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "39",
              "nodeName": "Save Crane Wind Data",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "url",
                  "description": "API endpoint URL",
                  "example": "https://api.yourservice.com/endpoint",
                  "type": "endpoint"
                }
              ]
            },
            {
              "nodeId": "41",
              "nodeName": "Trigger Crane Shutdown",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "url",
                  "description": "API endpoint URL",
                  "example": "https://api.yourservice.com/endpoint",
                  "type": "endpoint"
                }
              ]
            },
            {
              "nodeId": "42",
              "nodeName": "Send Crane Shutdown Alert",
              "nodeType": "n8n-nodes-base.emailSend",
              "missingValues": [
                {
                  "parameter": "fromEmail",
                  "description": "Sender email address",
                  "example": "noreply@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "toEmail",
                  "description": "Recipient email address",
                  "example": "admin@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "smtp",
                  "description": "SMTP server configuration",
                  "type": "configuration",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "44",
              "nodeName": "Send Crane Wind Warning",
              "nodeType": "n8n-nodes-base.emailSend",
              "missingValues": [
                {
                  "parameter": "fromEmail",
                  "description": "Sender email address",
                  "example": "noreply@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "toEmail",
                  "description": "Recipient email address",
                  "example": "admin@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "smtp",
                  "description": "SMTP server configuration",
                  "type": "configuration",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "45",
              "nodeName": "Save Vibration Data",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "url",
                  "description": "API endpoint URL",
                  "example": "https://api.yourservice.com/endpoint",
                  "type": "endpoint"
                }
              ]
            },
            {
              "nodeId": "47",
              "nodeName": "Send Vibration Alert",
              "nodeType": "n8n-nodes-base.emailSend",
              "missingValues": [
                {
                  "parameter": "fromEmail",
                  "description": "Sender email address",
                  "example": "noreply@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "toEmail",
                  "description": "Recipient email address",
                  "example": "admin@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "smtp",
                  "description": "SMTP server configuration",
                  "type": "configuration",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "52",
              "nodeName": "Save Material Data",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "url",
                  "description": "API endpoint URL",
                  "example": "https://api.yourservice.com/endpoint",
                  "type": "endpoint"
                }
              ]
            },
            {
              "nodeId": "54",
              "nodeName": "Create Material Order",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "url",
                  "description": "API endpoint URL",
                  "example": "https://api.yourservice.com/endpoint",
                  "type": "endpoint"
                }
              ]
            },
            {
              "nodeId": "55",
              "nodeName": "Send Material Order Alert",
              "nodeType": "n8n-nodes-base.emailSend",
              "missingValues": [
                {
                  "parameter": "fromEmail",
                  "description": "Sender email address",
                  "example": "noreply@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "toEmail",
                  "description": "Recipient email address",
                  "example": "admin@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "smtp",
                  "description": "SMTP server configuration",
                  "type": "configuration",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "56",
              "nodeName": "Save Security Patrol Data",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "url",
                  "description": "API endpoint URL",
                  "example": "https://api.yourservice.com/endpoint",
                  "type": "endpoint"
                }
              ]
            },
            {
              "nodeId": "58",
              "nodeName": "Send Missed Checkpoint Alert",
              "nodeType": "n8n-nodes-base.emailSend",
              "missingValues": [
                {
                  "parameter": "fromEmail",
                  "description": "Sender email address",
                  "example": "noreply@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "toEmail",
                  "description": "Recipient email address",
                  "example": "admin@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "smtp",
                  "description": "SMTP server configuration",
                  "type": "configuration",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "60",
              "nodeName": "Record Emergency Incident",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "url",
                  "description": "API endpoint URL",
                  "example": "https://api.yourservice.com/endpoint",
                  "type": "endpoint"
                }
              ]
            },
            {
              "nodeId": "62",
              "nodeName": "Send High Severity Emergency Alert",
              "nodeType": "n8n-nodes-base.emailSend",
              "missingValues": [
                {
                  "parameter": "fromEmail",
                  "description": "Sender email address",
                  "example": "noreply@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "toEmail",
                  "description": "Recipient email address",
                  "example": "admin@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "smtp",
                  "description": "SMTP server configuration",
                  "type": "configuration",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "63",
              "nodeName": "Send Standard Emergency Alert",
              "nodeType": "n8n-nodes-base.emailSend",
              "missingValues": [
                {
                  "parameter": "fromEmail",
                  "description": "Sender email address",
                  "example": "noreply@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "toEmail",
                  "description": "Recipient email address",
                  "example": "admin@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "smtp",
                  "description": "SMTP server configuration",
                  "type": "configuration",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "65",
              "nodeName": "Create Injury Incident Report",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "url",
                  "description": "API endpoint URL",
                  "example": "https://api.yourservice.com/endpoint",
                  "type": "endpoint"
                }
              ]
            },
            {
              "nodeId": "67",
              "nodeName": "Request Ambulance Service",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "url",
                  "description": "API endpoint URL",
                  "example": "https://api.yourservice.com/endpoint",
                  "type": "endpoint"
                }
              ]
            },
            {
              "nodeId": "68",
              "nodeName": "Send Medical Emergency Alert",
              "nodeType": "n8n-nodes-base.emailSend",
              "missingValues": [
                {
                  "parameter": "fromEmail",
                  "description": "Sender email address",
                  "example": "noreply@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "toEmail",
                  "description": "Recipient email address",
                  "example": "admin@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "smtp",
                  "description": "SMTP server configuration",
                  "type": "configuration",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "69",
              "nodeName": "Send Injury Report Notification",
              "nodeType": "n8n-nodes-base.emailSend",
              "missingValues": [
                {
                  "parameter": "fromEmail",
                  "description": "Sender email address",
                  "example": "noreply@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "toEmail",
                  "description": "Recipient email address",
                  "example": "admin@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "smtp",
                  "description": "SMTP server configuration",
                  "type": "configuration",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "71",
              "nodeName": "Request Fire Department",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "url",
                  "description": "API endpoint URL",
                  "example": "https://api.yourservice.com/endpoint",
                  "type": "endpoint"
                }
              ]
            },
            {
              "nodeId": "72",
              "nodeName": "Trigger Site Evacuation Alarm",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "url",
                  "description": "API endpoint URL",
                  "example": "https://api.yourservice.com/endpoint",
                  "type": "endpoint"
                }
              ]
            },
            {
              "nodeId": "73",
              "nodeName": "Send Fire Evacuation Alert",
              "nodeType": "n8n-nodes-base.emailSend",
              "missingValues": [
                {
                  "parameter": "fromEmail",
                  "description": "Sender email address",
                  "example": "noreply@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "toEmail",
                  "description": "Recipient email address",
                  "example": "admin@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "smtp",
                  "description": "SMTP server configuration",
                  "type": "configuration",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "76",
              "nodeName": "Log Error",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "url",
                  "description": "API endpoint URL",
                  "example": "https://api.yourservice.com/endpoint",
                  "type": "endpoint"
                }
              ]
            },
            {
              "nodeId": "77",
              "nodeName": "Send Error Alert",
              "nodeType": "n8n-nodes-base.emailSend",
              "missingValues": [
                {
                  "parameter": "fromEmail",
                  "description": "Sender email address",
                  "example": "noreply@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "toEmail",
                  "description": "Recipient email address",
                  "example": "admin@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "smtp",
                  "description": "SMTP server configuration",
                  "type": "configuration",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "79",
              "nodeName": "Fetch Daily Summary Data",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "url",
                  "description": "API endpoint URL",
                  "example": "https://api.yourservice.com/endpoint",
                  "type": "endpoint"
                }
              ]
            },
            {
              "nodeId": "81",
              "nodeName": "Send Daily Summary Report",
              "nodeType": "n8n-nodes-base.emailSend",
              "missingValues": [
                {
                  "parameter": "fromEmail",
                  "description": "Sender email address",
                  "example": "noreply@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "toEmail",
                  "description": "Recipient email address",
                  "example": "admin@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "smtp",
                  "description": "SMTP server configuration",
                  "type": "configuration",
                  "sensitive": true
                }
              ]
            }
          ],
          "report": "## User Configuration Required\n\nThe following configurations need to be set up:\n\n### ⚙️ Other Configurations\n\n#### Record Helmet Violation\n- **url**: API endpoint URL\n  Example: `https://api.yourservice.com/endpoint`\n\n#### Record Seatbelt Violation\n- **url**: API endpoint URL\n  Example: `https://api.yourservice.com/endpoint`\n\n#### Send Helmet Violation Alert\n- **fromEmail**: Sender email address\n  Example: `noreply@yourcompany.com`\n\n- **toEmail**: Recipient email address\n  Example: `admin@yourcompany.com`\n\n- **smtp**: SMTP server configuration\n\n#### Send Seatbelt Violation Alert\n- **fromEmail**: Sender email address\n  Example: `noreply@yourcompany.com`\n\n- **toEmail**: Recipient email address\n  Example: `admin@yourcompany.com`\n\n- **smtp**: SMTP server configuration\n\n#### Record Compliant Helmet Check\n- **url**: API endpoint URL\n  Example: `https://api.yourservice.com/endpoint`\n\n#### Record Compliant Seatbelt Check\n- **url**: API endpoint URL\n  Example: `https://api.yourservice.com/endpoint`\n\n#### Record Worker Entry/Exit\n- **url**: API endpoint URL\n  Example: `https://api.yourservice.com/endpoint`\n\n#### Save Drone Photography Data\n- **url**: API endpoint URL\n  Example: `https://api.yourservice.com/endpoint`\n\n#### Save Payment Documentation\n- **url**: API endpoint URL\n  Example: `https://api.yourservice.com/endpoint`\n\n#### Notify About Drone Photography\n- **fromEmail**: Sender email address\n  Example: `noreply@yourcompany.com`\n\n- **toEmail**: Recipient email address\n  Example: `admin@yourcompany.com`\n\n- **smtp**: SMTP server configuration\n\n#### Notify About Payment Documentation\n- **fromEmail**: Sender email address\n  Example: `noreply@yourcompany.com`\n\n- **toEmail**: Recipient email address\n  Example: `admin@yourcompany.com`\n\n- **smtp**: SMTP server configuration\n\n#### Save Weather Data\n- **url**: API endpoint URL\n  Example: `https://api.yourservice.com/endpoint`\n\n#### Send Concrete Weather Alert\n- **fromEmail**: Sender email address\n  Example: `noreply@yourcompany.com`\n\n- **toEmail**: Recipient email address\n  Example: `admin@yourcompany.com`\n\n- **smtp**: SMTP server configuration\n\n#### Save Crane Wind Data\n- **url**: API endpoint URL\n  Example: `https://api.yourservice.com/endpoint`\n\n#### Trigger Crane Shutdown\n- **url**: API endpoint URL\n  Example: `https://api.yourservice.com/endpoint`\n\n#### Send Crane Shutdown Alert\n- **fromEmail**: Sender email address\n  Example: `noreply@yourcompany.com`\n\n- **toEmail**: Recipient email address\n  Example: `admin@yourcompany.com`\n\n- **smtp**: SMTP server configuration\n\n#### Send Crane Wind Warning\n- **fromEmail**: Sender email address\n  Example: `noreply@yourcompany.com`\n\n- **toEmail**: Recipient email address\n  Example: `admin@yourcompany.com`\n\n- **smtp**: SMTP server configuration\n\n#### Save Vibration Data\n- **url**: API endpoint URL\n  Example: `https://api.yourservice.com/endpoint`\n\n#### Send Vibration Alert\n- **fromEmail**: Sender email address\n  Example: `noreply@yourcompany.com`\n\n- **toEmail**: Recipient email address\n  Example: `admin@yourcompany.com`\n\n- **smtp**: SMTP server configuration\n\n#### Save Material Data\n- **url**: API endpoint URL\n  Example: `https://api.yourservice.com/endpoint`\n\n#### Create Material Order\n- **url**: API endpoint URL\n  Example: `https://api.yourservice.com/endpoint`\n\n#### Send Material Order Alert\n- **fromEmail**: Sender email address\n  Example: `noreply@yourcompany.com`\n\n- **toEmail**: Recipient email address\n  Example: `admin@yourcompany.com`\n\n- **smtp**: SMTP server configuration\n\n#### Save Security Patrol Data\n- **url**: API endpoint URL\n  Example: `https://api.yourservice.com/endpoint`\n\n#### Send Missed Checkpoint Alert\n- **fromEmail**: Sender email address\n  Example: `noreply@yourcompany.com`\n\n- **toEmail**: Recipient email address\n  Example: `admin@yourcompany.com`\n\n- **smtp**: SMTP server configuration\n\n#### Record Emergency Incident\n- **url**: API endpoint URL\n  Example: `https://api.yourservice.com/endpoint`\n\n#### Send High Severity Emergency Alert\n- **fromEmail**: Sender email address\n  Example: `noreply@yourcompany.com`\n\n- **toEmail**: Recipient email address\n  Example: `admin@yourcompany.com`\n\n- **smtp**: SMTP server configuration\n\n#### Send Standard Emergency Alert\n- **fromEmail**: Sender email address\n  Example: `noreply@yourcompany.com`\n\n- **toEmail**: Recipient email address\n  Example: `admin@yourcompany.com`\n\n- **smtp**: SMTP server configuration\n\n#### Create Injury Incident Report\n- **url**: API endpoint URL\n  Example: `https://api.yourservice.com/endpoint`\n\n#### Request Ambulance Service\n- **url**: API endpoint URL\n  Example: `https://api.yourservice.com/endpoint`\n\n#### Send Medical Emergency Alert\n- **fromEmail**: Sender email address\n  Example: `noreply@yourcompany.com`\n\n- **toEmail**: Recipient email address\n  Example: `admin@yourcompany.com`\n\n- **smtp**: SMTP server configuration\n\n#### Send Injury Report Notification\n- **fromEmail**: Sender email address\n  Example: `noreply@yourcompany.com`\n\n- **toEmail**: Recipient email address\n  Example: `admin@yourcompany.com`\n\n- **smtp**: SMTP server configuration\n\n#### Request Fire Department\n- **url**: API endpoint URL\n  Example: `https://api.yourservice.com/endpoint`\n\n#### Trigger Site Evacuation Alarm\n- **url**: API endpoint URL\n  Example: `https://api.yourservice.com/endpoint`\n\n#### Send Fire Evacuation Alert\n- **fromEmail**: Sender email address\n  Example: `noreply@yourcompany.com`\n\n- **toEmail**: Recipient email address\n  Example: `admin@yourcompany.com`\n\n- **smtp**: SMTP server configuration\n\n#### Log Error\n- **url**: API endpoint URL\n  Example: `https://api.yourservice.com/endpoint`\n\n#### Send Error Alert\n- **fromEmail**: Sender email address\n  Example: `noreply@yourcompany.com`\n\n- **toEmail**: Recipient email address\n  Example: `admin@yourcompany.com`\n\n- **smtp**: SMTP server configuration\n\n#### Fetch Daily Summary Data\n- **url**: API endpoint URL\n  Example: `https://api.yourservice.com/endpoint`\n\n#### Send Daily Summary Report\n- **fromEmail**: Sender email address\n  Example: `noreply@yourcompany.com`\n\n- **toEmail**: Recipient email address\n  Example: `admin@yourcompany.com`\n\n- **smtp**: SMTP server configuration\n\n\n### 📋 Next Steps:\n1. Set up credentials in n8n (Settings → Credentials)\n2. Update workflow nodes with your specific values\n3. Test each connection before running the full workflow\n"
        }
      },
      "id": "e7xucorjz8s",
      "tags": [],
      "pinData": {}
    },
    "provider": "anthropic",
    "model": "claude-3-7-sonnet-20250219",
    "timestamp": "2025-07-23T03:15:30.461Z",
    "nodeCount": 81,
    "connectionCount": 63
  },
  {
    "id": "1e88c3d4-710e-4351-90bc-c7dbf73536ef",
    "prompt": "To implement a comprehensive workflow for construction site safety and progress monitoring, we need to consider the orchestration of various features and ensure that all parts of the system are interconnected. Here's how we can structure the workflow using n8n nodes:\n\n### Main Entry Point\n\n1. **n8n-nodes-base.webhook**\n   - This node will serve as the main entry point to trigger the workflow for real-time monitoring events. \n\n### Central Router\n\n2. **n8n-nodes-base.switch**\n   - Route data to different branches based on the type of event (e.g., safety monitoring, progress tracking, etc.).\n\n### Feature Branches\n\n#### Helmet and Seat Belt Monitoring\n\n3. **n8n-nodes-base.httpRequest** (Camera API)\n   - Send requests to the camera system to monitor helmet and seat belt compliance.\n4. **n8n-nodes-base.code** (Process Compliance Data)\n   - Analyze data to determine compliance.\n5. **n8n-nodes-base.emailSend** (Alert Notifications)\n   - Send alerts if non-compliance is detected.\n\n#### Daily Worker Entry and Exit\n\n6. **n8n-nodes-base.httpRequest** (Timekeeping System API)\n   - Fetch daily worker entry and exit data.\n7. **n8n-nodes-base.code** (Calculate Time)\n   - Process data to calculate total hours worked.\n\n#### Weekly Progress Photography\n\n8. **n8n-nodes-base.cron** (Weekly Trigger)\n   - Schedule drone photography every week.\n9. **n8n-nodes-base.httpRequest** (Drone API)\n   - Trigger drone to take progress photos.\n\n#### Weather Monitoring\n\n10. **n8n-nodes-base.httpRequest** (Weather API)\n    - Fetch current weather data.\n11. **n8n-nodes-base.switch**\n    - Check if conditions are suitable for concrete pouring.\n\n#### Tower Crane Wind Sensors\n\n12. **n8n-nodes-base.mqtt** (Wind Sensor Data)\n    - Subscribe to tower crane wind sensor data.\n13. **n8n-nodes-base.switch**\n    - Automatically shut down crane if wind speeds exceed safety thresholds.\n\n#### Material Stock Tracking\n\n14. **n8n-nodes-base.httpRequest** (Inventory System API)\n    - Track material stock levels.\n15. **n8n-nodes-base.code** (JIT Ordering)\n    - Automatically place orders if stock falls below a threshold.\n\n#### Emergency Protocol\n\n16. **n8n-nodes-base.errorTrigger**\n    - Trigger emergency protocols in case of workplace accidents.\n17. **n8n-nodes-base.emailSend** (Emergency Alerts)\n    - Notify relevant personnel and authorities.\n\n#### Night Security Patrol\n\n18. **n8n-nodes-base.httpRequest** (Security System API)\n    - Track night security patrol routes.\n19. **n8n-nodes-base.code** (Route Analysis)\n    - Ensure all routes are covered.\n\n#### Vibration Sensor Monitoring\n\n20. **n8n-nodes-base.mqtt** (Vibration Sensor Data)\n    - Monitor neighboring building vibrations.\n21. **n8n-nodes-base.switch**\n    - Trigger alerts if vibration exceeds safe levels.\n\n#### Contractor Progress Payment\n\n22. **n8n-nodes-base.httpRequest** (Photo Documentation API)\n    - Document progress for contractor payments.\n23. **n8n-nodes-base.code** (Verify Documentation)\n    - Ensure photo documentation meets requirements.\n\n### Central Merge Node\n\n24. **n8n-nodes-base.merge**\n   - Combine results from all feature branches to create a consolidated report or further actions.\n\n### Final Processing/Response\n\n25. **n8n-nodes-base.httpRequest** (Reporting API)\n   - Send consolidated data to the reporting system.\n26. **n8n-nodes-base.emailSend** (Summary Email)\n   - Send a summary email to stakeholders.\n\n### Error Handling\n\n27. **n8n-nodes-base.errorTrigger**\n    - Global error handling to catch any failures and notify the appropriate teams via email.\n\n### Validation Checklist\n\n- ☑ All nodes are properly connected and no orphaned nodes exist.\n- ☑ Each branch is properly routed and merged.\n- ☑ Comprehensive error handling is implemented.\n- ☑ Each feature is addressed with specific nodes.\n- ☑ Alerts and notifications are configured for real-time monitoring.\n- ☑ Weather and sensor data are integrated for safety protocols.\n- ☑ Scheduled tasks (like drone photography) are set up using Cron nodes.\n- ☑ Data flows logically between nodes, and API rate limits are considered with delay nodes if needed.\n\nThis structured workflow ensures that all aspects of construction site safety and progress monitoring are efficiently managed and integrated.",
    "workflow": {
      "name": "Construction Site Safety and Progress Monitoring",
      "nodes": [
        {
          "id": "1",
          "name": "Main Webhook Trigger",
          "type": "n8n-nodes-base.webhook",
          "typeVersion": 1,
          "position": [
            100,
            300
          ],
          "parameters": {
            "httpMethod": "POST",
            "options": {
              "responseMode": "responseNode"
            },
            "path": "construction-monitoring"
          },
          "webhookId": "bdc30e22-c84d-4c1a-8e42-d96a9b33ab23"
        },
        {
          "id": "2",
          "name": "Is Real-time Event?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            300,
            300
          ],
          "parameters": {
            "conditions": {
              "boolean": [],
              "string": [
                {
                  "value1": "={{ $json.eventType }}",
                  "operation": "equals",
                  "value2": "safety_alert"
                },
                {
                  "value1": "={{ $json.eventType }}",
                  "operation": "equals",
                  "value2": "worker_tracking"
                },
                {
                  "value1": "={{ $json.eventType }}",
                  "operation": "equals",
                  "value2": "material_tracking"
                },
                {
                  "value1": "={{ $json.eventType }}",
                  "operation": "equals",
                  "value2": "emergency"
                }
              ]
            },
            "combineOperation": "any",
            "options": {}
          }
        },
        {
          "id": "3",
          "name": "Weekly Progress Schedule",
          "type": "n8n-nodes-base.cron",
          "typeVersion": 1,
          "position": [
            100,
            600
          ],
          "parameters": {
            "triggerTimes": {
              "item": [
                {
                  "mode": "everyWeek",
                  "weekDay": 1,
                  "hour": 8,
                  "minute": 0
                }
              ]
            }
          }
        },
        {
          "id": "4",
          "name": "Daily Weather Check",
          "type": "n8n-nodes-base.cron",
          "typeVersion": 1,
          "position": [
            100,
            750
          ],
          "parameters": {
            "triggerTimes": {
              "item": [
                {
                  "mode": "everyDay",
                  "hour": 6,
                  "minute": 0
                }
              ]
            }
          }
        },
        {
          "id": "5",
          "name": "Route Real-time Events",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            500,
            300
          ],
          "parameters": {
            "conditions": {
              "boolean": [],
              "string": [
                {
                  "value1": "={{ $json.value }}",
                  "operation": "equals",
                  "value2": "safety_alert"
                }
              ],
              "number": []
            },
            "fallbackOutput": 4
          }
        },
        {
          "id": "6",
          "name": "Request Camera Compliance Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            700,
            100
          ],
          "parameters": {
            "method": "POST",
            "options": {
              "timeout": 5000
            },
            "url": "={{ $json.cameraApiUrl || 'https://api.construction-cameras.example/compliance-check' }}",
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"siteId\",\"value\":\"={{ $json.siteId }}\"},{\"name\":\"timestamp\",\"value\":\"={{ $now.toISOString() }}\"},{\"name\":\"cameraId\",\"value\":\"={{ $json.cameraId }}\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "7",
          "name": "Process Safety Compliance",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            100
          ],
          "parameters": {
            "functionCode": "// Process compliance data from camera system\nconst complianceData = $input.item.json.complianceResults || [];\nconst violations = [];\n\n// Check for violations\nfor (const worker of complianceData) {\n  const issues = [];\n  \n  if (!worker.wearingHelmet) {\n    issues.push('Missing helmet');\n  }\n  \n  if (worker.inVehicle && !worker.seatbeltFastened) {\n    issues.push('Seatbelt not fastened');\n  }\n  \n  if (issues.length > 0) {\n    violations.push({\n      workerId: worker.id,\n      workerName: worker.name,\n      location: worker.location,\n      timestamp: worker.timestamp,\n      issues: issues,\n      imageUrl: worker.imageUrl\n    });\n  }\n}\n\nreturn {\n  totalWorkers: complianceData.length,\n  violationsCount: violations.length,\n  violations: violations,\n  complianceRate: complianceData.length > 0 ? \n    ((complianceData.length - violations.length) / complianceData.length * 100).toFixed(2) + '%' : \n    '100%',\n  timestamp: new Date().toISOString(),\n  requiresAlert: violations.length > 0\n};"
          }
        },
        {
          "id": "8",
          "name": "Safety Violations Found?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1100,
            100
          ],
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $json.requiresAlert }}",
                  "value2": true
                }
              ],
              "string": []
            }
          }
        },
        {
          "id": "9",
          "name": "Send Safety Violation Alert",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            1300,
            0
          ],
          "parameters": {
            "options": {
              "attachments": "={{ $json.violations.map(v => ({url: v.imageUrl, name: 'violation_'+v.workerId+'.jpg'})) }}"
            },
            "subject": "SAFETY ALERT: {{ $json.violationsCount }} Safety Violations Detected",
            "text": "=Safety Alert for Site ID: {{ $json.siteId }}\n\nTime: {{ $json.timestamp }}\n\nTotal Workers Monitored: {{ $json.totalWorkers }}\nViolations Detected: {{ $json.violationsCount }}\nCompliance Rate: {{ $json.complianceRate }}\n\nViolation Details:\n{% for violation in $json.violations %}\n- Worker: {{ violation.workerName }} (ID: {{ violation.workerId }})\n  Location: {{ violation.location }}\n  Issues: {{ violation.issues.join(', ') }}\n  Image: {{ violation.imageUrl }}\n{% endfor %}\n\nPlease address these safety violations immediately.\n\nThis is an automated message from the Construction Site Safety Monitoring System.",
            "toRecipients": "[object Object]"
          }
        },
        {
          "id": "10",
          "name": "Fetch Worker Time Tracking",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            700,
            300
          ],
          "parameters": {
            "method": "GET",
            "options": {},
            "url": "={{ $json.timeTrackingApiUrl || 'https://api.construction-timetracking.example/daily-log' }}",
            "sendQuery": true,
            "queryParameters": {
              "parameters": [
                {
                  "name": "siteId",
                  "value": "={{ $json.siteId }}"
                },
                {
                  "name": "date",
                  "value": "={{ $now.toISOString().split('T')[0] }}"
                }
              ]
            }
          }
        },
        {
          "id": "11",
          "name": "Process Worker Time Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            300
          ],
          "parameters": {
            "functionCode": "// Process worker time tracking data\nconst workers = $input.item.json.workers || [];\nconst date = $input.item.json.date || new Date().toISOString().split('T')[0];\n\n// Calculate hours and identify issues\nconst processedWorkers = workers.map(worker => {\n  // Calculate total hours\n  let totalHours = 0;\n  const entries = [];\n  \n  if (worker.entries && worker.entries.length > 0) {\n    for (let i = 0; i < worker.entries.length; i += 2) {\n      if (i + 1 < worker.entries.length) {\n        const entry = worker.entries[i];\n        const exit = worker.entries[i + 1];\n        \n        const entryTime = new Date(entry.timestamp).getTime();\n        const exitTime = new Date(exit.timestamp).getTime();\n        const hours = (exitTime - entryTime) / (1000 * 60 * 60);\n        \n        totalHours += hours;\n        \n        entries.push({\n          entry: entry.timestamp,\n          exit: exit.timestamp,\n          hours: hours.toFixed(2),\n          location: entry.location\n        });\n      }\n    }\n  }\n  \n  // Check for issues\n  const issues = [];\n  if (totalHours > 12) {\n    issues.push('Exceeded maximum daily hours (12)');\n  }\n  if (worker.entries && worker.entries.length % 2 !== 0) {\n    issues.push('Missing exit scan');\n  }\n  \n  return {\n    workerId: worker.id,\n    name: worker.name,\n    totalHours: totalHours.toFixed(2),\n    entries: entries,\n    issues: issues,\n    requiresAttention: issues.length > 0\n  };\n});\n\n// Identify workers with issues\nconst workersWithIssues = processedWorkers.filter(w => w.requiresAttention);\n\nreturn {\n  date: date,\n  totalWorkers: workers.length,\n  totalHours: processedWorkers.reduce((sum, w) => sum + parseFloat(w.totalHours), 0).toFixed(2),\n  averageHours: (processedWorkers.reduce((sum, w) => sum + parseFloat(w.totalHours), 0) / (workers.length || 1)).toFixed(2),\n  workers: processedWorkers,\n  workersWithIssues: workersWithIssues,\n  requiresAttention: workersWithIssues.length > 0\n};"
          }
        },
        {
          "id": "12",
          "name": "Worker Time Issues?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1100,
            300
          ],
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $json.requiresAttention }}",
                  "value2": true
                }
              ],
              "string": []
            }
          }
        },
        {
          "id": "13",
          "name": "Send Worker Time Alert",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            1300,
            200
          ],
          "parameters": {
            "options": {},
            "subject": "Worker Time Tracking Issues: {{ $json.date }}",
            "text": "=Project Manager Alert for Site ID: {{ $json.siteId }}\n\nDate: {{ $json.date }}\n\nTotal Workers: {{ $json.totalWorkers }}\nTotal Hours: {{ $json.totalHours }}\nAverage Hours: {{ $json.averageHours }}\n\nWorkers Requiring Attention:\n{% for worker in $json.workersWithIssues %}\n- {{ worker.name }} (ID: {{ worker.workerId }})\n  Total Hours: {{ worker.totalHours }}\n  Issues: {{ worker.issues.join(', ') }}\n{% endfor %}\n\nPlease review these time tracking issues.\n\nThis is an automated message from the Construction Site Monitoring System.",
            "toRecipients": "[object Object]"
          }
        },
        {
          "id": "14",
          "name": "Fetch Material Inventory",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            700,
            500
          ],
          "parameters": {
            "method": "GET",
            "options": {},
            "url": "={{ $json.inventoryApiUrl || 'https://api.construction-inventory.example/materials' }}",
            "sendQuery": true,
            "queryParameters": {
              "parameters": [
                {
                  "name": "siteId",
                  "value": "={{ $json.siteId }}"
                }
              ]
            }
          }
        },
        {
          "id": "15",
          "name": "Process Material Inventory",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            500
          ],
          "parameters": {
            "functionCode": "// Process material inventory data\nconst materials = $input.item.json.materials || [];\n\n// Check for low stock items\nconst lowStockItems = materials.filter(item => {\n  return item.currentStock <= item.minThreshold;\n});\n\n// Calculate items that need ordering\nconst itemsToOrder = lowStockItems.map(item => {\n  const orderAmount = item.optimalStock - item.currentStock;\n  return {\n    materialId: item.id,\n    name: item.name,\n    currentStock: item.currentStock,\n    minThreshold: item.minThreshold,\n    optimalStock: item.optimalStock,\n    unit: item.unit,\n    orderAmount: orderAmount,\n    estimatedCost: orderAmount * (item.unitCost || 0),\n    supplier: item.preferredSupplier,\n    supplierContact: item.supplierContact\n  };\n});\n\nreturn {\n  totalMaterials: materials.length,\n  materialsInStock: materials.filter(m => m.currentStock > m.minThreshold).length,\n  lowStockCount: lowStockItems.length,\n  lowStockItems: lowStockItems,\n  itemsToOrder: itemsToOrder,\n  requiresOrdering: itemsToOrder.length > 0,\n  totalOrderCost: itemsToOrder.reduce((sum, item) => sum + item.estimatedCost, 0).toFixed(2)\n};"
          }
        },
        {
          "id": "16",
          "name": "Materials Need Ordering?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1100,
            500
          ],
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $json.requiresOrdering }}",
                  "value2": true
                }
              ],
              "string": []
            }
          }
        },
        {
          "id": "17",
          "name": "Send Material Order Request",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            1300,
            400
          ],
          "parameters": {
            "options": {},
            "subject": "Material Order Request: {{ $json.lowStockCount }} Items Below Threshold",
            "text": "=Procurement Alert for Site ID: {{ $json.siteId }}\n\nDate: {{ $now.toISOString().split('T')[0] }}\n\nMaterials requiring orders: {{ $json.lowStockCount }}\nEstimated total cost: ${{ $json.totalOrderCost }}\n\nItems to Order:\n{% for item in $json.itemsToOrder %}\n- {{ item.name }}\n  Current Stock: {{ item.currentStock }} {{ item.unit }}\n  Order Amount: {{ item.orderAmount }} {{ item.unit }}\n  Estimated Cost: ${{ item.estimatedCost }}\n  Supplier: {{ item.supplier }}\n  Contact: {{ item.supplierContact }}\n{% endfor %}\n\nPlease process these orders to avoid project delays.\n\nThis is an automated message from the Construction Site Monitoring System.",
            "toRecipients": "[object Object]"
          }
        },
        {
          "id": "18",
          "name": "Schedule Drone Photography",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            300,
            600
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "={{ $json.droneApiUrl || 'https://api.construction-drones.example/schedule-flight' }}",
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"siteId\",\"value\":\"={{ $json.siteId || '123' }}\"},{\"name\":\"scheduleTime\",\"value\":\"={{ $now.toISOString() }}\"},{\"name\":\"flightPattern\",\"value\":\"progress_documentation\"},{\"name\":\"resolution\",\"value\":\"high\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "19",
          "name": "Process Drone Schedule",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            600
          ],
          "parameters": {
            "functionCode": "// Process drone scheduling response\nconst response = $input.item.json;\n\nreturn {\n  flightId: response.flightId,\n  scheduledTime: response.scheduledTime,\n  estimatedDuration: response.estimatedDuration,\n  coverageArea: response.coverageArea,\n  siteId: response.siteId,\n  status: response.status,\n  weatherDependent: true,\n  requiresWeatherCheck: true\n};"
          }
        },
        {
          "id": "20",
          "name": "Fetch Weather Forecast",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            300,
            750
          ],
          "parameters": {
            "method": "GET",
            "options": {},
            "url": "={{ $json.weatherApiUrl || 'https://api.weather-service.example/forecast' }}",
            "sendQuery": true,
            "queryParameters": {
              "parameters": [
                {
                  "name": "lat",
                  "value": "={{ $json.siteLat || '40.7128' }}"
                },
                {
                  "name": "lon",
                  "value": "={{ $json.siteLon || '-74.0060' }}"
                },
                {
                  "name": "units",
                  "value": "metric"
                }
              ]
            }
          }
        },
        {
          "id": "21",
          "name": "Process Weather Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            750
          ],
          "parameters": {
            "functionCode": "// Process weather data\nconst weather = $input.item.json;\n\n// Check if conditions are suitable for various construction activities\nconst windSpeed = weather.current.wind_speed || 0;\nconst precipitation = weather.current.precipitation || 0;\nconst temperature = weather.current.temperature || 20;\n\n// Determine safety for different activities\nconst isSafeForCrane = windSpeed < 20; // Wind speed less than 20 km/h for crane operations\nconst isSafeForConcrete = precipitation < 2 && temperature > 5 && temperature < 32; // Minimal rain and appropriate temp for concrete\nconst isSafeForRoofing = windSpeed < 15 && precipitation < 1; // Low wind and minimal rain for roofing\nconst isSafeForExteriorPainting = precipitation < 0.5 && temperature > 10 && temperature < 35; // Dry and moderate temp for painting\nconst isSafeForDroneFlights = windSpeed < 25 && precipitation < 1; // Low wind and minimal rain for drone flights\n\nreturn {\n  location: weather.location.name,\n  date: new Date().toISOString().split('T')[0],\n  currentWeather: {\n    temperature: temperature,\n    windSpeed: windSpeed,\n    precipitation: precipitation,\n    humidity: weather.current.humidity || 0,\n    conditions: weather.current.conditions || 'Unknown'\n  },\n  safetyAssessment: {\n    craneOperations: isSafeForCrane,\n    concretePour: isSafeForConcrete,\n    roofing: isSafeForRoofing,\n    exteriorPainting: isSafeForExteriorPainting,\n    droneFlights: isSafeForDroneFlights\n  },\n  requiresAlert: !isSafeForCrane || !isSafeForConcrete,\n  weatherSuitableForDrone: isSafeForDroneFlights\n};"
          }
        },
        {
          "id": "22",
          "name": "Weather Alerts Needed?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            700,
            750
          ],
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $json.requiresAlert }}",
                  "value2": true
                }
              ],
              "string": []
            }
          }
        },
        {
          "id": "23",
          "name": "Send Weather Safety Alert",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            900,
            650
          ],
          "parameters": {
            "options": {},
            "subject": "Weather Alert: Unsafe Conditions for Construction Activities",
            "text": "=Weather Alert for Site: {{ $json.location }}\nDate: {{ $json.date }}\n\nCurrent Conditions:\n- Temperature: {{ $json.currentWeather.temperature }}°C\n- Wind Speed: {{ $json.currentWeather.windSpeed }} km/h\n- Precipitation: {{ $json.currentWeather.precipitation }} mm\n- Humidity: {{ $json.currentWeather.humidity }}%\n- Conditions: {{ $json.currentWeather.conditions }}\n\nSafety Assessment:\n- Crane Operations: {{ $json.safetyAssessment.craneOperations ? 'SAFE' : 'UNSAFE - DO NOT OPERATE' }}\n- Concrete Pouring: {{ $json.safetyAssessment.concretePour ? 'SAFE' : 'UNSAFE - RESCHEDULE' }}\n- Roofing Work: {{ $json.safetyAssessment.roofing ? 'SAFE' : 'UNSAFE - RESCHEDULE' }}\n- Exterior Painting: {{ $json.safetyAssessment.exteriorPainting ? 'SAFE' : 'UNSAFE - RESCHEDULE' }}\n- Drone Flights: {{ $json.safetyAssessment.droneFlights ? 'SAFE' : 'UNSAFE - RESCHEDULE' }}\n\nPlease adjust today's work schedule accordingly.\n\nThis is an automated message from the Construction Site Monitoring System.",
            "toRecipients": "[object Object]"
          }
        },
        {
          "id": "24",
          "name": "Weather OK for Drone?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            700,
            600
          ],
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $json.weatherSuitableForDrone }}",
                  "value2": true
                }
              ],
              "string": []
            }
          }
        },
        {
          "id": "25",
          "name": "Confirm Drone Flight",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            900,
            550
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "={{ $json.droneApiUrl || 'https://api.construction-drones.example/confirm-flight' }}",
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"flightId\",\"value\":\"={{ $json.flightId }}\"},{\"name\":\"confirm\",\"value\":true}]}",
            "contentType": "json"
          }
        },
        {
          "id": "26",
          "name": "Cancel Drone Flight",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            900,
            750
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "={{ $json.droneApiUrl || 'https://api.construction-drones.example/cancel-flight' }}",
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"flightId\",\"value\":\"={{ $json.flightId }}\"},{\"name\":\"reason\",\"value\":\"Unsuitable weather conditions\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "27",
          "name": "Fetch Security Patrol Data",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            700,
            900
          ],
          "parameters": {
            "method": "GET",
            "options": {},
            "url": "={{ $json.securityApiUrl || 'https://api.construction-security.example/patrol-routes' }}",
            "sendQuery": true,
            "queryParameters": {
              "parameters": [
                {
                  "name": "siteId",
                  "value": "={{ $json.siteId || '123' }}"
                },
                {
                  "name": "date",
                  "value": "={{ $now.toISOString().split('T')[0] }}"
                }
              ]
            }
          }
        },
        {
          "id": "28",
          "name": "Process Security Patrol Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            900
          ],
          "parameters": {
            "functionCode": "// Process security patrol data\nconst patrolData = $input.item.json;\nconst routes = patrolData.routes || [];\nconst checkpoints = patrolData.checkpoints || [];\n\n// Check for missed checkpoints\nconst missedCheckpoints = [];\nfor (const checkpoint of checkpoints) {\n  if (!checkpoint.visited) {\n    missedCheckpoints.push(checkpoint);\n  }\n}\n\n// Check for unusual timing\nconst unusualTimings = [];\nfor (const route of routes) {\n  if (route.actualDuration && route.expectedDuration) {\n    // If actual duration is 30% more or less than expected\n    if (Math.abs(route.actualDuration - route.expectedDuration) / route.expectedDuration > 0.3) {\n      unusualTimings.push({\n        routeId: route.id,\n        guardName: route.guardName,\n        expectedDuration: route.expectedDuration,\n        actualDuration: route.actualDuration,\n        difference: ((route.actualDuration - route.expectedDuration) / route.expectedDuration * 100).toFixed(2) + '%'\n      });\n    }\n  }\n}\n\nreturn {\n  date: patrolData.date,\n  totalRoutes: routes.length,\n  completedRoutes: routes.filter(r => r.completed).length,\n  totalCheckpoints: checkpoints.length,\n  missedCheckpoints: missedCheckpoints,\n  missedCheckpointsCount: missedCheckpoints.length,\n  unusualTimings: unusualTimings,\n  unusualTimingsCount: unusualTimings.length,\n  requiresAttention: missedCheckpoints.length > 0 || unusualTimings.length > 0\n};"
          }
        },
        {
          "id": "29",
          "name": "Security Issues Found?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1100,
            900
          ],
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $json.requiresAttention }}",
                  "value2": true
                }
              ],
              "string": []
            }
          }
        },
        {
          "id": "30",
          "name": "Send Security Alert",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            1300,
            800
          ],
          "parameters": {
            "options": {},
            "subject": "Security Patrol Alert: {{ $json.date }}",
            "text": "=Security Alert for Site ID: {{ $json.siteId }}\nDate: {{ $json.date }}\n\nPatrol Summary:\n- Total Routes: {{ $json.totalRoutes }}\n- Completed Routes: {{ $json.completedRoutes }}\n- Total Checkpoints: {{ $json.totalCheckpoints }}\n- Missed Checkpoints: {{ $json.missedCheckpointsCount }}\n- Unusual Timings: {{ $json.unusualTimingsCount }}\n\n{% if $json.missedCheckpoints.length > 0 %}\nMissed Checkpoints:\n{% for checkpoint in $json.missedCheckpoints %}\n- Checkpoint: {{ checkpoint.name }}\n  Location: {{ checkpoint.location }}\n  Guard Assigned: {{ checkpoint.guardAssigned }}\n  Expected Visit Time: {{ checkpoint.scheduledTime }}\n{% endfor %}\n{% endif %}\n\n{% if $json.unusualTimings.length > 0 %}\nUnusual Route Timings:\n{% for route in $json.unusualTimings %}\n- Route ID: {{ route.routeId }}\n  Guard: {{ route.guardName }}\n  Expected Duration: {{ route.expectedDuration }} minutes\n  Actual Duration: {{ route.actualDuration }} minutes\n  Difference: {{ route.difference }}\n{% endfor %}\n{% endif %}\n\nPlease investigate these security patrol irregularities.\n\nThis is an automated message from the Construction Site Monitoring System.",
            "toRecipients": "[object Object]"
          }
        },
        {
          "id": "31",
          "name": "Vibration Sensor Subscription",
          "type": "n8n-nodes-base.mqtt",
          "typeVersion": 1,
          "position": [
            100,
            1050
          ],
          "parameters": {
            "qos": 1,
            "retain": false,
            "topic": "construction/sensors/vibration",
            "options": {}
          }
        },
        {
          "id": "32",
          "name": "Process Vibration Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            1050
          ],
          "parameters": {
            "functionCode": "// Process vibration sensor data\nconst sensorData = $input.item.json;\n\n// Parse if needed\nlet data = sensorData;\nif (typeof sensorData === 'string') {\n  try {\n    data = JSON.parse(sensorData);\n  } catch (e) {\n    // If not valid JSON, create a structured object\n    data = { rawData: sensorData };\n  }\n}\n\n// Extract and normalize values\nconst sensorId = data.sensorId || 'unknown';\nconst location = data.location || 'unknown';\nconst timestamp = data.timestamp || new Date().toISOString();\nconst vibrationLevel = parseFloat(data.vibrationLevel || 0);\nconst threshold = parseFloat(data.threshold || 5.0); // Default threshold\n\n// Determine if this exceeds the safety threshold\nconst exceedsThreshold = vibrationLevel > threshold;\n\nreturn {\n  sensorId: sensorId,\n  location: location,\n  timestamp: timestamp,\n  vibrationLevel: vibrationLevel,\n  threshold: threshold,\n  exceedsThreshold: exceedsThreshold,\n  requiresAlert: exceedsThreshold,\n  severity: exceedsThreshold ? \n    (vibrationLevel > threshold * 1.5 ? 'HIGH' : 'MEDIUM') : \n    'LOW'\n};"
          }
        },
        {
          "id": "33",
          "name": "Vibration Alert Needed?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            500,
            1050
          ],
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $json.requiresAlert }}",
                  "value2": true
                }
              ],
              "string": []
            }
          }
        },
        {
          "id": "34",
          "name": "Send Vibration Alert",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            700,
            950
          ],
          "parameters": {
            "options": {},
            "subject": "VIBRATION ALERT: {{ $json.severity }} Level Detected",
            "text": "=VIBRATION ALERT for Site ID: {{ $json.siteId }}\n\nTime: {{ $json.timestamp }}\n\nDetails:\n- Sensor ID: {{ $json.sensorId }}\n- Location: {{ $json.location }}\n- Vibration Level: {{ $json.vibrationLevel }}\n- Threshold: {{ $json.threshold }}\n- Severity: {{ $json.severity }}\n\nImmediate Action Required:\n{% if $json.severity == 'HIGH' %}\n- STOP all construction activities immediately\n- Evacuate personnel from affected area\n- Conduct emergency structural assessment\n{% else %}\n- Reduce vibration-causing activities\n- Monitor neighboring structures\n- Prepare for possible work stoppage if levels increase\n{% endif %}\n\nThis is an automated message from the Construction Site Monitoring System.",
            "toRecipients": "[object Object]"
          }
        },
        {
          "id": "35",
          "name": "Crane Wind Sensor Subscription",
          "type": "n8n-nodes-base.mqtt",
          "typeVersion": 1,
          "position": [
            100,
            1200
          ],
          "parameters": {
            "qos": 1,
            "retain": false,
            "topic": "construction/sensors/crane/wind",
            "options": {}
          }
        },
        {
          "id": "36",
          "name": "Process Crane Wind Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            1200
          ],
          "parameters": {
            "functionCode": "// Process crane wind sensor data\nconst sensorData = $input.item.json;\n\n// Parse if needed\nlet data = sensorData;\nif (typeof sensorData === 'string') {\n  try {\n    data = JSON.parse(sensorData);\n  } catch (e) {\n    // If not valid JSON, create a structured object\n    data = { rawData: sensorData };\n  }\n}\n\n// Extract and normalize values\nconst craneId = data.craneId || 'unknown';\nconst location = data.location || 'unknown';\nconst timestamp = data.timestamp || new Date().toISOString();\nconst windSpeed = parseFloat(data.windSpeed || 0);\nconst windDirection = data.windDirection || 'unknown';\nconst operationalThreshold = parseFloat(data.operationalThreshold || 20); // Default threshold in km/h\nconst shutdownThreshold = parseFloat(data.shutdownThreshold || 35); // Default shutdown threshold\n\n// Determine safety levels\nconst isWarningLevel = windSpeed > operationalThreshold;\nconst isShutdownLevel = windSpeed > shutdownThreshold;\n\nreturn {\n  craneId: craneId,\n  location: location,\n  timestamp: timestamp,\n  windSpeed: windSpeed,\n  windDirection: windDirection,\n  operationalThreshold: operationalThreshold,\n  shutdownThreshold: shutdownThreshold,\n  isWarningLevel: isWarningLevel,\n  isShutdownLevel: isShutdownLevel,\n  requiresAction: isWarningLevel,\n  requiresShutdown: isShutdownLevel,\n  severity: isShutdownLevel ? 'CRITICAL' : (isWarningLevel ? 'WARNING' : 'NORMAL')\n};"
          }
        },
        {
          "id": "37",
          "name": "Wind Action Needed?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            500,
            1200
          ],
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $json.requiresAction }}",
                  "value2": true
                }
              ],
              "string": []
            }
          }
        },
        {
          "id": "38",
          "name": "Crane Shutdown Needed?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            700,
            1100
          ],
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $json.requiresShutdown }}",
                  "value2": true
                }
              ],
              "string": []
            }
          }
        },
        {
          "id": "39",
          "name": "Trigger Crane Shutdown",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            900,
            1050
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "={{ $json.craneApiUrl || 'https://api.construction-cranes.example/emergency-shutdown' }}",
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"craneId\",\"value\":\"={{ $json.craneId }}\"},{\"name\":\"reason\",\"value\":\"High wind speed ({{ $json.windSpeed }} km/h)\"},{\"name\":\"timestamp\",\"value\":\"={{ $json.timestamp }}\"},{\"name\":\"emergencyShutdown\",\"value\":true}]}",
            "contentType": "json"
          }
        },
        {
          "id": "40",
          "name": "Send Crane Wind Alert",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            1100,
            1100
          ],
          "parameters": {
            "options": {},
            "subject": "CRANE WIND ALERT: {{ $json.severity }} - {{ $json.windSpeed }} km/h",
            "text": "=CRANE WIND ALERT for Site ID: {{ $json.siteId }}\n\nTime: {{ $json.timestamp }}\n\nDetails:\n- Crane ID: {{ $json.craneId }}\n- Location: {{ $json.location }}\n- Wind Speed: {{ $json.windSpeed }} km/h\n- Wind Direction: {{ $json.windDirection }}\n- Operational Threshold: {{ $json.operationalThreshold }} km/h\n- Shutdown Threshold: {{ $json.shutdownThreshold }} km/h\n- Status: {{ $json.severity }}\n\n{% if $json.requiresShutdown %}\nCRITICAL ACTION TAKEN:\n- Automatic emergency shutdown initiated\n- DO NOT attempt to operate crane until winds subside\n- Secure all loose materials on site immediately\n- Conduct safety inspection before resuming operations\n{% else %}\nREQUIRED ACTION:\n- Reduce crane operations\n- Avoid lifting operations if possible\n- Monitor wind conditions closely\n- Prepare for possible shutdown if winds increase\n{% endif %}\n\nThis is an automated message from the Construction Site Monitoring System.",
            "toRecipients": "[object Object]"
          }
        },
        {
          "id": "41",
          "name": "Fetch Contractor Progress",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            700,
            1300
          ],
          "parameters": {
            "method": "GET",
            "options": {},
            "url": "={{ $json.documentationApiUrl || 'https://api.construction-docs.example/contractor-progress' }}",
            "sendQuery": true,
            "queryParameters": {
              "parameters": [
                {
                  "name": "siteId",
                  "value": "={{ $json.siteId || '123' }}"
                },
                {
                  "name": "contractorId",
                  "value": "={{ $json.contractorId }}"
                },
                {
                  "name": "date",
                  "value": "={{ $now.toISOString().split('T')[0] }}"
                }
              ]
            }
          }
        },
        {
          "id": "42",
          "name": "Process Contractor Progress",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            1300
          ],
          "parameters": {
            "functionCode": "// Process contractor progress data\nconst progressData = $input.item.json;\nconst milestones = progressData.milestones || [];\nconst photos = progressData.photos || [];\n\n// Check if documentation is complete\nconst incompleteDocumentation = [];\nfor (const milestone of milestones) {\n  if (milestone.completed && milestone.requiresPhotos) {\n    // Check if this milestone has associated photos\n    const milestonePics = photos.filter(p => p.milestoneId === milestone.id);\n    if (milestonePics.length < milestone.requiredPhotoCount) {\n      incompleteDocumentation.push({\n        milestoneId: milestone.id,\n        milestoneName: milestone.name,\n        photosRequired: milestone.requiredPhotoCount,\n        photosSubmitted: milestonePics.length,\n        photosNeeded: milestone.requiredPhotoCount - milestonePics.length\n      });\n    }\n  }\n}\n\n// Calculate completion percentage\nconst totalMilestones = milestones.length;\nconst completedMilestones = milestones.filter(m => m.completed).length;\nconst completionPercentage = totalMilestones > 0 ? \n  (completedMilestones / totalMilestones * 100).toFixed(2) : 0;\n\n// Determine if payment can be processed\nconst readyForPayment = incompleteDocumentation.length === 0 && \n  progressData.qualityCheckPassed && \n  progressData.inspectionPassed;\n\nreturn {\n  contractorId: progressData.contractorId,\n  contractorName: progressData.contractorName,\n  date: progressData.date,\n  totalMilestones: totalMilestones,\n  completedMilestones: completedMilestones,\n  completionPercentage: completionPercentage,\n  qualityCheckPassed: progressData.qualityCheckPassed,\n  inspectionPassed: progressData.inspectionPassed,\n  incompleteDocumentation: incompleteDocumentation,\n  documentationComplete: incompleteDocumentation.length === 0,\n  readyForPayment: readyForPayment,\n  paymentAmount: progressData.paymentAmount,\n  paymentDetails: progressData.paymentDetails\n};"
          }
        },
        {
          "id": "43",
          "name": "Ready for Payment?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1100,
            1300
          ],
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $json.readyForPayment }}",
                  "value2": true
                }
              ],
              "string": []
            }
          }
        },
        {
          "id": "44",
          "name": "Process Contractor Payment",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            1300,
            1200
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "={{ $json.paymentApiUrl || 'https://api.construction-finance.example/process-payment' }}",
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"contractorId\",\"value\":\"={{ $json.contractorId }}\"},{\"name\":\"contractorName\",\"value\":\"={{ $json.contractorName }}\"},{\"name\":\"amount\",\"value\":\"={{ $json.paymentAmount }}\"},{\"name\":\"milestoneCompletion\",\"value\":\"={{ $json.completionPercentage }}\"},{\"name\":\"paymentDetails\",\"value\":\"={{ JSON.stringify($json.paymentDetails) }}\"},{\"name\":\"approvedBy\",\"value\":\"Automated System\"},{\"name\":\"approvalDate\",\"value\":\"={{ $now.toISOString() }}\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "45",
          "name": "Send Documentation Request",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            1300,
            1400
          ],
          "parameters": {
            "options": {},
            "bccEmail": "={{ $json.financeEmail || 'finance@construction-company.example' }}",
            "subject": "Documentation Incomplete: Payment Delayed for {{ $json.contractorName }}",
            "text": "=To: {{ $json.contractorName }}\nRe: Incomplete Documentation for Payment Processing\n\nDear Contractor,\n\nYour payment for recent work cannot be processed due to incomplete documentation:\n\nProgress Summary:\n- Completion: {{ $json.completionPercentage }}%\n- Quality Check: {{ $json.qualityCheckPassed ? 'PASSED' : 'FAILED' }}\n- Inspection: {{ $json.inspectionPassed ? 'PASSED' : 'FAILED' }}\n\nMissing Documentation:\n{% for item in $json.incompleteDocumentation %}\n- Milestone: {{ item.milestoneName }}\n  Photos Required: {{ item.photosRequired }}\n  Photos Submitted: {{ item.photosSubmitted }}\n  MISSING: {{ item.photosNeeded }} photos\n{% endfor %}\n\nPlease submit the required documentation as soon as possible to process your payment of ${{ $json.paymentAmount }}.\n\nThis is an automated message from the Construction Site Monitoring System.",
            "toRecipients": "[object Object]"
          }
        },
        {
          "id": "46",
          "name": "Send Payment Confirmation",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            1500,
            1200
          ],
          "parameters": {
            "options": {},
            "bccEmail": "={{ $json.financeEmail || 'finance@construction-company.example' }}",
            "subject": "Payment Processed: ${{ $json.paymentAmount }} for {{ $json.contractorName }}",
            "text": "=To: {{ $json.contractorName }}\nRe: Payment Confirmation\n\nDear Contractor,\n\nWe are pleased to inform you that your payment has been processed:\n\nPayment Details:\n- Amount: ${{ $json.paymentAmount }}\n- Contractor: {{ $json.contractorName }} (ID: {{ $json.contractorId }})\n- Milestone Completion: {{ $json.completionPercentage }}%\n- Date Processed: {{ $now.toISOString().split('T')[0] }}\n\nThe funds should be deposited in your account within 2-3 business days according to our payment terms.\n\nThank you for your work on our project.\n\nThis is an automated message from the Construction Site Monitoring System.",
            "toRecipients": "[object Object]"
          }
        },
        {
          "id": "47",
          "name": "Trigger Emergency Protocol",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            700,
            400
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "={{ $json.emergencyApiUrl || 'https://api.construction-emergency.example/protocol' }}",
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"siteId\",\"value\":\"={{ $json.siteId }}\"},{\"name\":\"emergencyType\",\"value\":\"={{ $json.emergencyType }}\"},{\"name\":\"location\",\"value\":\"={{ $json.location }}\"},{\"name\":\"timestamp\",\"value\":\"={{ $now.toISOString() }}\"},{\"name\":\"severity\",\"value\":\"={{ $json.severity || 'HIGH' }}\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "48",
          "name": "Process Emergency Response",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            400
          ],
          "parameters": {
            "functionCode": "// Process emergency response\nconst response = $input.item.json;\nconst emergency = $input.item.json.emergency || {};\n\n// Ensure we have the necessary data\nconst emergencyType = emergency.type || $input.item.json.emergencyType || 'Unknown';\nconst location = emergency.location || $input.item.json.location || 'Unknown';\nconst severity = emergency.severity || $input.item.json.severity || 'HIGH';\n\n// Generate appropriate response actions based on emergency type\nlet responseActions = [];\nlet authorities = [];\n\nswitch(emergencyType.toLowerCase()) {\n  case 'fire':\n    responseActions = [\n      'Evacuate all personnel immediately',\n      'Activate fire suppression systems',\n      'Secure hazardous materials',\n      'Cut power to affected areas'\n    ];\n    authorities = ['Fire Department', 'Emergency Services'];\n    break;\n    \n  case 'injury':\n  case 'medical':\n    responseActions = [\n      'Provide first aid',\n      'Clear area around injured person',\n      'Prepare site access for emergency vehicles',\n      'Collect witness statements'\n    ];\n    authorities = ['Ambulance', 'Medical Services'];\n    break;\n    \n  case 'structural':\n    responseActions = [\n      'Evacuate danger zone immediately',\n      'Establish safety perimeter',\n      'Secure loose materials',\n      'Prevent access to affected area'\n    ];\n    authorities = ['Building Inspector', 'Structural Engineer'];\n    break;\n    \n  case 'chemical':\n  case 'spill':\n    responseActions = [\n      'Evacuate affected area',\n      'Don appropriate PPE',\n      'Contain spill if safe to do so',\n      'Ventilate area if appropriate'\n    ];\n    authorities = ['HazMat Team', 'Environmental Agency'];\n    break;\n    \n  default:\n    responseActions = [\n      'Evacuate if necessary',\n      'Secure the area',\n      'Document the incident',\n      'Await further instructions'\n    ];\n    authorities = ['Site Safety Officer', 'Project Manager'];\n}\n\nreturn {\n  emergencyId: response.emergencyId || 'EM-' + Date.now(),\n  emergencyType: emergencyType,\n  location: location,\n  timestamp: response.timestamp || new Date().toISOString(),\n  severity: severity,\n  responseProtocol: response.protocol || 'Standard Emergency Response',\n  responseActions: responseActions,\n  authoritiesToContact: authorities,\n  evacuationRequired: severity === 'HIGH' || emergencyType.toLowerCase() === 'fire',\n  estimatedResponseTime: response.estimatedResponseTime || '15 minutes'\n};"
          }
        },
        {
          "id": "49",
          "name": "Send Emergency Alert",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            1100,
            400
          ],
          "parameters": {
            "options": {},
            "ccEmail": "={{ $json.siteManagerEmail || 'manager@construction-company.example' }}",
            "subject": "EMERGENCY ALERT: {{ $json.emergencyType }} at {{ $json.location }}",
            "text": "=‼️ EMERGENCY ALERT ‼️\n\nEmergency Type: {{ $json.emergencyType }}\nLocation: {{ $json.location }}\nTime: {{ $json.timestamp }}\nSeverity: {{ $json.severity }}\nEmergency ID: {{ $json.emergencyId }}\n\nResponse Protocol: {{ $json.responseProtocol }}\nEstimated Response Time: {{ $json.estimatedResponseTime }}\n\nRequired Actions:\n{% for action in $json.responseActions %}\n- {{ action }}\n{% endfor %}\n\nAuthorities to Contact:\n{% for authority in $json.authoritiesToContact %}\n- {{ authority }}\n{% endfor %}\n\n{% if $json.evacuationRequired %}\n⚠️ EVACUATION REQUIRED ⚠️\nAll personnel must evacuate the affected area immediately!\n{% endif %}\n\nThis is an automated emergency alert from the Construction Site Monitoring System.",
            "toRecipients": "[object Object]"
          }
        },
        {
          "id": "50",
          "name": "Merge All Features",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            1500,
            600
          ],
          "parameters": {
            "mode": "append",
            "options": {}
          }
        },
        {
          "id": "51",
          "name": "Generate Site Report",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1700,
            600
          ],
          "parameters": {
            "functionCode": "// Compile comprehensive site report\nconst items = $input.all;\nconst timestamp = new Date().toISOString();\nconst date = timestamp.split('T')[0];\n\n// Initialize report sections\nconst safetyIncidents = [];\nconst weatherAlerts = [];\nconst materialIssues = [];\nconst securityIssues = [];\nconst progressUpdates = [];\nconst sensorAlerts = [];\nconst emergencies = [];\n\n// Process all incoming items\nfor (const item of items) {\n  const data = item.json;\n  \n  // Categorize data based on content\n  if (data.violations && data.complianceRate) {\n    safetyIncidents.push({\n      type: 'Safety Compliance',\n      violations: data.violationsCount,\n      complianceRate: data.complianceRate,\n      timestamp: data.timestamp\n    });\n  }\n  \n  if (data.currentWeather && data.safetyAssessment) {\n    weatherAlerts.push({\n      conditions: data.currentWeather.conditions,\n      temperature: data.currentWeather.temperature,\n      windSpeed: data.currentWeather.windSpeed,\n      craneOperationsSafe: data.safetyAssessment.craneOperations,\n      concretePourSafe: data.safetyAssessment.concretePour\n    });\n  }\n  \n  if (data.lowStockItems && data.totalOrderCost) {\n    materialIssues.push({\n      lowStockCount: data.lowStockCount,\n      totalOrderCost: data.totalOrderCost\n    });\n  }\n  \n  if (data.missedCheckpoints && data.unusualTimings) {\n    securityIssues.push({\n      missedCheckpointsCount: data.missedCheckpointsCount,\n      unusualTimingsCount: data.unusualTimingsCount\n    });\n  }\n  \n  if (data.completionPercentage && data.contractorName) {\n    progressUpdates.push({\n      contractor: data.contractorName,\n      completion: data.completionPercentage + '%',\n      readyForPayment: data.readyForPayment\n    });\n  }\n  \n  if (data.vibrationLevel || data.windSpeed) {\n    sensorAlerts.push({\n      type: data.vibrationLevel ? 'Vibration' : 'Wind',\n      level: data.vibrationLevel || data.windSpeed,\n      threshold: data.threshold || data.operationalThreshold,\n      location: data.location,\n      severity: data.severity\n    });\n  }\n  \n  if (data.emergencyType && data.responseProtocol) {\n    emergencies.push({\n      type: data.emergencyType,\n      location: data.location,\n      severity: data.severity,\n      responseActions: data.responseActions\n    });\n  }\n}\n\n// Compile overall site status\nconst hasSafetyIssues = safetyIncidents.length > 0;\nconst hasWeatherIssues = weatherAlerts.some(a => !a.craneOperationsSafe || !a.concretePourSafe);\nconst hasMaterialIssues = materialIssues.length > 0;\nconst hasSecurityIssues = securityIssues.length > 0;\nconst hasEmergencies = emergencies.length > 0;\nconst hasSensorAlerts = sensorAlerts.some(a => a.severity === 'HIGH' || a.severity === 'CRITICAL');\n\nconst overallStatus = hasEmergencies ? 'CRITICAL' :\n  (hasSafetyIssues || hasWeatherIssues || hasSensorAlerts ? 'WARNING' : 'NORMAL');\n\nreturn {\n  reportId: 'SITE-REPORT-' + date + '-' + Math.floor(Math.random() * 1000),\n  timestamp: timestamp,\n  date: date,\n  siteId: '123', // This would normally come from input\n  overallStatus: overallStatus,\n  summary: {\n    safetyIncidents: safetyIncidents.length,\n    weatherAlerts: weatherAlerts.length,\n    materialIssues: materialIssues.length,\n    securityIssues: securityIssues.length,\n    progressUpdates: progressUpdates.length,\n    sensorAlerts: sensorAlerts.length,\n    emergencies: emergencies.length\n  },\n  details: {\n    safetyIncidents: safetyIncidents,\n    weatherAlerts: weatherAlerts,\n    materialIssues: materialIssues,\n    securityIssues: securityIssues,\n    progressUpdates: progressUpdates,\n    sensorAlerts: sensorAlerts,\n    emergencies: emergencies\n  }\n};"
          }
        },
        {
          "id": "52",
          "name": "Save Report to Database",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            1900,
            600
          ],
          "parameters": {
            "method": "POST",
            "options": {},
            "url": "={{ $json.reportingApiUrl || 'https://api.construction-reporting.example/daily-report' }}",
            "sendBody": true,
            "bodyParametersJson": "{\"parameters\":[{\"name\":\"reportData\",\"value\":\"={{ JSON.stringify($json) }}\"}]}",
            "contentType": "json"
          }
        },
        {
          "id": "53",
          "name": "Send Daily Report Email",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            2100,
            600
          ],
          "parameters": {
            "options": {},
            "ccEmail": "={{ $json.siteEngineerEmail || 'engineer@construction-company.example' }}",
            "subject": "[{{ $json.overallStatus }}] Construction Site Daily Report: {{ $json.date }}",
            "text": "=Construction Site Daily Report\nSite ID: {{ $json.siteId }}\nDate: {{ $json.date }}\nStatus: {{ $json.overallStatus }}\n\nSummary:\n- Safety Incidents: {{ $json.summary.safetyIncidents }}\n- Weather Alerts: {{ $json.summary.weatherAlerts }}\n- Material Issues: {{ $json.summary.materialIssues }}\n- Security Issues: {{ $json.summary.securityIssues }}\n- Progress Updates: {{ $json.summary.progressUpdates }}\n- Sensor Alerts: {{ $json.summary.sensorAlerts }}\n- Emergencies: {{ $json.summary.emergencies }}\n\n{% if $json.details.safetyIncidents.length > 0 %}\nSafety Incidents:\n{% for incident in $json.details.safetyIncidents %}\n- {{ incident.type }}: {{ incident.violations }} violations ({{ incident.complianceRate }} compliance)\n{% endfor %}\n{% endif %}\n\n{% if $json.details.weatherAlerts.length > 0 %}\nWeather Conditions:\n{% for alert in $json.details.weatherAlerts %}\n- {{ alert.conditions }}, {{ alert.temperature }}°C, {{ alert.windSpeed }} km/h\n  Crane Operations: {{ alert.craneOperationsSafe ? 'SAFE' : 'UNSAFE' }}\n  Concrete Pour: {{ alert.concretePourSafe ? 'SAFE' : 'UNSAFE' }}\n{% endfor %}\n{% endif %}\n\n{% if $json.details.materialIssues.length > 0 %}\nMaterial Issues:\n{% for issue in $json.details.materialIssues %}\n- {{ issue.lowStockCount }} items low in stock (Est. cost: ${{ issue.totalOrderCost }})\n{% endfor %}\n{% endif %}\n\n{% if $json.details.securityIssues.length > 0 %}\nSecurity Issues:\n{% for issue in $json.details.securityIssues %}\n- {{ issue.missedCheckpointsCount }} missed checkpoints, {{ issue.unusualTimingsCount }} unusual patrol timings\n{% endfor %}\n{% endif %}\n\n{% if $json.details.progressUpdates.length > 0 %}\nProgress Updates:\n{% for update in $json.details.progressUpdates %}\n- {{ update.contractor }}: {{ update.completion }} complete (Payment: {{ update.readyForPayment ? 'Ready' : 'Pending Documentation' }})\n{% endfor %}\n{% endif %}\n\n{% if $json.details.sensorAlerts.length > 0 %}\nSensor Alerts:\n{% for alert in $json.details.sensorAlerts %}\n- {{ alert.type }} at {{ alert.location }}: {{ alert.level }} (Threshold: {{ alert.threshold }}) - {{ alert.severity }}\n{% endfor %}\n{% endif %}\n\n{% if $json.details.emergencies.length > 0 %}\nEMERGENCIES:\n{% for emergency in $json.details.emergencies %}\n- {{ emergency.type }} ({{ emergency.severity }}) at {{ emergency.location }}\n{% endfor %}\n{% endif %}\n\nFor complete details, please visit the construction monitoring dashboard.\n\nThis is an automated report from the Construction Site Monitoring System.",
            "toRecipients": "[object Object]"
          }
        },
        {
          "id": "54",
          "name": "Error Trigger",
          "type": "n8n-nodes-base.errorTrigger",
          "typeVersion": 1,
          "position": [
            100,
            900
          ],
          "parameters": {}
        },
        {
          "id": "55",
          "name": "Process Error Information",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            900
          ],
          "parameters": {
            "functionCode": "// Process error information\nconst error = $input.item.json.error;\nconst execution = $input.item.json.execution;\nconst workflow = $input.item.json.workflow;\nconst timestamp = new Date().toISOString();\n\n// Extract useful information\nconst errorMessage = error.message || 'Unknown error';\nconst errorStack = error.stack || 'No stack trace available';\nconst workflowName = workflow.name || 'Unknown workflow';\nconst executionId = execution.id || 'Unknown execution';\nconst failedNode = execution.lastNodeExecuted || 'Unknown node';\n\n// Determine severity based on error type\nlet severity = 'MEDIUM';\nif (errorMessage.includes('timeout') || errorMessage.includes('ETIMEDOUT')) {\n  severity = 'LOW'; // Timeouts might be temporary\n} else if (errorMessage.includes('CRITICAL') || errorMessage.includes('emergency')) {\n  severity = 'HIGH'; // Critical errors need immediate attention\n}\n\nreturn {\n  errorId: 'ERR-' + Date.now(),\n  timestamp: timestamp,\n  workflowName: workflowName,\n  executionId: executionId,\n  failedNode: failedNode,\n  errorMessage: errorMessage,\n  errorStack: errorStack,\n  severity: severity,\n  recoverable: severity !== 'HIGH',\n  recommendedAction: severity === 'HIGH' ? \n    'Immediate manual intervention required' : \n    (severity === 'MEDIUM' ? 'Investigate during working hours' : 'Monitor for recurrence')\n};"
          }
        },
        {
          "id": "56",
          "name": "Send Error Alert",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            500,
            900
          ],
          "parameters": {
            "options": {},
            "subject": "[{{ $json.severity }}] Workflow Error: {{ $json.workflowName }}",
            "text": "=System Error Alert\n\nError ID: {{ $json.errorId }}\nTime: {{ $json.timestamp }}\nSeverity: {{ $json.severity }}\n\nWorkflow: {{ $json.workflowName }}\nExecution ID: {{ $json.executionId }}\nFailed Node: {{ $json.failedNode }}\n\nError Message:\n{{ $json.errorMessage }}\n\nStack Trace:\n{{ $json.errorStack }}\n\nRecommended Action:\n{{ $json.recommendedAction }}\n\nThis is an automated message from the Construction Site Monitoring System.",
            "toRecipients": "[object Object]"
          }
        },
        {
          "id": "57",
          "name": "Respond to Webhook",
          "type": "n8n-nodes-base.respondToWebhook",
          "typeVersion": 1,
          "position": [
            2300,
            600
          ],
          "parameters": {
            "options": {},
            "respondWith": "json",
            "responseData": "={{ $json }}"
          }
        }
      ],
      "connections": {
        "Main Webhook Trigger": {
          "main": [
            [
              {
                "node": "Is Real-time Event?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Real-time Event?": {
          "main": [
            [
              {
                "node": "Route Real-time Events",
                "type": "main",
                "index": 0
              }
            ],
            []
          ]
        },
        "Weekly Progress Schedule": {
          "main": [
            [
              {
                "node": "Schedule Drone Photography",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Daily Weather Check": {
          "main": [
            [
              {
                "node": "Fetch Weather Forecast",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Route Real-time Events": {
          "main": [
            [
              {
                "node": "Request Camera Compliance Data",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Fetch Worker Time Tracking",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Fetch Material Inventory",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Trigger Emergency Protocol",
                "type": "main",
                "index": 0
              }
            ],
            []
          ]
        },
        "Request Camera Compliance Data": {
          "main": [
            [
              {
                "node": "Process Safety Compliance",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Safety Compliance": {
          "main": [
            [
              {
                "node": "Safety Violations Found?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Safety Violations Found?": {
          "main": [
            [
              {
                "node": "Send Safety Violation Alert",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Safety Violation Alert": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Worker Time Tracking": {
          "main": [
            [
              {
                "node": "Process Worker Time Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Worker Time Data": {
          "main": [
            [
              {
                "node": "Worker Time Issues?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Worker Time Issues?": {
          "main": [
            [
              {
                "node": "Send Worker Time Alert",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Worker Time Alert": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Material Inventory": {
          "main": [
            [
              {
                "node": "Process Material Inventory",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Material Inventory": {
          "main": [
            [
              {
                "node": "Materials Need Ordering?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Materials Need Ordering?": {
          "main": [
            [
              {
                "node": "Send Material Order Request",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Material Order Request": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Schedule Drone Photography": {
          "main": [
            [
              {
                "node": "Process Drone Schedule",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Drone Schedule": {
          "main": [
            [
              {
                "node": "Weather OK for Drone?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Weather Forecast": {
          "main": [
            [
              {
                "node": "Process Weather Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Weather Data": {
          "main": [
            [
              {
                "node": "Weather Alerts Needed?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Weather Alerts Needed?": {
          "main": [
            [
              {
                "node": "Send Weather Safety Alert",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Weather Safety Alert": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Weather OK for Drone?": {
          "main": [
            [
              {
                "node": "Confirm Drone Flight",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Cancel Drone Flight",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Confirm Drone Flight": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Cancel Drone Flight": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Security Patrol Data": {
          "main": [
            [
              {
                "node": "Process Security Patrol Data",
                "type": "main",
                "index": 0
              },
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Security Patrol Data": {
          "main": [
            [
              {
                "node": "Security Issues Found?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Security Issues Found?": {
          "main": [
            [
              {
                "node": "Send Security Alert",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Security Alert": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Vibration Sensor Subscription": {
          "main": [
            [
              {
                "node": "Process Vibration Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Vibration Data": {
          "main": [
            [
              {
                "node": "Vibration Alert Needed?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Vibration Alert Needed?": {
          "main": [
            [
              {
                "node": "Send Vibration Alert",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Vibration Alert": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Crane Wind Sensor Subscription": {
          "main": [
            [
              {
                "node": "Process Crane Wind Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Crane Wind Data": {
          "main": [
            [
              {
                "node": "Wind Action Needed?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wind Action Needed?": {
          "main": [
            [
              {
                "node": "Crane Shutdown Needed?",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Crane Shutdown Needed?": {
          "main": [
            [
              {
                "node": "Trigger Crane Shutdown",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Send Crane Wind Alert",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Trigger Crane Shutdown": {
          "main": [
            [
              {
                "node": "Send Crane Wind Alert",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Crane Wind Alert": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Contractor Progress": {
          "main": [
            [
              {
                "node": "Process Contractor Progress",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Contractor Progress": {
          "main": [
            [
              {
                "node": "Ready for Payment?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Ready for Payment?": {
          "main": [
            [
              {
                "node": "Process Contractor Payment",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Send Documentation Request",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Contractor Payment": {
          "main": [
            [
              {
                "node": "Send Payment Confirmation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Documentation Request": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Payment Confirmation": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Trigger Emergency Protocol": {
          "main": [
            [
              {
                "node": "Process Emergency Response",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Emergency Response": {
          "main": [
            [
              {
                "node": "Send Emergency Alert",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Emergency Alert": {
          "main": [
            [
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge All Features": {
          "main": [
            [
              {
                "node": "Generate Site Report",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Generate Site Report": {
          "main": [
            [
              {
                "node": "Save Report to Database",
                "type": "main",
                "index": 0
              },
              {
                "node": "Merge All Features",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Save Report to Database": {
          "main": [
            [
              {
                "node": "Send Daily Report Email",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Daily Report Email": {
          "main": [
            [
              {
                "node": "Respond to Webhook",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Error Trigger": {
          "main": [
            [
              {
                "node": "Process Error Information",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Error Information": {
          "main": [
            [
              {
                "node": "Send Error Alert",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "active": false,
      "settings": {},
      "versionId": "22626774-d28e-4c8f-be38-144d9ae0bde4",
      "meta": {
        "instanceId": "7221b4279d96e7954ef75d7c02b5031844eee3ca1705c75c15ad040f91c7b140",
        "userConfigurationRequired": {
          "hasRequiredValues": true,
          "analysis": [
            {
              "nodeId": "6",
              "nodeName": "Request Camera Compliance Data",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "authentication",
                  "description": "API authentication credentials",
                  "type": "credential",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "9",
              "nodeName": "Send Safety Violation Alert",
              "nodeType": "n8n-nodes-base.emailSend",
              "missingValues": [
                {
                  "parameter": "fromEmail",
                  "description": "Sender email address",
                  "example": "noreply@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "toEmail",
                  "description": "Recipient email address",
                  "example": "admin@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "smtp",
                  "description": "SMTP server configuration",
                  "type": "configuration",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "10",
              "nodeName": "Fetch Worker Time Tracking",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "authentication",
                  "description": "API authentication credentials",
                  "type": "credential",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "13",
              "nodeName": "Send Worker Time Alert",
              "nodeType": "n8n-nodes-base.emailSend",
              "missingValues": [
                {
                  "parameter": "fromEmail",
                  "description": "Sender email address",
                  "example": "noreply@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "toEmail",
                  "description": "Recipient email address",
                  "example": "admin@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "smtp",
                  "description": "SMTP server configuration",
                  "type": "configuration",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "14",
              "nodeName": "Fetch Material Inventory",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "authentication",
                  "description": "API authentication credentials",
                  "type": "credential",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "17",
              "nodeName": "Send Material Order Request",
              "nodeType": "n8n-nodes-base.emailSend",
              "missingValues": [
                {
                  "parameter": "fromEmail",
                  "description": "Sender email address",
                  "example": "noreply@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "toEmail",
                  "description": "Recipient email address",
                  "example": "admin@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "smtp",
                  "description": "SMTP server configuration",
                  "type": "configuration",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "18",
              "nodeName": "Schedule Drone Photography",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "authentication",
                  "description": "API authentication credentials",
                  "type": "credential",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "20",
              "nodeName": "Fetch Weather Forecast",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "authentication",
                  "description": "API authentication credentials",
                  "type": "credential",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "23",
              "nodeName": "Send Weather Safety Alert",
              "nodeType": "n8n-nodes-base.emailSend",
              "missingValues": [
                {
                  "parameter": "fromEmail",
                  "description": "Sender email address",
                  "example": "noreply@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "toEmail",
                  "description": "Recipient email address",
                  "example": "admin@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "smtp",
                  "description": "SMTP server configuration",
                  "type": "configuration",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "25",
              "nodeName": "Confirm Drone Flight",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "authentication",
                  "description": "API authentication credentials",
                  "type": "credential",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "26",
              "nodeName": "Cancel Drone Flight",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "authentication",
                  "description": "API authentication credentials",
                  "type": "credential",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "27",
              "nodeName": "Fetch Security Patrol Data",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "authentication",
                  "description": "API authentication credentials",
                  "type": "credential",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "30",
              "nodeName": "Send Security Alert",
              "nodeType": "n8n-nodes-base.emailSend",
              "missingValues": [
                {
                  "parameter": "fromEmail",
                  "description": "Sender email address",
                  "example": "noreply@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "toEmail",
                  "description": "Recipient email address",
                  "example": "admin@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "smtp",
                  "description": "SMTP server configuration",
                  "type": "configuration",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "31",
              "nodeName": "Vibration Sensor Subscription",
              "nodeType": "n8n-nodes-base.mqtt",
              "missingValues": [
                {
                  "parameter": "broker",
                  "description": "MQTT broker URL (e.g., your MQTT server address)",
                  "example": "mqtt://your-mqtt-broker.com:1883",
                  "type": "endpoint"
                },
                {
                  "parameter": "username",
                  "description": "MQTT broker username (if authentication required)",
                  "type": "credential",
                  "sensitive": true
                },
                {
                  "parameter": "password",
                  "description": "MQTT broker password (if authentication required)",
                  "type": "credential",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "34",
              "nodeName": "Send Vibration Alert",
              "nodeType": "n8n-nodes-base.emailSend",
              "missingValues": [
                {
                  "parameter": "fromEmail",
                  "description": "Sender email address",
                  "example": "noreply@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "toEmail",
                  "description": "Recipient email address",
                  "example": "admin@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "smtp",
                  "description": "SMTP server configuration",
                  "type": "configuration",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "35",
              "nodeName": "Crane Wind Sensor Subscription",
              "nodeType": "n8n-nodes-base.mqtt",
              "missingValues": [
                {
                  "parameter": "broker",
                  "description": "MQTT broker URL (e.g., your MQTT server address)",
                  "example": "mqtt://your-mqtt-broker.com:1883",
                  "type": "endpoint"
                },
                {
                  "parameter": "username",
                  "description": "MQTT broker username (if authentication required)",
                  "type": "credential",
                  "sensitive": true
                },
                {
                  "parameter": "password",
                  "description": "MQTT broker password (if authentication required)",
                  "type": "credential",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "39",
              "nodeName": "Trigger Crane Shutdown",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "authentication",
                  "description": "API authentication credentials",
                  "type": "credential",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "40",
              "nodeName": "Send Crane Wind Alert",
              "nodeType": "n8n-nodes-base.emailSend",
              "missingValues": [
                {
                  "parameter": "fromEmail",
                  "description": "Sender email address",
                  "example": "noreply@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "toEmail",
                  "description": "Recipient email address",
                  "example": "admin@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "smtp",
                  "description": "SMTP server configuration",
                  "type": "configuration",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "41",
              "nodeName": "Fetch Contractor Progress",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "authentication",
                  "description": "API authentication credentials",
                  "type": "credential",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "44",
              "nodeName": "Process Contractor Payment",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "authentication",
                  "description": "API authentication credentials",
                  "type": "credential",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "45",
              "nodeName": "Send Documentation Request",
              "nodeType": "n8n-nodes-base.emailSend",
              "missingValues": [
                {
                  "parameter": "fromEmail",
                  "description": "Sender email address",
                  "example": "noreply@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "toEmail",
                  "description": "Recipient email address",
                  "example": "admin@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "smtp",
                  "description": "SMTP server configuration",
                  "type": "configuration",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "46",
              "nodeName": "Send Payment Confirmation",
              "nodeType": "n8n-nodes-base.emailSend",
              "missingValues": [
                {
                  "parameter": "fromEmail",
                  "description": "Sender email address",
                  "example": "noreply@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "toEmail",
                  "description": "Recipient email address",
                  "example": "admin@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "smtp",
                  "description": "SMTP server configuration",
                  "type": "configuration",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "47",
              "nodeName": "Trigger Emergency Protocol",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "authentication",
                  "description": "API authentication credentials",
                  "type": "credential",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "49",
              "nodeName": "Send Emergency Alert",
              "nodeType": "n8n-nodes-base.emailSend",
              "missingValues": [
                {
                  "parameter": "fromEmail",
                  "description": "Sender email address",
                  "example": "noreply@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "toEmail",
                  "description": "Recipient email address",
                  "example": "admin@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "smtp",
                  "description": "SMTP server configuration",
                  "type": "configuration",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "52",
              "nodeName": "Save Report to Database",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "authentication",
                  "description": "API authentication credentials",
                  "type": "credential",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "53",
              "nodeName": "Send Daily Report Email",
              "nodeType": "n8n-nodes-base.emailSend",
              "missingValues": [
                {
                  "parameter": "fromEmail",
                  "description": "Sender email address",
                  "example": "noreply@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "toEmail",
                  "description": "Recipient email address",
                  "example": "admin@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "smtp",
                  "description": "SMTP server configuration",
                  "type": "configuration",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "56",
              "nodeName": "Send Error Alert",
              "nodeType": "n8n-nodes-base.emailSend",
              "missingValues": [
                {
                  "parameter": "fromEmail",
                  "description": "Sender email address",
                  "example": "noreply@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "toEmail",
                  "description": "Recipient email address",
                  "example": "admin@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "smtp",
                  "description": "SMTP server configuration",
                  "type": "configuration",
                  "sensitive": true
                }
              ]
            }
          ],
          "report": "## User Configuration Required\n\nThe following configurations need to be set up:\n\n### 🔐 Credentials Required\n\n#### HTTPREQUEST Credentials\nUsed by: Request Camera Compliance Data, Fetch Worker Time Tracking, Fetch Material Inventory, Schedule Drone Photography, Fetch Weather Forecast, Confirm Drone Flight, Cancel Drone Flight, Fetch Security Patrol Data, Trigger Crane Shutdown, Fetch Contractor Progress, Process Contractor Payment, Trigger Emergency Protocol, Save Report to Database\n\n- **authentication**\n\n#### MQTT Credentials\nUsed by: Vibration Sensor Subscription, Crane Wind Sensor Subscription\n\n- **username**\n- **password**\n\n### ⚙️ Other Configurations\n\n#### Send Safety Violation Alert\n- **fromEmail**: Sender email address\n  Example: `noreply@yourcompany.com`\n\n- **toEmail**: Recipient email address\n  Example: `admin@yourcompany.com`\n\n- **smtp**: SMTP server configuration\n\n#### Send Worker Time Alert\n- **fromEmail**: Sender email address\n  Example: `noreply@yourcompany.com`\n\n- **toEmail**: Recipient email address\n  Example: `admin@yourcompany.com`\n\n- **smtp**: SMTP server configuration\n\n#### Send Material Order Request\n- **fromEmail**: Sender email address\n  Example: `noreply@yourcompany.com`\n\n- **toEmail**: Recipient email address\n  Example: `admin@yourcompany.com`\n\n- **smtp**: SMTP server configuration\n\n#### Send Weather Safety Alert\n- **fromEmail**: Sender email address\n  Example: `noreply@yourcompany.com`\n\n- **toEmail**: Recipient email address\n  Example: `admin@yourcompany.com`\n\n- **smtp**: SMTP server configuration\n\n#### Send Security Alert\n- **fromEmail**: Sender email address\n  Example: `noreply@yourcompany.com`\n\n- **toEmail**: Recipient email address\n  Example: `admin@yourcompany.com`\n\n- **smtp**: SMTP server configuration\n\n#### Vibration Sensor Subscription\n- **broker**: MQTT broker URL (e.g., your MQTT server address)\n  Example: `mqtt://your-mqtt-broker.com:1883`\n\n#### Send Vibration Alert\n- **fromEmail**: Sender email address\n  Example: `noreply@yourcompany.com`\n\n- **toEmail**: Recipient email address\n  Example: `admin@yourcompany.com`\n\n- **smtp**: SMTP server configuration\n\n#### Crane Wind Sensor Subscription\n- **broker**: MQTT broker URL (e.g., your MQTT server address)\n  Example: `mqtt://your-mqtt-broker.com:1883`\n\n#### Send Crane Wind Alert\n- **fromEmail**: Sender email address\n  Example: `noreply@yourcompany.com`\n\n- **toEmail**: Recipient email address\n  Example: `admin@yourcompany.com`\n\n- **smtp**: SMTP server configuration\n\n#### Send Documentation Request\n- **fromEmail**: Sender email address\n  Example: `noreply@yourcompany.com`\n\n- **toEmail**: Recipient email address\n  Example: `admin@yourcompany.com`\n\n- **smtp**: SMTP server configuration\n\n#### Send Payment Confirmation\n- **fromEmail**: Sender email address\n  Example: `noreply@yourcompany.com`\n\n- **toEmail**: Recipient email address\n  Example: `admin@yourcompany.com`\n\n- **smtp**: SMTP server configuration\n\n#### Send Emergency Alert\n- **fromEmail**: Sender email address\n  Example: `noreply@yourcompany.com`\n\n- **toEmail**: Recipient email address\n  Example: `admin@yourcompany.com`\n\n- **smtp**: SMTP server configuration\n\n#### Send Daily Report Email\n- **fromEmail**: Sender email address\n  Example: `noreply@yourcompany.com`\n\n- **toEmail**: Recipient email address\n  Example: `admin@yourcompany.com`\n\n- **smtp**: SMTP server configuration\n\n#### Send Error Alert\n- **fromEmail**: Sender email address\n  Example: `noreply@yourcompany.com`\n\n- **toEmail**: Recipient email address\n  Example: `admin@yourcompany.com`\n\n- **smtp**: SMTP server configuration\n\n\n### 📋 Next Steps:\n1. Set up credentials in n8n (Settings → Credentials)\n2. Update workflow nodes with your specific values\n3. Test each connection before running the full workflow\n"
        }
      },
      "id": "xptmqa8ynt",
      "tags": [],
      "pinData": {}
    },
    "provider": "anthropic",
    "model": "claude-3-7-sonnet-20250219",
    "timestamp": "2025-07-23T03:18:16.641Z",
    "nodeCount": 57,
    "connectionCount": 55
  },
  {
    "id": "28b264eb-8794-43a1-9ff1-e6bdbfe95f71",
    "prompt": "To create a comprehensive workflow for monitoring new member joins in Slack or Discord and sending them a personalized welcome message, we will employ a series of n8n nodes. This workflow will involve setting up a trigger to detect new member joins, processing the necessary information, and sending a personalized message through Slack. Below is a detailed node-by-node structure:\n\n### Workflow Overview\n\n1. **Trigger Node:**\n   - **Slack/Discord Trigger Node**: To detect new member joins in Slack or Discord.\n   - Configuration: Set this node to monitor the specific Slack or Discord channel for new member events.\n\n2. **Processing Nodes:**\n   - **n8n-nodes-base.code**: This node will be used to construct the personalized welcome message.\n     - Input: New member data from the trigger node.\n     - Functionality: Use JavaScript to format the message with the member's name, team introduction, important links, channel guidelines, first week checklist, and buddy assignment.\n\n3. **Notification Nodes:**\n   - **Slack Node**: To send the personalized welcome message directly to the new member on Slack.\n     - Ensure Slack credentials are properly configured.\n     - Use the message template from the code node.\n\n4. **Error Handling Nodes:**\n   - **n8n-nodes-base.errorTrigger**: Global error catching for the entire workflow.\n   - **n8n-nodes-base.emailSend**: To send error notifications to admins if the workflow fails.\n     - Input: Error data from the Error Trigger.\n     - Configuration: Set up with admin email addresses for immediate alerts.\n\n5. **Conditional Logic and Parallel Processing:**\n   - **n8n-nodes-base.code**: Conditional checks for ensuring the message is only sent if the new member is valid.\n   - **Merge Node**: If there are multiple branches (e.g., different welcome messages for different roles), ensure they merge back together before sending the final message.\n\n### Detailed Node Connections\n\n1. **Slack/Discord Trigger Node** -> **n8n-nodes-base.code**\n   - This node processes the new member data and creates the personalized message.\n\n2. **n8n-nodes-base.code** -> **Slack Node**\n   - The constructed message is sent to the new member in Slack.\n\n3. **Error Handling:**\n   - **n8n-nodes-base.errorTrigger** -> **n8n-nodes-base.emailSend**\n     - Sends an error notification email if there is any failure in the workflow.\n\n### Additional Considerations\n\n- **Timing Considerations:**\n  - If there is a need to delay the message, consider using a Wait node to send the welcome message a few minutes after the member joins.\n\n- **Validation Checklist:**\n  - Ensure all nodes are properly connected.\n  - Test the Slack integration to confirm messages are sent correctly.\n  - Validate the error handling mechanism by simulating an error.\n\n- **Maintenance Tips:**\n  - Regularly update the links and resources in the welcome message to keep the content relevant.\n  - Monitor the error logs for any recurring issues and adjust the workflow as needed.\n\nBy following this structured approach, you can create a production-ready workflow in n8n that efficiently welcomes new members to your Slack or Discord channel with all the necessary introductions and resources.",
    "workflow": {
      "name": "Monitoring New Member Joins in Slack or Discord44",
      "nodes": [
        {
          "id": "1",
          "name": "Slack Trigger",
          "type": "n8n-nodes-base.slackTrigger",
          "typeVersion": 1,
          "position": [
            200,
            300
          ],
          "parameters": {
            "events": [
              "member_joined_channel"
            ],
            "channelId": {
              "__rl": true,
              "value": "C0123456789",
              "mode": "list",
              "cachedResultName": "general"
            }
          }
        },
        {
          "id": "2",
          "name": "Discord Trigger",
          "type": "n8n-nodes-base.discordTrigger",
          "typeVersion": 1,
          "position": [
            200,
            500
          ],
          "parameters": {
            "events": [
              "GUILD_MEMBER_ADD"
            ],
            "channel": {
              "__rl": true,
              "value": "123456789012345678",
              "mode": "list",
              "cachedResultName": "general"
            }
          }
        },
        {
          "id": "3",
          "name": "Merge Platform Triggers",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            400,
            400
          ],
          "parameters": {
            "mode": "mergeByPosition",
            "options": {}
          }
        },
        {
          "id": "4",
          "name": "Is Slack?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            600,
            400
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.hasOwnProperty('type') ? $json.type : '' }}",
                  "operation": "isNotEmpty"
                }
              ]
            }
          }
        },
        {
          "id": "5",
          "name": "Process Slack Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            800,
            300
          ],
          "parameters": {
            "functionCode": "// Extract Slack user data\nconst userData = $input.item.json;\n\nreturn {\n  platform: 'slack',\n  userId: userData.user,\n  channelId: userData.channel,\n  teamId: userData.team,\n  timestamp: userData.event_ts,\n  joinedAt: new Date().toISOString(),\n  rawData: userData\n};"
          }
        },
        {
          "id": "6",
          "name": "Process Discord Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            800,
            500
          ],
          "parameters": {
            "functionCode": "// Extract Discord user data\nconst userData = $input.item.json;\n\nreturn {\n  platform: 'discord',\n  userId: userData.user ? userData.user.id : userData.id,\n  username: userData.user ? userData.user.username : userData.username,\n  discriminator: userData.user ? userData.user.discriminator : userData.discriminator,\n  avatarUrl: userData.user ? `https://cdn.discordapp.com/avatars/${userData.user.id}/${userData.user.avatar}.png` : '',\n  guildId: userData.guild_id,\n  joinedAt: new Date().toISOString(),\n  rawData: userData\n};"
          }
        },
        {
          "id": "7",
          "name": "Merge User Data",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            1000,
            400
          ],
          "parameters": {
            "mode": "mergeByPosition",
            "options": {}
          }
        },
        {
          "id": "8",
          "name": "Get Slack User Details",
          "type": "n8n-nodes-base.slack",
          "typeVersion": 1,
          "position": [
            1200,
            300
          ],
          "parameters": {
            "authentication": "oAuth2",
            "operation": "lookupUser",
            "userId": "={{ $json.userId }}"
          }
        },
        {
          "id": "9",
          "name": "Get Discord User Details",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1200,
            500
          ],
          "parameters": {
            "method": "GET",
            "options": {
              "headers": {
                "Authorization": "=Bot {{ $credentials.token }}"
              }
            },
            "url": "=https://discord.com/api/v10/guilds/{{ $json.guildId }}/members/{{ $json.userId }}"
          }
        },
        {
          "id": "10",
          "name": "Route By Platform",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1400,
            400
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.platform }}",
                  "value2": "slack"
                }
              ]
            }
          }
        },
        {
          "id": "11",
          "name": "Enrich Slack User",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1600,
            300
          ],
          "parameters": {
            "functionCode": "// Enrich Slack user data\nconst userData = $input.item.json;\nconst userDetails = $input.item.json.user || {};\n\nreturn {\n  ...userData,\n  fullName: userDetails.real_name || userDetails.name || 'New Member',\n  firstName: (userDetails.real_name || userDetails.name || 'New Member').split(' ')[0],\n  email: userDetails.profile ? userDetails.profile.email : '',\n  timezone: userDetails.tz || 'UTC',\n  profileImage: userDetails.profile ? userDetails.profile.image_192 : '',\n  isBot: userDetails.is_bot === true,\n  enrichedAt: new Date().toISOString()\n};"
          }
        },
        {
          "id": "12",
          "name": "Enrich Discord User",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1600,
            500
          ],
          "parameters": {
            "functionCode": "// Enrich Discord user data\nconst userData = $input.item.json;\nconst userDetails = $input.item.json.rawData || {};\n\nreturn {\n  ...userData,\n  fullName: userData.username || 'New Member',\n  firstName: userData.username || 'New Member',\n  isBot: userDetails.bot === true,\n  roles: userDetails.roles || [],\n  joinedAt: userDetails.joined_at || userData.joinedAt,\n  enrichedAt: new Date().toISOString()\n};"
          }
        },
        {
          "id": "13",
          "name": "Merge Enriched Data",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            1800,
            400
          ],
          "parameters": {
            "mode": "mergeByPosition",
            "options": {}
          }
        },
        {
          "id": "14",
          "name": "Validate User",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            2000,
            400
          ],
          "parameters": {
            "functionCode": "// Filter out bots and validate user data\nconst userData = $input.item.json;\n\n// Skip bots\nif (userData.isBot) {\n  return {\n    valid: false,\n    reason: 'Bot accounts should not receive welcome messages',\n    userData\n  };\n}\n\n// Validate required fields\nif (!userData.userId || !userData.platform) {\n  return {\n    valid: false,\n    reason: 'Missing required user data',\n    userData\n  };\n}\n\nreturn {\n  valid: true,\n  userData\n};"
          }
        },
        {
          "id": "15",
          "name": "Is Valid User?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            2200,
            400
          ],
          "parameters": {
            "conditions": {
              "boolean": [
                {
                  "value1": "={{ $json.valid }}",
                  "value2": true
                }
              ]
            }
          }
        },
        {
          "id": "16",
          "name": "Create Welcome Message",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            2400,
            300
          ],
          "parameters": {
            "functionCode": "// Create welcome message\nconst userData = $input.item.json.userData;\n\n// Common resources\nconst resources = {\n  teamIntro: 'https://company.com/about-us',\n  guidelines: 'https://company.com/guidelines',\n  firstWeekChecklist: 'https://company.com/onboarding/first-week',\n  supportChannel: userData.platform === 'slack' ? '#help-desk' : '#support',\n  introChannel: userData.platform === 'slack' ? '#introductions' : '#introduce-yourself'\n};\n\n// Personalized message\nlet message;\nif (userData.platform === 'slack') {\n  message = `Hi ${userData.firstName || 'there'}! :wave: Welcome to the team! :rocket:\\n\\n` +\n    `We're excited to have you join us. Here are some resources to help you get started:\\n\\n` +\n    `• *Team Introduction:* ${resources.teamIntro}\\n` +\n    `• *Channel Guidelines:* ${resources.guidelines}\\n` +\n    `• *First Week Checklist:* ${resources.firstWeekChecklist}\\n\\n` +\n    `Please introduce yourself in ${resources.introChannel} and feel free to ask any questions in ${resources.supportChannel}.\\n\\n` +\n    `Your onboarding buddy will reach out to you shortly!`;\n} else {\n  // Discord formatting is slightly different\n  message = `**Hi ${userData.firstName || 'there'}!** :wave: Welcome to the server! :rocket:\\n\\n` +\n    `We're excited to have you join us. Here are some resources to help you get started:\\n\\n` +\n    `• **Team Introduction:** ${resources.teamIntro}\\n` +\n    `• **Channel Guidelines:** ${resources.guidelines}\\n` +\n    `• **First Week Checklist:** ${resources.firstWeekChecklist}\\n\\n` +\n    `Please introduce yourself in ${resources.introChannel} and feel free to ask any questions in ${resources.supportChannel}.\\n\\n` +\n    `Your onboarding buddy will reach out to you shortly!`;\n}\n\nreturn {\n  ...userData,\n  welcomeMessage: message,\n  resources\n};"
          }
        },
        {
          "id": "17",
          "name": "Route Welcome Message",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            2600,
            300
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.platform }}",
                  "value2": "slack"
                }
              ]
            }
          }
        },
        {
          "id": "18",
          "name": "Send Slack Welcome DM",
          "type": "n8n-nodes-base.slack",
          "typeVersion": 1,
          "position": [
            2800,
            200
          ],
          "parameters": {
            "authentication": "oAuth2",
            "chatId": "={{ $json.userId }}",
            "text": "={{ $json.welcomeMessage }}",
            "otherOptions": {
              "unfurl_links": false,
              "unfurl_media": false
            }
          }
        },
        {
          "id": "19",
          "name": "Create Discord DM Channel",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            2800,
            400
          ],
          "parameters": {
            "method": "POST",
            "options": {
              "headers": {
                "Authorization": "=Bot {{ $credentials.token }}",
                "Content-Type": "application/json"
              }
            },
            "url": "=https://discord.com/api/v10/users/@me/channels",
            "bodyParametersUi": {
              "parameter": [
                {
                  "name": "recipient_id",
                  "value": "={{ $json.userId }}"
                }
              ]
            }
          }
        },
        {
          "id": "20",
          "name": "Send Discord Welcome DM",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            3000,
            400
          ],
          "parameters": {
            "method": "POST",
            "options": {
              "headers": {
                "Authorization": "=Bot {{ $credentials.token }}",
                "Content-Type": "application/json"
              }
            },
            "url": "=https://discord.com/api/v10/channels/{{ $json.id }}/messages",
            "bodyParametersUi": {
              "parameter": [
                {
                  "name": "content",
                  "value": "={{ $node[\"Create Welcome Message\"].json.welcomeMessage }}"
                }
              ]
            }
          }
        },
        {
          "id": "21",
          "name": "Merge Notification Results",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            3200,
            300
          ],
          "parameters": {
            "mode": "mergeByPosition",
            "options": {}
          }
        },
        {
          "id": "22",
          "name": "Log Welcome Message",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            3400,
            300
          ],
          "parameters": {
            "functionCode": "// Log welcome message sent\nconst userData = $input.item.json;\nconst timestamp = new Date().toISOString();\n\nreturn {\n  event: 'welcome_message_sent',\n  platform: userData.platform,\n  userId: userData.userId,\n  username: userData.fullName || userData.firstName || 'Unknown',\n  timestamp,\n  success: true,\n  messageType: 'welcome',\n  userData\n};"
          }
        },
        {
          "id": "23",
          "name": "Log To Admin Channel",
          "type": "n8n-nodes-base.slack",
          "typeVersion": 1,
          "position": [
            3600,
            300
          ],
          "parameters": {
            "authentication": "oAuth2",
            "channelId": {
              "__rl": true,
              "value": "C0123456789",
              "mode": "list",
              "cachedResultName": "onboarding-log"
            },
            "text": "=:white_check_mark: Welcome message sent to *{{ $json.username }}* ({{ $json.platform }})"
          }
        },
        {
          "id": "24",
          "name": "Log Skipped User",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            2400,
            500
          ],
          "parameters": {
            "functionCode": "// Log skipped user\nconst userData = $input.item.json.userData;\nconst reason = $input.item.json.reason;\nconst timestamp = new Date().toISOString();\n\nreturn {\n  event: 'welcome_message_skipped',\n  platform: userData.platform,\n  userId: userData.userId,\n  username: userData.fullName || userData.firstName || 'Unknown',\n  timestamp,\n  success: false,\n  reason,\n  userData\n};"
          }
        },
        {
          "id": "25",
          "name": "Log Skip To Admin Channel",
          "type": "n8n-nodes-base.slack",
          "typeVersion": 1,
          "position": [
            2600,
            500
          ],
          "parameters": {
            "authentication": "oAuth2",
            "channelId": {
              "__rl": true,
              "value": "C0123456789",
              "mode": "list",
              "cachedResultName": "onboarding-log"
            },
            "text": "=:information_source: Skipped welcome message for *{{ $json.username }}* ({{ $json.platform }}). Reason: {{ $json.reason }}"
          }
        },
        {
          "id": "26",
          "name": "Create Admin Notification",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            3800,
            300
          ],
          "parameters": {
            "functionCode": "// Create notification for admins\nconst userData = $input.item.json;\n\nlet platform = userData.platform || 'unknown';\nlet username = userData.fullName || userData.firstName || userData.username || 'Unknown User';\nlet userId = userData.userId || 'unknown';\n\nreturn {\n  subject: `New Member Joined: ${username} on ${platform.charAt(0).toUpperCase() + platform.slice(1)}`,\n  body: `A new member has joined your ${platform} workspace!\\n\\n` +\n        `Name: ${username}\\n` +\n        `User ID: ${userId}\\n` +\n        `Platform: ${platform}\\n` +\n        `Joined At: ${new Date().toLocaleString()}\\n\\n` +\n        `A welcome message has been automatically sent to this user.`\n};"
          }
        },
        {
          "id": "27",
          "name": "Send Admin Email",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            4000,
            300
          ],
          "parameters": {
            "options": {},
            "fromEmail": {
              "fromEmail": "notifications@company.com"
            },
            "subject": "={{ $json.subject }}",
            "text": "={{ $json.body }}",
            "toRecipients": "[object Object]"
          }
        },
        {
          "id": "28",
          "name": "Error Trigger",
          "type": "n8n-nodes-base.errorTrigger",
          "typeVersion": 1,
          "position": [
            200,
            700
          ],
          "parameters": {}
        },
        {
          "id": "29",
          "name": "Format Error Message",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            400,
            700
          ],
          "parameters": {
            "functionCode": "// Process error data\nconst error = $input.item.json.error;\nconst execution = $input.item.json.execution;\nconst workflow = $input.item.json.workflow;\nconst timestamp = new Date().toISOString();\n\nreturn {\n  event: 'workflow_error',\n  workflow: {\n    id: workflow.id,\n    name: workflow.name\n  },\n  execution: {\n    id: execution.id,\n    mode: execution.mode,\n    retryOf: execution.retryOf,\n    startedAt: execution.startedAt\n  },\n  error: {\n    message: error.message,\n    stack: error.stack,\n    timestamp\n  },\n  subject: `ERROR: Welcome Message Workflow Failed`,\n  body: `The welcome message workflow encountered an error at ${new Date().toLocaleString()}\\n\\n` +\n        `Error: ${error.message}\\n\\n` +\n        `Workflow: ${workflow.name} (ID: ${workflow.id})\\n` +\n        `Execution ID: ${execution.id}\\n\\n` +\n        `Stack Trace:\\n${error.stack}\\n\\n` +\n        `Please check the n8n logs for more details.`\n};"
          }
        },
        {
          "id": "30",
          "name": "Send Error Email",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            600,
            700
          ],
          "parameters": {
            "options": {},
            "fromEmail": {
              "fromEmail": "alerts@company.com"
            },
            "subject": "={{ $json.subject }}",
            "text": "={{ $json.body }}",
            "toRecipients": "[object Object]"
          }
        },
        {
          "id": "31",
          "name": "Send Error To Slack",
          "type": "n8n-nodes-base.slack",
          "typeVersion": 1,
          "position": [
            800,
            700
          ],
          "parameters": {
            "authentication": "oAuth2",
            "channelId": {
              "__rl": true,
              "value": "C0123456789",
              "mode": "list",
              "cachedResultName": "alerts"
            },
            "text": "=:rotating_light: *WORKFLOW ERROR*: Welcome Message workflow failed\\n\\n*Error:* {{ $json.error.message }}\\n*Time:* {{ $json.error.timestamp }}\\n\\nCheck admin email for details."
          }
        }
      ],
      "connections": {
        "Slack Trigger": {
          "main": [
            [
              {
                "node": "Merge Platform Triggers",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Discord Trigger": {
          "main": [
            [
              {
                "node": "Merge Platform Triggers",
                "type": "main",
                "index": 1
              }
            ]
          ]
        },
        "Merge Platform Triggers": {
          "main": [
            [
              {
                "node": "Is Slack?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Slack?": {
          "main": [
            [
              {
                "node": "Process Slack Data",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Process Discord Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Slack Data": {
          "main": [
            [
              {
                "node": "Merge User Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Discord Data": {
          "main": [
            [
              {
                "node": "Merge User Data",
                "type": "main",
                "index": 1
              }
            ]
          ]
        },
        "Merge User Data": {
          "main": [
            [
              {
                "node": "Route By Platform",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Slack User Details": {
          "main": [
            [
              {
                "node": "Enrich Slack User",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Discord User Details": {
          "main": [
            [
              {
                "node": "Enrich Discord User",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Route By Platform": {
          "main": [
            [
              {
                "node": "Get Slack User Details",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Get Discord User Details",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Enrich Slack User": {
          "main": [
            [
              {
                "node": "Merge Enriched Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Enrich Discord User": {
          "main": [
            [
              {
                "node": "Merge Enriched Data",
                "type": "main",
                "index": 1
              }
            ]
          ]
        },
        "Merge Enriched Data": {
          "main": [
            [
              {
                "node": "Validate User",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate User": {
          "main": [
            [
              {
                "node": "Is Valid User?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Valid User?": {
          "main": [
            [
              {
                "node": "Create Welcome Message",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Log Skipped User",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create Welcome Message": {
          "main": [
            [
              {
                "node": "Route Welcome Message",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Route Welcome Message": {
          "main": [
            [
              {
                "node": "Send Slack Welcome DM",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Create Discord DM Channel",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Slack Welcome DM": {
          "main": [
            [
              {
                "node": "Merge Notification Results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create Discord DM Channel": {
          "main": [
            [
              {
                "node": "Send Discord Welcome DM",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Discord Welcome DM": {
          "main": [
            [
              {
                "node": "Merge Notification Results",
                "type": "main",
                "index": 1
              }
            ]
          ]
        },
        "Merge Notification Results": {
          "main": [
            [
              {
                "node": "Log Welcome Message",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Log Welcome Message": {
          "main": [
            [
              {
                "node": "Log To Admin Channel",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Log To Admin Channel": {
          "main": [
            [
              {
                "node": "Create Admin Notification",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Log Skipped User": {
          "main": [
            [
              {
                "node": "Log Skip To Admin Channel",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create Admin Notification": {
          "main": [
            [
              {
                "node": "Send Admin Email",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Error Trigger": {
          "main": [
            [
              {
                "node": "Format Error Message",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Error Message": {
          "main": [
            [
              {
                "node": "Send Error Email",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Error Email": {
          "main": [
            [
              {
                "node": "Send Error To Slack",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "active": false,
      "settings": {},
      "versionId": "ffbce625-662a-429d-af54-01ffc9e1f426",
      "meta": {
        "instanceId": "7221b4279d96e7954ef75d7c02b5031844eee3ca1705c75c15ad040f91c7b140",
        "userConfigurationRequired": {
          "hasRequiredValues": true,
          "analysis": [
            {
              "nodeId": "8",
              "nodeName": "Get Slack User Details",
              "nodeType": "n8n-nodes-base.slack",
              "missingValues": [
                {
                  "parameter": "channel",
                  "description": "Slack channel ID or name",
                  "example": "#general or C1234567890",
                  "type": "identifier"
                }
              ]
            },
            {
              "nodeId": "9",
              "nodeName": "Get Discord User Details",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "authentication",
                  "description": "API authentication credentials",
                  "type": "credential",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "18",
              "nodeName": "Send Slack Welcome DM",
              "nodeType": "n8n-nodes-base.slack",
              "missingValues": [
                {
                  "parameter": "channel",
                  "description": "Slack channel ID or name",
                  "example": "#general or C1234567890",
                  "type": "identifier"
                }
              ]
            },
            {
              "nodeId": "19",
              "nodeName": "Create Discord DM Channel",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "authentication",
                  "description": "API authentication credentials",
                  "type": "credential",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "20",
              "nodeName": "Send Discord Welcome DM",
              "nodeType": "n8n-nodes-base.httpRequest",
              "missingValues": [
                {
                  "parameter": "authentication",
                  "description": "API authentication credentials",
                  "type": "credential",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "23",
              "nodeName": "Log To Admin Channel",
              "nodeType": "n8n-nodes-base.slack",
              "missingValues": [
                {
                  "parameter": "channel",
                  "description": "Slack channel ID or name",
                  "example": "#general or C1234567890",
                  "type": "identifier"
                }
              ]
            },
            {
              "nodeId": "25",
              "nodeName": "Log Skip To Admin Channel",
              "nodeType": "n8n-nodes-base.slack",
              "missingValues": [
                {
                  "parameter": "channel",
                  "description": "Slack channel ID or name",
                  "example": "#general or C1234567890",
                  "type": "identifier"
                }
              ]
            },
            {
              "nodeId": "27",
              "nodeName": "Send Admin Email",
              "nodeType": "n8n-nodes-base.emailSend",
              "missingValues": [
                {
                  "parameter": "toEmail",
                  "description": "Recipient email address",
                  "example": "admin@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "smtp",
                  "description": "SMTP server configuration",
                  "type": "configuration",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "30",
              "nodeName": "Send Error Email",
              "nodeType": "n8n-nodes-base.emailSend",
              "missingValues": [
                {
                  "parameter": "toEmail",
                  "description": "Recipient email address",
                  "example": "admin@yourcompany.com",
                  "type": "identifier"
                },
                {
                  "parameter": "smtp",
                  "description": "SMTP server configuration",
                  "type": "configuration",
                  "sensitive": true
                }
              ]
            },
            {
              "nodeId": "31",
              "nodeName": "Send Error To Slack",
              "nodeType": "n8n-nodes-base.slack",
              "missingValues": [
                {
                  "parameter": "channel",
                  "description": "Slack channel ID or name",
                  "example": "#general or C1234567890",
                  "type": "identifier"
                }
              ]
            }
          ],
          "report": "## User Configuration Required\n\nThe following configurations need to be set up:\n\n### 🔐 Credentials Required\n\n#### HTTPREQUEST Credentials\nUsed by: Get Discord User Details, Create Discord DM Channel, Send Discord Welcome DM\n\n- **authentication**\n\n### ⚙️ Other Configurations\n\n#### Get Slack User Details\n- **channel**: Slack channel ID or name\n  Example: `#general or C1234567890`\n\n#### Send Slack Welcome DM\n- **channel**: Slack channel ID or name\n  Example: `#general or C1234567890`\n\n#### Log To Admin Channel\n- **channel**: Slack channel ID or name\n  Example: `#general or C1234567890`\n\n#### Log Skip To Admin Channel\n- **channel**: Slack channel ID or name\n  Example: `#general or C1234567890`\n\n#### Send Admin Email\n- **toEmail**: Recipient email address\n  Example: `admin@yourcompany.com`\n\n- **smtp**: SMTP server configuration\n\n#### Send Error Email\n- **toEmail**: Recipient email address\n  Example: `admin@yourcompany.com`\n\n- **smtp**: SMTP server configuration\n\n#### Send Error To Slack\n- **channel**: Slack channel ID or name\n  Example: `#general or C1234567890`\n\n\n### 📋 Next Steps:\n1. Set up credentials in n8n (Settings → Credentials)\n2. Update workflow nodes with your specific values\n3. Test each connection before running the full workflow\n"
        }
      },
      "id": "lkho6s02syi",
      "tags": [],
      "pinData": {}
    },
    "provider": "anthropic",
    "model": "claude-3-7-sonnet-20250219",
    "timestamp": "2025-07-23T03:40:25.657Z",
    "nodeCount": 31,
    "connectionCount": 28
  },
  {
    "id": "f33c7916-bb48-4295-88d0-33fe054601e1",
    "prompt": "To create a comprehensive newsletter automation in n8n, we will follow a structured plan to ensure all parts of the process are connected and work together seamlessly. Here is a step-by-step breakdown of the workflow:\n\n### Workflow Structure\n\n1. **Main Entry Point:**\n   - **Cron Node**: Schedule the workflow to run every Friday at 10 AM.\n\n2. **Fetch and Filter RSS Feed:**\n   - **HTTP Request Node**: Fetch the RSS feed data.\n   - **Function Node**: Filter the posts to collect only those from the past week.\n\n3. **Data Formatting and Preparation:**\n   - **Function Node**: Extract and prepare the featured image and excerpt for each post.\n   - **Set Node**: Format the posts into an email-friendly structure.\n\n4. **Email Composition:**\n   - **Set Node**: Add social sharing buttons and other static content to the email template.\n   - **Function Node**: Compile the final email content.\n\n5. **Sending Emails:**\n   - **Email Send Node**: Send the newsletter email to subscribers.\n\n6. **Engagement Tracking:**\n   - **Function Node**: Add tracking parameters to links for engagement metrics.\n   - **HTTP Request Node**: Send engagement data to the tracking system.\n\n7. **Error Handling:**\n   - **Error Trigger Node**: Catch any errors in the workflow.\n   - **Email Send Node**: Notify admin about the error.\n\n### Node Connections\n\n1. **Cron Node** (Trigger)\n   - **Cron Node**: Set to trigger every Friday at 10 AM.\n   - Output -> **HTTP Request Node**\n\n2. **HTTP Request Node** (Fetch RSS Feed)\n   - **HTTP Request Node**: Configure to fetch the RSS feed URL.\n   - Output -> **Function Node** (Filter Posts)\n\n3. **Function Node** (Filter Posts)\n   - **Function Node**: Use JavaScript to filter posts from the past week.\n   - Output -> **Function Node** (Prepare Content)\n\n4. **Function Node** (Prepare Content)\n   - **Function Node**: Extract featured images and excerpts.\n   - Output -> **Set Node** (Format Email)\n\n5. **Set Node** (Format Email)\n   - **Set Node**: Structure email with posts, images, excerpts, and social buttons.\n   - Output -> **Function Node** (Compile Email)\n\n6. **Function Node** (Compile Email)\n   - **Function Node**: Combine all elements into a final email HTML.\n   - Output -> **Email Send Node**\n\n7. **Email Send Node** (Send Email)\n   - **Email Send Node**: Configure SMTP settings to send the newsletter.\n   - Output -> **Function Node** (Engagement Tracking)\n\n8. **Function Node** (Engagement Tracking)\n   - **Function Node**: Add UTM parameters to links.\n   - Output -> **HTTP Request Node** (Send Tracking Data)\n\n9. **HTTP Request Node** (Send Tracking Data)\n   - **HTTP Request Node**: Send tracking data to analytics platform.\n   - Output -> End of Workflow\n\n10. **Error Trigger Node** (Error Handling)\n    - **Error Trigger Node**: Capture any errors.\n    - Output -> **Email Send Node** (Notify Admin)\n\n11. **Email Send Node** (Notify Admin)\n    - **Email Send Node**: Send error notification to admin.\n\n### Validation and Considerations\n\n- Ensure all nodes are connected without any isolated chains.\n- Validate all paths in decision nodes (e.g., if posts are not found).\n- Test email formatting and track delivery status.\n- Ensure error handling covers all potential failure points.\n- Check that tracking links are correctly formatted and report data accurately.\n\nBy following these steps, you will have a fully automated and robust newsletter workflow that checks an RSS feed, compiles content, formats it, sends emails, and tracks engagement metrics every Friday at 10 AM.",
    "workflow": {
      "name": "Newsletter RSS to Email",
      "nodes": [
        {
          "id": "1",
          "name": "Cron Trigger",
          "type": "n8n-nodes-base.cron",
          "typeVersion": 1,
          "position": [
            100,
            100
          ],
          "parameters": {
            "triggerTimes": {
              "item": [
                {
                  "mode": "everyWeek",
                  "weekDay": 5,
                  "hour": 10,
                  "minute": 0
                }
              ]
            }
          }
        },
        {
          "id": "2",
          "name": "Fetch RSS Feed",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            300,
            100
          ],
          "parameters": {
            "url": "https://example.com/feed.xml",
            "method": "GET",
            "responseFormat": "xml"
          }
        },
        {
          "id": "3",
          "name": "Filter Recent Posts",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            100
          ],
          "parameters": {
            "functionCode": "// Get current date and date from 7 days ago\nconst now = new Date();\nconst oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n\n// Get the RSS items from the input\nconst items = $input.all()[0].json.rss.channel.item;\n\n// Filter items from the past week\nconst recentItems = Array.isArray(items) \n  ? items.filter(item => {\n      const pubDate = new Date(item.pubDate);\n      return pubDate >= oneWeekAgo;\n    })\n  : [];\n\nreturn [{ json: { recentPosts: recentItems } }];"
          }
        },
        {
          "id": "4",
          "name": "Prepare Email Content",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            100
          ],
          "parameters": {
            "functionCode": "const posts = $input.all()[0].json.recentPosts;\n\n// Create HTML for each post\nlet emailContent = '<h1>Weekly Newsletter</h1>';\n\nif (posts.length === 0) {\n  emailContent += '<p>No new posts this week.</p>';\n} else {\n  emailContent += '<p>Here are the latest posts from our blog:</p>';\n  \n  posts.forEach(post => {\n    // Extract featured image if available\n    let featuredImage = '';\n    if (post.enclosure && post.enclosure['@_url']) {\n      featuredImage = `<img src=\"${post.enclosure['@_url']}\" style=\"max-width: 100%; height: auto;\" />`;\n    }\n    \n    // Extract excerpt or use description\n    let excerpt = post.description;\n    if (excerpt.length > 150) {\n      excerpt = excerpt.substring(0, 150) + '...';\n    }\n    \n    // Add UTM parameters for tracking\n    const trackingUrl = post.link.includes('?') \n      ? `${post.link}&utm_source=newsletter&utm_medium=email&utm_campaign=weekly` \n      : `${post.link}?utm_source=newsletter&utm_medium=email&utm_campaign=weekly`;\n    \n    // Create post HTML\n    emailContent += `\n      <div style=\"margin-bottom: 30px;\">\n        <h2><a href=\"${trackingUrl}\">${post.title}</a></h2>\n        ${featuredImage}\n        <p>${excerpt}</p>\n        <p><a href=\"${trackingUrl}\">Read more</a></p>\n      </div>\n    `;\n  });\n}\n\n// Add social sharing buttons\nemailContent += `\n  <div style=\"margin-top: 30px; border-top: 1px solid #eee; padding-top: 20px;\">\n    <p>Follow us on social media:</p>\n    <p>\n      <a href=\"https://twitter.com/example\">Twitter</a> | \n      <a href=\"https://facebook.com/example\">Facebook</a> | \n      <a href=\"https://instagram.com/example\">Instagram</a>\n    </p>\n  </div>\n`;\n\nreturn [{ json: { \n  emailSubject: 'Weekly Newsletter: ' + new Date().toLocaleDateString(),\n  emailContent: emailContent,\n  postsCount: posts.length\n}}];"
          }
        },
        {
          "id": "5",
          "name": "Cron Trigger",
          "type": "n8n-nodes-base.cron",
          "typeVersion": 1,
          "position": [
            900,
            100
          ],
          "parameters": {
            "triggerTimes": {
              "item": [
                {
                  "mode": "everyWeek",
                  "hour": 10,
                  "minute": 0,
                  "dayOfWeek": 5
                }
              ]
            }
          }
        },
        {
          "id": "6",
          "name": "Fetch RSS Feed",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            1100,
            100
          ],
          "parameters": {
            "url": "={{$json.rss_feed_url || 'https://example.com/rss'}}",
            "method": "GET",
            "authentication": "none",
            "options": {}
          }
        },
        {
          "id": "7",
          "name": "Filter Recent Posts",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            100
          ],
          "parameters": {
            "functionCode": "// Get current date and date from one week ago\nconst currentDate = new Date();\nconst oneWeekAgo = new Date(currentDate);\noneWeekAgo.setDate(currentDate.getDate() - 7);\n\n// Parse the RSS feed and filter posts from the last week\nconst xml = items[0].json.data;\nconst parser = new DOMParser();\nconst xmlDoc = parser.parseFromString(xml, \"text/xml\");\nconst posts = xmlDoc.getElementsByTagName(\"item\");\n\nconst recentPosts = [];\n\nfor (let i = 0; i < posts.length; i++) {\n  const post = posts[i];\n  const pubDateStr = post.getElementsByTagName(\"pubDate\")[0].textContent;\n  const pubDate = new Date(pubDateStr);\n  \n  // Only include posts from the last week\n  if (pubDate >= oneWeekAgo) {\n    const title = post.getElementsByTagName(\"title\")[0].textContent;\n    const link = post.getElementsByTagName(\"link\")[0].textContent;\n    const description = post.getElementsByTagName(\"description\")[0].textContent;\n    \n    // Try to extract featured image from content or description\n    let featuredImage = \"\";\n    const content = post.getElementsByTagName(\"content:encoded\")[0];\n    if (content) {\n      const imgMatch = content.textContent.match(/<img[^>]+src=\"([^\"]+)\"/i);\n      if (imgMatch) featuredImage = imgMatch[1];\n    }\n    \n    recentPosts.push({\n      title,\n      link,\n      description,\n      pubDate,\n      featuredImage\n    });\n  }\n}\n\nreturn [{ json: { recentPosts } }];"
          }
        },
        {
          "id": "8",
          "name": "Format Email Content",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            1500,
            100
          ],
          "parameters": {
            "values": {
              "string": [
                {
                  "name": "emailSubject",
                  "value": "Weekly Newsletter - {{ $now.format(\"MMMM D, YYYY\") }}"
                },
                {
                  "name": "emailHtml",
                  "value": "<!DOCTYPE html>\n<html>\n<head>\n  <style>\n    body { font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; }\n    .post { margin-bottom: 30px; }\n    .post img { max-width: 100%; height: auto; }\n    .post-title { color: #333; font-size: 18px; }\n    .post-excerpt { color: #666; }\n    .social-share { margin-top: 5px; }\n    .social-share a { margin-right: 10px; }\n    .footer { margin-top: 30px; font-size: 12px; color: #999; }\n  </style>\n</head>\n<body>\n  <h1>Weekly Newsletter</h1>\n  <p>Here are the latest posts from our blog:</p>\n  \n  {% for post in $json.recentPosts %}\n  <div class=\"post\">\n    {% if post.featuredImage %}\n    <img src=\"{{ post.featuredImage }}\" alt=\"{{ post.title }}\">\n    {% endif %}\n    <h2 class=\"post-title\"><a href=\"{{ post.link }}?utm_source=newsletter&utm_medium=email\">{{ post.title }}</a></h2>\n    <div class=\"post-excerpt\">{{ post.description }}</div>\n    <div class=\"social-share\">\n      <a href=\"https://twitter.com/intent/tweet?url={{ post.link }}&text={{ post.title }}\">Share on Twitter</a>\n      <a href=\"https://www.facebook.com/sharer/sharer.php?u={{ post.link }}\">Share on Facebook</a>\n    </div>\n  </div>\n  {% endfor %}\n  \n  <div class=\"footer\">\n    <p>You're receiving this email because you subscribed to our newsletter.</p>\n    <p>© {{ $now.format(\"YYYY\") }} Our Company. All rights reserved.</p>\n  </div>\n</body>\n</html>"
                }
              ]
            },
            "options": {}
          }
        },
        {
          "id": "9",
          "name": "HTTP Request (Fetch RSS)",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            100,
            250
          ],
          "parameters": {
            "url": "={{ $json.rss_feed_url || 'https://example.com/feed.xml' }}",
            "method": "GET",
            "authentication": "none",
            "options": {
              "timeout": 10000
            }
          }
        },
        {
          "id": "10",
          "name": "XML to JSON",
          "type": "n8n-nodes-base.xml",
          "typeVersion": 1,
          "position": [
            300,
            250
          ],
          "parameters": {
            "options": {
              "compact": true
            }
          }
        },
        {
          "id": "11",
          "name": "Filter Posts From Past Week",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            250
          ],
          "parameters": {
            "functionCode": "// Get current date and date from 7 days ago\nconst currentDate = new Date();\nconst oneWeekAgo = new Date();\noneWeekAgo.setDate(currentDate.getDate() - 7);\n\n// Extract items from the RSS feed\nlet items = [];\nconst rssData = $input.item.json;\n\n// Handle different RSS feed structures\nif (rssData.rss && rssData.rss.channel && rssData.rss.channel.item) {\n  // Standard RSS format\n  items = Array.isArray(rssData.rss.channel.item) \n    ? rssData.rss.channel.item \n    : [rssData.rss.channel.item];\n} else if (rssData.feed && rssData.feed.entry) {\n  // Atom format\n  items = Array.isArray(rssData.feed.entry) \n    ? rssData.feed.entry \n    : [rssData.feed.entry];\n}\n\n// Filter posts from the past week\nconst filteredPosts = items.filter(item => {\n  // Handle different date formats\n  const pubDate = item.pubDate?._text || item.published?._text || item.updated?._text;\n  \n  if (!pubDate) return false;\n  \n  const postDate = new Date(pubDate);\n  return postDate >= oneWeekAgo && postDate <= currentDate;\n});\n\n// Map to a consistent format\nconst formattedPosts = filteredPosts.map(item => {\n  return {\n    title: item.title?._text || item.title?._cdata || '',\n    link: item.link?._text || item.link?._attributes?.href || '',\n    description: item.description?._text || item.description?._cdata || item.summary?._text || '',\n    pubDate: item.pubDate?._text || item.published?._text || item.updated?._text || '',\n    guid: item.guid?._text || item.id?._text || '',\n    originalItem: item\n  };\n});\n\nreturn formattedPosts.map(post => ({ json: post }));"
          }
        },
        {
          "id": "12",
          "name": "Extract Featured Images & Excerpts",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            250
          ],
          "parameters": {
            "functionCode": "// Extract featured images and excerpts from each post\nconst posts = $input.all();\nconst processedPosts = posts.map(post => {\n  const item = post.json;\n  \n  // Extract featured image or use a default\n  let featuredImage = '';\n  if (item.enclosure && item.enclosure.url) {\n    featuredImage = item.enclosure.url;\n  } else if (item.content && item.content.match(/src=['\"]([^'\"]+)['\"]/) !== null) {\n    // Try to extract first image from content\n    featuredImage = item.content.match(/src=['\"]([^'\"]+)['\"]/);\n    featuredImage = featuredImage ? featuredImage[1] : '';\n  }\n  \n  // Create excerpt (short description)\n  let excerpt = '';\n  if (item.description) {\n    // Strip HTML tags and limit to 150 characters\n    excerpt = item.description.replace(/<[^>]*>/g, '');\n    excerpt = excerpt.substring(0, 150) + (excerpt.length > 150 ? '...' : '');\n  }\n  \n  return {\n    json: {\n      ...item,\n      featuredImage,\n      excerpt,\n      processedDate: new Date().toISOString()\n    }\n  };\n});\n\nreturn processedPosts;"
          }
        },
        {
          "id": "13",
          "name": "Format Email Structure",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            900,
            250
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": [
              {
                "name": "emailContent",
                "type": "string",
                "value": "=`<!DOCTYPE html>\n<html>\n<head>\n  <title>Weekly Newsletter</title>\n  <style>\n    body { font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; }\n    .post { margin-bottom: 30px; }\n    .post img { max-width: 100%; height: auto; }\n    .title { font-size: 18px; font-weight: bold; margin-bottom: 10px; }\n    .excerpt { color: #555; margin-bottom: 10px; }\n    .read-more { background-color: #0066cc; color: white; padding: 5px 10px; text-decoration: none; border-radius: 3px; }\n    .social { margin-top: 30px; }\n    .social a { margin-right: 10px; }\n  </style>\n</head>\n<body>\n  <h1>Weekly Newsletter</h1>\n  <p>Here are the latest posts from our blog:</p>\n  \n  ${$json.posts.map(post => `\n  <div class=\"post\">\n    ${post.featuredImage ? `<img src=\"${post.featuredImage}\" alt=\"${post.title}\">` : ''}\n    <h2 class=\"title\">${post.title}</h2>\n    <p class=\"excerpt\">${post.excerpt}</p>\n    <a href=\"${post.link}?utm_source=newsletter&utm_medium=email\" class=\"read-more\">Read More</a>\n  </div>\n  `).join('')}\n  \n  <div class=\"social\">\n    <p>Follow us on social media:</p>\n    <a href=\"https://twitter.com/ourblog\">Twitter</a>\n    <a href=\"https://facebook.com/ourblog\">Facebook</a>\n    <a href=\"https://instagram.com/ourblog\">Instagram</a>\n  </div>\n  \n  <p>To unsubscribe, <a href=\"{{unsubscribe_link}}\">click here</a>.</p>\n</body>\n</html>`"
              },
              {
                "name": "posts",
                "type": "array",
                "value": "={{ $input.all().map(i => i.json) }}"
              }
            ]
          }
        },
        {
          "id": "14",
          "name": "Add Tracking Parameters",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            250
          ],
          "parameters": {
            "functionCode": "// Add tracking parameters to all links in the email content\nconst item = $input.item.json;\n\n// Add UTM parameters to all links\nlet emailWithTracking = item.emailContent;\n\n// Replace all links with tracked versions\nemailWithTracking = emailWithTracking.replace(/href=\"(http[^\"]+)\"/g, (match, url) => {\n  // Skip if already has UTM parameters or is unsubscribe link\n  if (url.includes('utm_') || url.includes('{{unsubscribe_link}}')) {\n    return match;\n  }\n  \n  // Add tracking parameters\n  const separator = url.includes('?') ? '&' : '?';\n  const trackedUrl = `${url}${separator}utm_source=newsletter&utm_medium=email&utm_campaign=weekly_digest&utm_content=post_link`;\n  \n  return `href=\"${trackedUrl}\"`;\n});\n\nreturn [{\n  json: {\n    ...item,\n    emailContent: emailWithTracking,\n    trackingAdded: true\n  }\n}];"
          }
        },
        {
          "id": "15",
          "name": "Validate Email Content",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1300,
            250
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.emailContent }}",
                  "operation": "isNotEmpty"
                }
              ]
            }
          }
        },
        {
          "id": "16",
          "name": "Handle Content Error",
          "type": "n8n-nodes-base.noOp",
          "typeVersion": 1,
          "position": [
            1500,
            250
          ],
          "parameters": {}
        },
        {
          "id": "17",
          "name": "Compile Final Email",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            400
          ],
          "parameters": {
            "functionCode": "// Compile the final email content with posts, images, and social buttons\nconst posts = $input.item.json.posts || [];\nconst socialButtons = $input.item.json.socialButtons || {};\n\n// Create HTML for each post\nconst postsHtml = posts.map(post => {\n  return `\n    <div class=\"post\">\n      <h2><a href=\"${post.link}\">${post.title}</a></h2>\n      ${post.featuredImage ? `<img src=\"${post.featuredImage}\" alt=\"${post.title}\" style=\"max-width: 100%;\">` : ''}\n      <p>${post.excerpt}</p>\n      <a href=\"${post.link}?utm_source=newsletter&utm_medium=email&utm_campaign=weekly\">Read more</a>\n    </div>\n    <hr>\n  `;\n}).join('');\n\n// Create social sharing buttons\nconst socialHtml = `\n  <div class=\"social-buttons\">\n    <p>Follow us on social media:</p>\n    ${socialButtons.facebook ? `<a href=\"${socialButtons.facebook}\">Facebook</a> | ` : ''}\n    ${socialButtons.twitter ? `<a href=\"${socialButtons.twitter}\">Twitter</a> | ` : ''}\n    ${socialButtons.instagram ? `<a href=\"${socialButtons.instagram}\">Instagram</a>` : ''}\n  </div>\n`;\n\n// Compile the complete email\nconst emailHtml = `\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Weekly Newsletter</title>\n  <style>\n    body { font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; }\n    .post { margin-bottom: 20px; }\n    .social-buttons { margin-top: 30px; text-align: center; }\n  </style>\n</head>\n<body>\n  <h1>This Week's Updates</h1>\n  ${postsHtml}\n  ${socialHtml}\n  <p>Thank you for subscribing to our newsletter!</p>\n  <p><small>To unsubscribe, <a href=\"#unsubscribe\">click here</a></small></p>\n</body>\n</html>\n`;\n\nreturn [{\n  json: {\n    emailContent: emailHtml,\n    subject: \"Weekly Newsletter: \" + new Date().toLocaleDateString(),\n    originalData: $input.item.json\n  }\n}];"
          }
        },
        {
          "id": "18",
          "name": "Set Email Parameters",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            300,
            400
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": [
              {
                "name": "to",
                "value": "={{ $json.originalData.subscribers }}"
              },
              {
                "name": "subject",
                "value": "={{ $json.subject }}"
              },
              {
                "name": "html",
                "value": "={{ $json.emailContent }}"
              },
              {
                "name": "trackingData",
                "value": "={{ $json.originalData.trackingData || {} }}"
              }
            ]
          }
        },
        {
          "id": "19",
          "name": "Send Newsletter Email",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            500,
            400
          ],
          "parameters": {
            "fromEmail": "{{ $env.SMTP_FROM_EMAIL }}",
            "fromName": "Newsletter Team",
            "toEmail": "={{ $json.to }}",
            "subject": "={{ $json.subject }}",
            "html": "={{ $json.html }}",
            "options": {
              "allowUnauthorizedCerts": false
            }
          }
        },
        {
          "id": "20",
          "name": "Add Tracking Parameters",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            400
          ],
          "parameters": {
            "functionCode": "// Add UTM parameters to all links in the email content\nconst emailContent = $input.item.json.emailContent || '';\n\n// Function to add UTM parameters to links\nfunction addUtmToLinks(html, campaignName) {\n  const utmParams = `utm_source=newsletter&utm_medium=email&utm_campaign=${encodeURIComponent(campaignName)}`;\n  \n  // Replace all links with tracked versions\n  const trackedHtml = html.replace(/href=[\"']([^\"']+)[\"']/g, (match, url) => {\n    // Don't add tracking to anchor links, mailto: or tel: links\n    if (url.startsWith('#') || url.startsWith('mailto:') || url.startsWith('tel:')) {\n      return match;\n    }\n    \n    // Add UTM parameters to the URL\n    const separator = url.includes('?') ? '&' : '?';\n    return `href=\"${url}${separator}${utmParams}\"`;\n  });\n  \n  return trackedHtml;\n}\n\n// Get the current date for campaign naming\nconst now = new Date();\nconst campaignDate = `${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}`;\nconst campaignName = `weekly-newsletter-${campaignDate}`;\n\n// Add tracking to the email content\nconst trackedEmailContent = addUtmToLinks(emailContent, campaignName);\n\n// Return the email with tracking parameters added\nreturn [{\n  json: {\n    ...($input.item.json),\n    emailContent: trackedEmailContent,\n    trackingCampaignName: campaignName,\n    trackingEnabled: true\n  }\n}];"
          }
        },
        {
          "id": "21",
          "name": "Prepare Tracking Data",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            900,
            400
          ],
          "parameters": {
            "keepOnlySet": false,
            "values": [
              {
                "name": "trackingData",
                "type": "json",
                "value": "={{ {\n  \"campaign_name\": $input.item.json.trackingCampaignName,\n  \"send_time\": new Date().toISOString(),\n  \"recipient_count\": $input.item.json.subscribers ? $input.item.json.subscribers.length : 0,\n  \"newsletter_title\": $input.item.json.emailSubject || \"Weekly Newsletter\",\n  \"content_type\": \"RSS Feed Content\",\n  \"tracking_enabled\": true\n} }}"
              }
            ]
          }
        },
        {
          "id": "22",
          "name": "Send To Tracking System",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            1100,
            400
          ],
          "parameters": {
            "method": "POST",
            "url": "={{ $env.TRACKING_API_URL || 'https://analytics-api.example.com/track' }}",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "bodyParameters": {
              "parameters": [
                {
                  "name": "campaign_data",
                  "value": "={{ $json.trackingData }}"
                },
                {
                  "name": "event_type",
                  "value": "newsletter_sent"
                },
                {
                  "name": "timestamp",
                  "value": "={{ new Date().toISOString() }}"
                }
              ]
            },
            "options": {
              "timeout": 5000,
              "retry": {
                "count": 3,
                "maxTimeout": 10000
              }
            }
          }
        },
        {
          "id": "23",
          "name": "Error Trigger",
          "type": "n8n-nodes-base.errorTrigger",
          "typeVersion": 1,
          "position": [
            1300,
            400
          ],
          "parameters": {
            "errorWorkflow": true
          }
        },
        {
          "id": "24",
          "name": "Process Error",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            400
          ],
          "parameters": {
            "functionCode": "// Get the error details\nconst error = $input.all()[0].json.error;\nconst context = $input.all()[0].json.context;\nconst workflow = $input.all()[0].json.workflow;\n\n// Format error message\nconst errorDetails = {\n  errorMessage: error.message || 'Unknown error',\n  errorType: error.name || 'Error',\n  timestamp: new Date().toISOString(),\n  workflowName: workflow.name,\n  workflowId: workflow.id,\n  nodeExecutionFailed: context.node?.name || 'Unknown node',\n  executionId: context.executionId,\n  severity: error.message?.includes('critical') ? 'Critical' : 'Normal'\n};\n\nreturn [{json: errorDetails}];"
          }
        },
        {
          "id": "25",
          "name": "Format Email Content",
          "type": "n8n-nodes-base.set",
          "typeVersion": 2,
          "position": [
            100,
            550
          ],
          "parameters": {
            "values": {
              "string": [
                {
                  "name": "emailSubject",
                  "value": "=Newsletter Workflow Error: {{ $json.errorType }}"
                },
                {
                  "name": "emailBody",
                  "value": "=<p>An error occurred in the Newsletter Workflow:</p>\n<ul>\n<li><strong>Error:</strong> {{ $json.errorMessage }}</li>\n<li><strong>Type:</strong> {{ $json.errorType }}</li>\n<li><strong>Node:</strong> {{ $json.nodeExecutionFailed }}</li>\n<li><strong>Workflow:</strong> {{ $json.workflowName }}</li>\n<li><strong>Execution ID:</strong> {{ $json.executionId }}</li>\n<li><strong>Time:</strong> {{ $json.timestamp }}</li>\n</ul>\n<p>Please check the workflow and resolve the issue.</p>"
                }
              ]
            },
            "options": {}
          }
        },
        {
          "id": "26",
          "name": "Email Send",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 2,
          "position": [
            300,
            550
          ],
          "parameters": {
            "fromEmail": "=workflow@example.com",
            "toEmail": "=admin@example.com",
            "subject": "={{ $json.emailSubject }}",
            "text": "",
            "html": "={{ $json.emailBody }}"
          }
        }
      ],
      "connections": {
        "Cron Trigger": {
          "main": [
            [
              {
                "node": "Filter Recent Posts",
                "type": "main",
                "index": 0
              },
              {
                "node": "Fetch RSS Feed",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch RSS Feed": {
          "main": [
            [
              {
                "node": "Filter Recent Posts",
                "type": "main",
                "index": 0
              },
              {
                "node": "Filter Recent Posts",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Filter Recent Posts": {
          "main": [
            [
              {
                "node": "Prepare Email Content",
                "type": "main",
                "index": 0
              },
              {
                "node": "Format Email Content",
                "type": "main",
                "index": 0
              },
              {
                "node": "Format Email Content",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "HTTP Request (Fetch RSS)": {
          "main": [
            [
              {
                "node": "XML to JSON",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "XML to JSON": {
          "main": [
            [
              {
                "node": "Filter Posts From Past Week",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Filter Posts From Past Week": {
          "main": [
            [
              {
                "node": "Extract Featured Images & Excerpts",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Extract Featured Images & Excerpts": {
          "main": [
            [
              {
                "node": "Format Email Structure",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Email Structure": {
          "main": [
            [
              {
                "node": "Add Tracking Parameters",
                "type": "main",
                "index": 0
              },
              {
                "node": "Add Tracking Parameters",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Add Tracking Parameters": {
          "main": [
            [
              {
                "node": "Validate Email Content",
                "type": "main",
                "index": 0
              },
              {
                "node": "Prepare Tracking Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate Email Content": {
          "main": [
            [
              {
                "node": "Handle Content Error",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Compile Final Email": {
          "main": [
            [
              {
                "node": "Set Email Parameters",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Set Email Parameters": {
          "main": [
            [
              {
                "node": "Send Newsletter Email",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Prepare Tracking Data": {
          "main": [
            [
              {
                "node": "Send To Tracking System",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Error Trigger": {
          "main": [
            [
              {
                "node": "Process Error",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Email Content": {
          "main": [
            [
              {
                "node": "Email Send",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {},
      "active": false
    },
    "provider": "anthropic",
    "model": "claude-3-7-sonnet-20250219",
    "timestamp": "2025-07-23T04:23:20.231Z",
    "nodeCount": 26,
    "connectionCount": 20
  },
  {
    "id": "c002a8fd-acc4-42bd-ac56-24e1da72ec9b",
    "prompt": "To create a comprehensive n8n workflow for automating Telegram channel posts based on monitoring multiple RSS feeds, we need to implement several features: RSS feed monitoring, content filtering by keywords, post formatting, hashtag addition, optimal time posting, and duplicate post prevention. Below is a detailed node-by-node plan following the critical orchestration requirements.\n\n### Node Structure Plan\n\n#### 1. **Main Entry Point**\n\n- **Node:** `n8n-nodes-base.cron`\n  - **Purpose:** Trigger the workflow at regular intervals (e.g., every hour) to check for new RSS feed items.\n\n#### 2. **Monitor RSS Feeds**\n\n- **Node:** `n8n-nodes-base.httpRequest` (multiple instances for each RSS feed)\n  - **Purpose:** Fetch data from multiple RSS feed URLs.\n  - **Connection:** `cron` -> `httpRequest` (for each feed)\n\n#### 3. **Central Router for Content Filtering**\n\n- **Node:** `n8n-nodes-base.function`\n  - **Purpose:** Extract and prepare RSS feed data for filtering.\n  - **Connection:** Each `httpRequest` -> `function` (Data preparation)\n\n- **Node:** `n8n-nodes-base.switch`\n  - **Purpose:** Route to filtering based on keywords.\n  - **Connection:** `function` -> `switch`\n\n#### 4. **Feature Branch: Content Filtering by Keywords**\n\n- **Node:** `n8n-nodes-base.if`\n  - **Purpose:** Check if content contains specific keywords.\n  - **Connection:** `switch` -> `if` (Check keywords)\n\n  - **Condition:** \n    - True Path: Keyword found\n    - False Path: No keyword found (end flow for this branch)\n\n- **True Path:**\n\n  - **Node:** `n8n-nodes-base.code`\n    - **Purpose:** Format post with title, summary, and link, and add relevant hashtags.\n    - **Connection:** `if` (True) -> `code`\n\n#### 5. **Feature Branch: Post Scheduling and Duplicate Check**\n\n- **Node:** `n8n-nodes-base.function`\n  - **Purpose:** Implement logic to determine optimal posting time.\n  - **Connection:** `code` (Formatted Post) -> `function` (Optimal timing)\n\n- **Node:** `n8n-nodes-base.set`\n  - **Purpose:** Check and store posted items to avoid duplicates.\n  - **Connection:** `function` (Optimal timing) -> `set`\n\n- **Node:** `n8n-nodes-base.if`\n  - **Purpose:** Verify if the item has already been posted.\n  - **Connection:** `set` -> `if` (Duplicate check)\n\n  - **Condition:**\n    - True Path: Duplicate found (end flow for this branch)\n    - False Path: No duplicate\n\n- **False Path:**\n\n  - **Node:** `n8n-nodes-base.telegram`\n    - **Purpose:** Post to Telegram channel.\n    - **Connection:** `if` (False) -> `telegram`\n\n#### 6. **Central Merge Node**\n\n- **Node:** `n8n-nodes-base.merge`\n  - **Purpose:** Combine the results of all branches into a central flow.\n  - **Connection:** All `telegram` nodes -> `merge`\n\n#### 7. **Final Processing/Response**\n\n- **Node:** `n8n-nodes-base.set`\n  - **Purpose:** Final data processing or logging.\n  - **Connection:** `merge` -> `set`\n\n### Error Handling\n\n- **Node:** `n8n-nodes-base.errorTrigger`\n  - **Purpose:** Capture and handle any errors in the workflow.\n  - **Connection:** Global error handling\n  - **Actions:** Send an error notification via email or log the error.\n\n### Validation Checklist\n\n☑ All nodes are properly connected, ensuring no isolated chains.\n☑ Keyword filtering and duplicate checking are robust and cover all cases.\n☑ Error handling is comprehensive, capturing any issues during execution.\n☑ Time delays are managed to avoid API rate limits.\n☑ All branches merge back into the central flow before completing the process.\n\nBy following this detailed plan, you will have a robust n8n workflow that efficiently automates Telegram channel posts based on RSS feed content, ensuring timely and relevant updates without duplicates.",
    "workflow": {
      "name": "Telegram Channel Auto-Poster",
      "nodes": [
        {
          "id": "1",
          "name": "Schedule Trigger",
          "type": "n8n-nodes-base.cron",
          "typeVersion": 1,
          "position": [
            100,
            100
          ],
          "parameters": {
            "triggerTimes": {
              "item": [
                {
                  "mode": "everyX",
                  "value": 1,
                  "unit": "hours"
                }
              ]
            }
          }
        },
        {
          "id": "2",
          "name": "Fetch RSS Feed",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            300,
            100
          ],
          "parameters": {
            "url": "=https://example.com/rss-feed.xml",
            "method": "GET",
            "authentication": "none",
            "options": {
              "timeout": 5000
            }
          }
        },
        {
          "id": "3",
          "name": "Parse RSS Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            100
          ],
          "parameters": {
            "functionCode": "const xml2js = require('xml2js');\nconst parser = new xml2js.Parser();\n\nconst xml = $input.item.json.data;\nlet items = [];\n\ntry {\n  // Parse XML to JSON\n  const result = await parser.parseStringPromise(xml);\n  \n  // Extract items from RSS feed\n  const entries = result.rss.channel[0].item || [];\n  \n  // Format each entry\n  for (const entry of entries) {\n    items.push({\n      json: {\n        title: entry.title ? entry.title[0] : '',\n        link: entry.link ? entry.link[0] : '',\n        description: entry.description ? entry.description[0] : '',\n        pubDate: entry.pubDate ? entry.pubDate[0] : '',\n        guid: entry.guid ? entry.guid[0] : '',\n        processed: false\n      }\n    });\n  }\n  \n  // Return only new items (last 24 hours)\n  const oneDayAgo = new Date();\n  oneDayAgo.setHours(oneDayAgo.getHours() - 24);\n  \n  items = items.filter(item => {\n    const pubDate = new Date(item.json.pubDate);\n    return pubDate > oneDayAgo;\n  });\n  \n  return items;\n} catch (error) {\n  console.log('Error parsing RSS feed:', error);\n  return [{json: {error: error.message}}];\n}"
          }
        },
        {
          "id": "4",
          "name": "Filter By Keywords",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            100
          ],
          "parameters": {
            "functionCode": "// Define keywords to filter by\nconst keywords = ['important', 'news', 'update', 'release'];\n\n// Get the items from the previous node\nconst items = $input.all();\nconst filteredItems = [];\n\n// Filter items that contain any of the keywords\nfor (const item of items) {\n  const title = item.json.title.toLowerCase();\n  const description = item.json.description.toLowerCase();\n  \n  // Check if any keyword is in the title or description\n  const hasKeyword = keywords.some(keyword => \n    title.includes(keyword.toLowerCase()) || \n    description.includes(keyword.toLowerCase())\n  );\n  \n  if (hasKeyword) {\n    filteredItems.push(item);\n  }\n}\n\nreturn filteredItems.length > 0 ? filteredItems : [{json: {noMatchingItems: true}}];"
          }
        },
        {
          "id": "5",
          "name": "Check For Duplicates",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            900,
            100
          ],
          "parameters": {
            "functionCode": "// Simple in-memory duplicate check (in production, use a database)\nconst items = $input.all();\nconst postedGuids = $workflow.vars.postedGuids || [];\nconst newItems = [];\n\n// Filter out items that have already been posted\nfor (const item of items) {\n  // Skip the no matching items placeholder\n  if (item.json.noMatchingItems) {\n    continue;\n  }\n  \n  const guid = item.json.guid || item.json.link;\n  \n  if (!postedGuids.includes(guid)) {\n    newItems.push(item);\n  }\n}\n\n// Update the workflow variable with new GUIDs\nconst newGuids = newItems.map(item => item.json.guid || item.json.link);\n$workflow.vars.postedGuids = [...postedGuids, ...newGuids];\n\nreturn newItems.length > 0 ? newItems : [{json: {noDuplicateFreeItems: true}}];"
          }
        },
        {
          "id": "6",
          "name": "Format Post Content",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            100
          ],
          "parameters": {
            "functionCode": "// Format the post content for Telegram\nconst items = $input.all();\nconst formattedItems = [];\n\nfor (const item of items) {\n  // Skip placeholders\n  if (item.json.noMatchingItems || item.json.noDuplicateFreeItems) {\n    continue;\n  }\n  \n  // Extract relevant information\n  const { title, link, description } = item.json;\n  \n  // Generate hashtags from title words\n  const titleWords = title.split(' ')\n    .filter(word => word.length > 4)  // Only use words longer than 4 characters\n    .slice(0, 3);  // Take up to 3 words\n  \n  const hashtags = titleWords\n    .map(word => '#' + word.replace(/[^a-zA-Z0-9]/g, ''))\n    .join(' ');\n  \n  // Create the formatted message\n  const message = `📰 *${title}*\\n\\n${description.substring(0, 200)}...\\n\\n🔗 [Read more](${link})\\n\\n${hashtags}`;\n  \n  formattedItems.push({\n    json: {\n      ...item.json,\n      formattedMessage: message\n    }\n  });\n}\n\nreturn formattedItems.length > 0 ? formattedItems : [{json: {noItemsToPost: true}}];"
          }
        },
        {
          "id": "7",
          "name": "Determine Optimal Posting Time",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            100
          ],
          "parameters": {
            "functionCode": "// Calculate optimal posting time based on current hour\nconst items = $input.all();\nconst scheduledItems = [];\n\n// Skip if no items to post\nif (items.length === 1 && items[0].json.noItemsToPost) {\n  return items;\n}\n\n// Get current hour in 24-hour format\nconst now = new Date();\nconst currentHour = now.getHours();\n\n// Define peak hours (when most users are active)\nconst peakHours = [8, 12, 17, 20, 22];\n\n// Find the next peak hour\nlet nextPeakHour = peakHours.find(hour => hour > currentHour);\nif (!nextPeakHour) {\n  nextPeakHour = peakHours[0]; // If no peak hours left today, use first peak hour tomorrow\n}\n\n// Calculate delay in milliseconds\nlet delayMs = 0;\nif (nextPeakHour > currentHour) {\n  delayMs = (nextPeakHour - currentHour) * 60 * 60 * 1000;\n} else {\n  delayMs = (24 - currentHour + nextPeakHour) * 60 * 60 * 1000;\n}\n\n// Spread posts if there are multiple\nconst spreadTimeMs = 10 * 60 * 1000; // 10 minutes between posts\n\n// Schedule each item\nfor (let i = 0; i < items.length; i++) {\n  const item = items[i];\n  \n  // Skip placeholders\n  if (item.json.noItemsToPost) {\n    continue;\n  }\n  \n  const postTime = new Date(now.getTime() + delayMs + (i * spreadTimeMs));\n  \n  scheduledItems.push({\n    json: {\n      ...item.json,\n      scheduledTime: postTime.toISOString(),\n      postNow: delayMs < 15 * 60 * 1000 // Post now if less than 15 minutes to next peak\n    }\n  });\n}\n\nreturn scheduledItems.length > 0 ? scheduledItems : items; // Return original items if nothing to schedule"
          }
        },
        {
          "id": "8",
          "name": "Should Post Now?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1500,
            100
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{$json[\"postNow\"]}}",
                  "operation": "equal",
                  "value2": true
                }
              ]
            }
          }
        },
        {
          "id": "9",
          "name": "Post to Telegram",
          "type": "n8n-nodes-base.telegram",
          "typeVersion": 1,
          "position": [
            100,
            250
          ],
          "parameters": {
            "chatId": "YOUR_TELEGRAM_CHANNEL_ID",
            "text": "={{$json[\"formattedMessage\"]}}",
            "additionalFields": {
              "parse_mode": "Markdown",
              "disable_web_page_preview": false
            }
          }
        },
        {
          "id": "10",
          "name": "Schedule for Later",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            300,
            250
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": {
              "string": [
                {
                  "name": "status",
                  "value": "scheduled for later posting"
                },
                {
                  "name": "scheduledTime",
                  "value": "={{$json[\"scheduledTime\"]}}"
                },
                {
                  "name": "message",
                  "value": "={{$json[\"formattedMessage\"]}}"
                }
              ]
            }
          }
        },
        {
          "id": "11",
          "name": "Cron Trigger",
          "type": "n8n-nodes-base.cron",
          "typeVersion": 1,
          "position": [
            500,
            250
          ],
          "parameters": {
            "triggerTimes": {
              "item": [
                {
                  "mode": "everyX",
                  "value": 1,
                  "unit": "hours"
                }
              ]
            }
          }
        },
        {
          "id": "12",
          "name": "RSS Feed URLs",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            700,
            250
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": {
              "string": [
                {
                  "name": "feedUrls",
                  "value": "={{ [\n  { \"url\": \"https://example.com/rss1.xml\", \"name\": \"Feed 1\" },\n  { \"url\": \"https://example.com/rss2.xml\", \"name\": \"Feed 2\" },\n  { \"url\": \"https://example.com/rss3.xml\", \"name\": \"Feed 3\" }\n] }}"
                }
              ]
            },
            "options": {}
          }
        },
        {
          "id": "13",
          "name": "Split Into Individual Feeds",
          "type": "n8n-nodes-base.splitInBatches",
          "typeVersion": 1,
          "position": [
            900,
            250
          ],
          "parameters": {
            "batchSize": 1
          }
        },
        {
          "id": "14",
          "name": "Fetch RSS Feed",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 3,
          "position": [
            1100,
            250
          ],
          "parameters": {
            "url": "={{ $json.url }}",
            "options": {
              "redirect": {
                "redirect": {
                  "followRedirects": true
                }
              },
              "response": {
                "response": {
                  "fullResponse": false,
                  "responseFormat": "xml"
                }
              }
            }
          }
        },
        {
          "id": "15",
          "name": "Process RSS Items",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            250
          ],
          "parameters": {
            "functionCode": "// Extract the feed items and format them\nconst items = [];\nconst feedName = $input.item(0).json.name;\nconst rawData = $input.item(0).json.data;\n\n// Check if we have channel items (standard RSS format)\nif (rawData && rawData.rss && rawData.rss.channel && rawData.rss.channel.item) {\n  const feedItems = Array.isArray(rawData.rss.channel.item) \n    ? rawData.rss.channel.item \n    : [rawData.rss.channel.item];\n  \n  for (const item of feedItems) {\n    items.push({\n      json: {\n        feedName,\n        title: item.title || 'No Title',\n        description: item.description || '',\n        link: item.link || '',\n        pubDate: item.pubDate || '',\n        guid: item.guid ? (item.guid._ || item.guid) : '',\n        categories: item.category || [],\n        source: 'rss'\n      }\n    });\n  }\n}\n// Check for Atom format\nelse if (rawData && rawData.feed && rawData.feed.entry) {\n  const feedItems = Array.isArray(rawData.feed.entry) \n    ? rawData.feed.entry \n    : [rawData.feed.entry];\n  \n  for (const item of feedItems) {\n    items.push({\n      json: {\n        feedName,\n        title: item.title || 'No Title',\n        description: item.summary || item.content || '',\n        link: item.link && item.link.$ ? item.link.$.href : (item.link || ''),\n        pubDate: item.updated || item.published || '',\n        guid: item.id || '',\n        categories: item.category || [],\n        source: 'atom'\n      }\n    });\n  }\n}\n\nif (items.length === 0) {\n  // Return at least one item even if we couldn't parse the feed\n  return [{\n    json: {\n      feedName,\n      error: true,\n      message: 'Could not parse RSS feed',\n      source: $input.item(0).json.url\n    }\n  }];\n}\n\nreturn items;"
          }
        },
        {
          "id": "16",
          "name": "Error Handler",
          "type": "n8n-nodes-base.errorTrigger",
          "typeVersion": 1,
          "position": [
            1500,
            250
          ],
          "parameters": {
            "errorMessage": "=Error fetching or processing RSS feeds: {{ $error.message }}",
            "errorDescription": "={{ $error.description }}"
          }
        },
        {
          "id": "17",
          "name": "Extract Content for Filtering",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            400
          ],
          "parameters": {
            "functionCode": "// Extract the content from RSS feed items for keyword filtering\nconst items = $input.all();\nconst processedItems = [];\n\nfor (const item of items) {\n  // Extract title, description, and content for filtering\n  const content = {\n    title: item.json.title || '',\n    description: item.json.description || item.json.summary || '',\n    content: item.json.content || '',\n    link: item.json.link || '',\n    pubDate: item.json.pubDate || item.json.published || new Date().toISOString(),\n    guid: item.json.guid || item.json.id || item.json.link,\n    originalItem: item.json\n  };\n  \n  processedItems.push({json: content});\n}\n\nreturn processedItems;"
          }
        },
        {
          "id": "18",
          "name": "Filter by Keywords",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            400
          ],
          "parameters": {
            "functionCode": "// Filter content based on keywords\nconst items = $input.all();\nconst filteredItems = [];\n\n// Keywords to include (can be configured as workflow variables)\nconst includeKeywords = ['technology', 'AI', 'automation', 'digital', 'software', 'innovation'];\n// Keywords to exclude (can be configured as workflow variables)\nconst excludeKeywords = ['spam', 'advertisement', 'promoted'];\n\nfor (const item of items) {\n  const content = (item.json.title + ' ' + item.json.description + ' ' + item.json.content).toLowerCase();\n  \n  // Check if content contains at least one include keyword\n  const hasIncludeKeyword = includeKeywords.some(keyword => \n    content.includes(keyword.toLowerCase())\n  );\n  \n  // Check if content contains any exclude keyword\n  const hasExcludeKeyword = excludeKeywords.some(keyword => \n    content.includes(keyword.toLowerCase())\n  );\n  \n  // Only keep items that have include keywords and don't have exclude keywords\n  if (hasIncludeKeyword && !hasExcludeKeyword) {\n    filteredItems.push({json: item.json});\n  }\n}\n\nreturn filteredItems;"
          }
        },
        {
          "id": "19",
          "name": "Check for Duplicates",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            400
          ],
          "parameters": {
            "functionCode": "// Check for duplicate posts based on content or URL\nconst items = $input.all();\nconst uniqueItems = [];\nconst seenGuids = new Set();\nconst seenUrls = new Set();\nconst seenTitles = new Set();\n\nfor (const item of items) {\n  const guid = item.json.guid;\n  const url = item.json.link;\n  const title = item.json.title;\n  \n  // Skip if we've seen this guid, URL, or very similar title before\n  if (seenGuids.has(guid) || seenUrls.has(url) || seenTitles.has(title)) {\n    continue;\n  }\n  \n  // Add to our tracking sets\n  seenGuids.add(guid);\n  seenUrls.add(url);\n  seenTitles.add(title);\n  \n  // Add to our unique items list\n  uniqueItems.push({json: item.json});\n}\n\nreturn uniqueItems;"
          }
        },
        {
          "id": "20",
          "name": "Prepare Post Content",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            400
          ],
          "parameters": {
            "functionCode": "// Format the content for posting to Telegram\nconst items = $input.all();\nconst formattedItems = [];\n\nfor (const item of items) {\n  // Create a formatted post with title, summary, and link\n  const formattedPost = {\n    title: item.json.title,\n    summary: item.json.description.substring(0, 150) + (item.json.description.length > 150 ? '...' : ''),\n    link: item.json.link,\n    pubDate: item.json.pubDate,\n    formattedMessage: `*${item.json.title}*\\n\\n${item.json.description.substring(0, 150)}${item.json.description.length > 150 ? '...' : ''}\\n\\n${item.json.link}`,\n    originalItem: item.json.originalItem\n  };\n  \n  formattedItems.push({json: formattedPost});\n}\n\nreturn formattedItems;"
          }
        },
        {
          "id": "21",
          "name": "Any Items to Post?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            900,
            400
          ],
          "parameters": {
            "conditions": {
              "number": [
                {
                  "value1": "={{ $json.length }}",
                  "operation": "notEqual",
                  "value2": 0
                }
              ]
            }
          }
        },
        {
          "id": "22",
          "name": "Log Filtered Items",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            400
          ],
          "parameters": {
            "functionCode": "// Log the filtered items that will be posted\nconst items = $input.all();\n\nconsole.log(`Filtered ${items.length} items for posting`);\nfor (const item of items) {\n  console.log(`- ${item.json.title}`);\n}\n\nreturn items;"
          }
        },
        {
          "id": "23",
          "name": "Log No Items Found",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            400
          ],
          "parameters": {
            "functionCode": "// Log when no items were found after filtering\nconsole.log('No items passed the filtering criteria');\n\n// Return empty array to continue workflow\nreturn [{json: {message: 'No items found that match the criteria'}}];"
          }
        },
        {
          "id": "24",
          "name": "Handle Filter Errors",
          "type": "n8n-nodes-base.errorTrigger",
          "typeVersion": 1,
          "position": [
            1500,
            400
          ],
          "parameters": {
            "errorMessage": "=Error in content filtering: {{ $error.message }}",
            "errorDescription": "=Error occurred while filtering content for Telegram posts.\n\nError details: {{ $error.description }}\n\nStack: {{ $error.stack }}"
          }
        },
        {
          "id": "25",
          "name": "Format Post Content",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            550
          ],
          "parameters": {
            "functionCode": "// Format the post with title, summary, and link\nconst items = [];\n\nfor (const item of $input.all()) {\n  const title = item.json.title || 'No Title';\n  const description = item.json.description || item.json.content || 'No Description';\n  const link = item.json.link || '';\n  \n  // Create summary by truncating description to ~150 chars\n  let summary = description.replace(/<[^>]*>/g, ''); // Remove HTML tags\n  summary = summary.substring(0, 150);\n  if (summary.length === 150) {\n    summary += '...';\n  }\n  \n  const formattedPost = {\n    title: title,\n    summary: summary,\n    link: link,\n    original: item.json,\n    formatted: `📰 ${title}\\n\\n${summary}\\n\\n🔗 ${link}`\n  };\n  \n  items.push({json: formattedPost});\n}\n\nreturn items;"
          }
        },
        {
          "id": "26",
          "name": "Add Hashtags",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            550
          ],
          "parameters": {
            "functionCode": "// Extract keywords from title and content to generate relevant hashtags\nconst items = [];\n\nfor (const item of $input.all()) {\n  const title = item.json.title;\n  const summary = item.json.summary;\n  const combined = `${title} ${summary}`;\n  \n  // Common words to exclude from hashtags\n  const excludeWords = ['a', 'an', 'the', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'with', 'by', 'about', 'as', 'of', 'from'];\n  \n  // Extract potential hashtag words (words longer than 3 chars)\n  let words = combined.split(/\\W+/)\n    .filter(word => word.length > 3)\n    .filter(word => !excludeWords.includes(word.toLowerCase()))\n    .map(word => word.toLowerCase())\n    .slice(0, 10); // Limit to 10 potential hashtags\n  \n  // Remove duplicates\n  words = [...new Set(words)];\n  \n  // Create hashtags\n  const hashtags = words.map(word => `#${word}`).join(' ');\n  \n  // Add hashtags to the formatted post\n  const formattedWithHashtags = `${item.json.formatted}\\n\\n${hashtags}`;\n  \n  items.push({\n    json: {\n      ...item.json,\n      hashtags: hashtags,\n      formattedWithHashtags: formattedWithHashtags\n    }\n  });\n}\n\nreturn items;"
          }
        },
        {
          "id": "27",
          "name": "Finalize Post Format",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            550
          ],
          "parameters": {
            "functionCode": "// Finalize the post format with all components\nconst items = [];\n\nfor (const item of $input.all()) {\n  // Create final post with all elements properly formatted\n  const finalPost = {\n    title: item.json.title,\n    summary: item.json.summary,\n    link: item.json.link,\n    hashtags: item.json.hashtags,\n    telegramPost: item.json.formattedWithHashtags,\n    original: item.json.original,\n    postLength: item.json.formattedWithHashtags.length\n  };\n  \n  // Check if post is too long for Telegram (max 4096 chars)\n  if (finalPost.telegramPost.length > 4096) {\n    // Truncate if too long\n    finalPost.telegramPost = finalPost.telegramPost.substring(0, 4000) + '...';\n    finalPost.truncated = true;\n  } else {\n    finalPost.truncated = false;\n  }\n  \n  items.push({json: finalPost});\n}\n\nreturn items;"
          }
        },
        {
          "id": "28",
          "name": "Check Post Quality",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            700,
            550
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{$json[\"summary\"].length}}",
                  "operation": "larger",
                  "value2": 30
                }
              ]
            }
          }
        },
        {
          "id": "29",
          "name": "Set Final Post",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            900,
            550
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": {
              "string": [
                {
                  "name": "formattedPost",
                  "value": "={{$json.telegramPost}}"
                },
                {
                  "name": "postTitle",
                  "value": "={{$json.title}}"
                },
                {
                  "name": "postLink",
                  "value": "={{$json.link}}"
                },
                {
                  "name": "postHashtags",
                  "value": "={{$json.hashtags}}"
                },
                {
                  "name": "postReady",
                  "value": "true"
                }
              ]
            },
            "options": {}
          }
        },
        {
          "id": "30",
          "name": "Set Insufficient Content",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            1100,
            550
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": {
              "string": [
                {
                  "name": "formattedPost",
                  "value": "={{$json.telegramPost}}"
                },
                {
                  "name": "postTitle",
                  "value": "={{$json.title}}"
                },
                {
                  "name": "postError",
                  "value": "Post summary too short"
                },
                {
                  "name": "postReady",
                  "value": "false"
                }
              ]
            },
            "options": {}
          }
        },
        {
          "id": "31",
          "name": "Error Handler",
          "type": "n8n-nodes-base.noOp",
          "typeVersion": 1,
          "position": [
            1300,
            550
          ],
          "parameters": {}
        },
        {
          "id": "32",
          "name": "Determine Optimal Time",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            550
          ],
          "parameters": {
            "functionCode": "// Get current hour in user's timezone (assuming UTC)\nconst now = new Date();\nconst currentHour = now.getUTCHours();\n\n// Define optimal posting hours (when engagement is highest)\nconst optimalHours = [8, 12, 17, 20]; // 8am, 12pm, 5pm, 8pm\n\n// Find the next optimal hour\nlet nextOptimalHour = optimalHours.find(hour => hour > currentHour);\n\n// If no optimal hour found today, schedule for tomorrow's first optimal hour\nif (!nextOptimalHour) {\n  nextOptimalHour = optimalHours[0];\n}\n\n// Calculate minutes until next optimal posting time\nlet minutesUntilPosting;\nif (nextOptimalHour > currentHour) {\n  minutesUntilPosting = (nextOptimalHour - currentHour) * 60;\n} else {\n  minutesUntilPosting = (24 - currentHour + nextOptimalHour) * 60;\n}\n\n// Add some randomness (±15 minutes) to avoid predictable patterns\nminutesUntilPosting += Math.floor(Math.random() * 30) - 15;\n\n// Ensure we don't schedule in the past\nminutesUntilPosting = Math.max(5, minutesUntilPosting);\n\n// Create scheduled time\nconst scheduledTime = new Date(now.getTime() + minutesUntilPosting * 60 * 1000);\n\n// Add scheduling information to the item\nconst items = $input.all();\nfor (const item of items) {\n  item.json.scheduledTime = scheduledTime;\n  item.json.minutesUntilPosting = minutesUntilPosting;\n  item.json.isScheduled = true;\n}\n\nreturn items;"
          }
        },
        {
          "id": "33",
          "name": "Check If Post Now",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            100,
            700
          ],
          "parameters": {
            "conditions": {
              "number": [
                {
                  "value1": "={{ $json.minutesUntilPosting }}",
                  "operation": "smaller",
                  "value2": 10
                }
              ]
            }
          }
        },
        {
          "id": "34",
          "name": "Post Immediately",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            300,
            700
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": {
              "boolean": [
                {
                  "name": "postNow",
                  "value": true
                }
              ],
              "string": [
                {
                  "name": "postingStatus",
                  "value": "Posting immediately"
                }
              ]
            }
          }
        },
        {
          "id": "35",
          "name": "Schedule For Later",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            500,
            700
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": {
              "boolean": [
                {
                  "name": "postNow",
                  "value": false
                }
              ],
              "string": [
                {
                  "name": "postingStatus",
                  "value": "=Scheduled for {{ $json.scheduledTime.toLocaleString() }}"
                }
              ]
            }
          }
        },
        {
          "id": "36",
          "name": "Store In Queue",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            700
          ],
          "parameters": {
            "functionCode": "// In a real implementation, this would store the post in a database or queue system\n// For this example, we'll simulate storing the post for later scheduling\n\nconst items = $input.all();\nfor (const item of items) {\n  // Add queue information\n  item.json.queueId = 'q_' + Math.random().toString(36).substring(2, 15);\n  item.json.queueStatus = 'pending';\n  item.json.queuedAt = new Date().toISOString();\n  \n  // In a real implementation, you would store this in a database\n  // db.posts.insert(item.json);\n  \n  console.log(`Post queued for later: ${item.json.queueId}`);\n}\n\nreturn items;"
          }
        },
        {
          "id": "37",
          "name": "Merge Scheduling Paths",
          "type": "n8n-nodes-base.merge",
          "typeVersion": 2,
          "position": [
            900,
            700
          ],
          "parameters": {
            "mode": "passthrough"
          }
        },
        {
          "id": "38",
          "name": "Log Scheduling Decision",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            700
          ],
          "parameters": {
            "functionCode": "// Log the scheduling decision for monitoring purposes\n\nconst items = $input.all();\nfor (const item of items) {\n  // Create log entry\n  const logEntry = {\n    action: item.json.postNow ? 'immediate_post' : 'scheduled_post',\n    status: item.json.postingStatus,\n    scheduledTime: item.json.scheduledTime,\n    contentTitle: item.json.title || 'Untitled',\n    timestamp: new Date().toISOString()\n  };\n  \n  // In a real implementation, you might store this log\n  // db.logs.insert(logEntry);\n  \n  console.log(`Scheduling decision: ${logEntry.action} - ${logEntry.status}`);\n  \n  // Keep the original data but add scheduling log\n  item.json.schedulingLog = logEntry;\n}\n\nreturn items;"
          }
        },
        {
          "id": "39",
          "name": "Handle Scheduling Errors",
          "type": "n8n-nodes-base.errorTrigger",
          "typeVersion": 1,
          "position": [
            1300,
            700
          ],
          "parameters": {
            "errorMessage": "=Error in post scheduling process: {{ $json.error || 'Unknown error' }}",
            "errorDescription": "=Failed to schedule post with title: {{ $json.title || 'Untitled post' }}"
          }
        },
        {
          "id": "40",
          "name": "Error Trigger",
          "type": "n8n-nodes-base.errorTrigger",
          "typeVersion": 1,
          "position": [
            1500,
            700
          ],
          "parameters": {
            "errorWorkflow": true
          }
        },
        {
          "id": "41",
          "name": "Classify Error",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            850
          ],
          "parameters": {
            "functionCode": "// Classify the error based on type and source\nconst error = $input.all()[0].json.error;\nconst workflow = $input.all()[0].json.workflow;\n\nlet errorType = 'unknown';\nlet severity = 'medium';\nlet recoverable = true;\n\n// Check error message for common patterns\nif (error && error.message) {\n  if (error.message.includes('ECONNREFUSED') || error.message.includes('ETIMEDOUT') || error.message.includes('429')) {\n    errorType = 'connection';\n    severity = 'high';\n    recoverable = true;\n  } else if (error.message.includes('Authentication') || error.message.includes('Unauthorized') || error.message.includes('403')) {\n    errorType = 'authentication';\n    severity = 'high';\n    recoverable = false;\n  } else if (error.message.includes('Not Found') || error.message.includes('404')) {\n    errorType = 'notFound';\n    severity = 'medium';\n    recoverable = false;\n  } else if (error.message.includes('validation') || error.message.includes('schema') || error.message.includes('400')) {\n    errorType = 'validation';\n    severity = 'medium';\n    recoverable = false;\n  }\n}\n\n// Return the classified error\nreturn [{\n  json: {\n    ...error,\n    workflow,\n    errorType,\n    severity,\n    recoverable,\n    timestamp: new Date().toISOString(),\n    errorDetails: error?.message || 'Unknown error occurred',\n    source: error?.node || 'Unknown node'\n  }\n}];"
          }
        },
        {
          "id": "42",
          "name": "Determine Recovery Strategy",
          "type": "n8n-nodes-base.switch",
          "typeVersion": 1,
          "position": [
            300,
            850
          ],
          "parameters": {
            "dataType": "string",
            "value1": "={{$json.errorType}}",
            "rules": [
              {
                "value2": "connection",
                "output": 0
              },
              {
                "value2": "authentication",
                "output": 1
              },
              {
                "value2": "validation",
                "output": 2
              },
              {
                "value2": "notFound",
                "output": 3
              }
            ],
            "fallbackOutput": 4
          }
        },
        {
          "id": "43",
          "name": "Apply Recovery Strategy",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            850
          ],
          "parameters": {
            "functionCode": "// Apply appropriate recovery strategy based on error type\nconst errorType = $input.item.json.errorType;\nconst recoverable = $input.item.json.recoverable;\nconst workflow = $input.item.json.workflow;\n\nlet recoveryAction = 'none';\nlet recoveryMessage = 'Error cannot be automatically recovered';\nlet nextSteps = [];\n\nif (recoverable) {\n  if (errorType === 'connection') {\n    recoveryAction = 'retry';\n    recoveryMessage = 'Connection error detected, implementing retry with exponential backoff';\n    nextSteps = [\n      'Wait for 30 seconds',\n      'Retry the request up to 3 times',\n      'If still failing, notify administrator'\n    ];\n  } else if (errorType === 'rateLimit') {\n    recoveryAction = 'wait';\n    recoveryMessage = 'Rate limit exceeded, implementing wait strategy';\n    nextSteps = [\n      'Wait for suggested time period',\n      'Retry with reduced batch size',\n      'Implement progressive backoff'\n    ];\n  }\n}\n\n// For non-recoverable errors, suggest manual intervention\nif (!recoverable) {\n  if (errorType === 'authentication') {\n    recoveryAction = 'manual';\n    recoveryMessage = 'Authentication error detected, manual intervention required';\n    nextSteps = [\n      'Check API credentials',\n      'Verify account status',\n      'Update authentication tokens'\n    ];\n  } else if (errorType === 'validation') {\n    recoveryAction = 'manual';\n    recoveryMessage = 'Data validation error, manual intervention required';\n    nextSteps = [\n      'Review input data format',\n      'Check for schema changes',\n      'Update transformation logic'\n    ];\n  } else if (errorType === 'notFound') {\n    recoveryAction = 'manual';\n    recoveryMessage = 'Resource not found, manual intervention required';\n    nextSteps = [\n      'Verify resource identifiers',\n      'Check if resource was deleted',\n      'Update workflow configuration'\n    ];\n  }\n}\n\nreturn [{\n  json: {\n    ...$input.item.json,\n    recoveryAction,\n    recoveryMessage,\n    nextSteps,\n    recoveryTimestamp: new Date().toISOString(),\n    automatedRecoveryPossible: recoverable\n  }\n}];"
          }
        },
        {
          "id": "44",
          "name": "Log Error Details",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            850
          ],
          "parameters": {
            "functionCode": "// Format error details for logging\nconst error = $input.item.json;\n\nconst logEntry = {\n  timestamp: new Date().toISOString(),\n  workflowId: error.workflow?.id || 'unknown',\n  workflowName: error.workflow?.name || 'unknown',\n  errorType: error.errorType,\n  severity: error.severity,\n  message: error.errorDetails,\n  source: error.source,\n  recoveryAction: error.recoveryAction,\n  recoveryMessage: error.recoveryMessage,\n  stackTrace: error.stack || 'No stack trace available',\n  inputData: error.workflow?.inputData || {},\n  nodeParameters: error.workflow?.nodeParameters || {}\n};\n\n// In a production environment, you might want to send this to a logging service\nconsole.error('WORKFLOW ERROR:', JSON.stringify(logEntry, null, 2));\n\nreturn [{\n  json: {\n    ...error,\n    logEntry,\n    logTimestamp: new Date().toISOString()\n  }\n}];"
          }
        },
        {
          "id": "45",
          "name": "Notify Administrators",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            900,
            850
          ],
          "parameters": {
            "fromEmail": "{{$env.SMTP_SENDER}}",
            "toEmail": "{{$env.ADMIN_EMAIL}}",
            "subject": "=RSS-Telegram Workflow Error: {{$json.errorType}} in {{$json.workflow.name}}",
            "text": "=An error occurred in the RSS-Telegram automation workflow:\n\nError Type: {{$json.errorType}}\nSeverity: {{$json.severity}}\nTimestamp: {{$json.timestamp}}\nSource: {{$json.source}}\n\nError Details:\n{{$json.errorDetails}}\n\nRecovery Action: {{$json.recoveryAction}}\nRecovery Message: {{$json.recoveryMessage}}\n\nRecommended Next Steps:\n{{#each $json.nextSteps}}\n- {{this}}\n{{/each}}\n\nWorkflow Information:\nWorkflow Name: {{$json.workflow.name}}\nWorkflow ID: {{$json.workflow.id}}\n\nThis is an automated message from the n8n workflow error handling system.",
            "options": {
              "attachWorkflowData": true
            }
          }
        }
      ],
      "connections": {
        "Schedule Trigger": {
          "main": [
            [
              {
                "node": "Parse RSS Data",
                "type": "main",
                "index": 0
              },
              {
                "node": "Fetch RSS Feed",
                "type": "main",
                "index": 0
              },
              {
                "node": "Fetch RSS Feed",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch RSS Feed": {
          "main": [
            [
              {
                "node": "Parse RSS Data",
                "type": "main",
                "index": 0
              },
              {
                "node": "Process RSS Items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Parse RSS Data": {
          "main": [
            [
              {
                "node": "Filter By Keywords",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Filter By Keywords": {
          "main": [
            [
              {
                "node": "Check For Duplicates",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check For Duplicates": {
          "main": [
            [
              {
                "node": "Format Post Content",
                "type": "main",
                "index": 0
              },
              {
                "node": "Format Post Content",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Post Content": {
          "main": [
            [
              {
                "node": "Determine Optimal Posting Time",
                "type": "main",
                "index": 0
              },
              {
                "node": "Add Hashtags",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Determine Optimal Posting Time": {
          "main": [
            [
              {
                "node": "Should Post Now?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Post to Telegram": {
          "main": [
            [
              {
                "node": "Schedule for Later",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Cron Trigger": {
          "main": [
            [
              {
                "node": "Parse RSS Data",
                "type": "main",
                "index": 0
              },
              {
                "node": "RSS Feed URLs",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Schedule for Later": {
          "main": [
            [
              {
                "node": "Cron Trigger",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "RSS Feed URLs": {
          "main": [
            [
              {
                "node": "Split Into Individual Feeds",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Extract Content for Filtering": {
          "main": [
            [
              {
                "node": "Filter by Keywords",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Filter by Keywords": {
          "main": [
            [
              {
                "node": "Check for Duplicates",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check for Duplicates": {
          "main": [
            [
              {
                "node": "Prepare Post Content",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Prepare Post Content": {
          "main": [
            [
              {
                "node": "Any Items to Post?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Any Items to Post?": {
          "main": [
            [
              {
                "node": "Log Filtered Items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Log Filtered Items": {
          "main": [
            [
              {
                "node": "Log No Items Found",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Add Hashtags": {
          "main": [
            [
              {
                "node": "Finalize Post Format",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Finalize Post Format": {
          "main": [
            [
              {
                "node": "Check Post Quality",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check Post Quality": {
          "main": [
            [
              {
                "node": "Set Final Post",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Set Final Post": {
          "main": [
            [
              {
                "node": "Set Insufficient Content",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Error Handler": {
          "main": [
            [
              {
                "node": "Determine Optimal Time",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check If Post Now": {
          "main": [
            [
              {
                "node": "Post Immediately",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Post Immediately": {
          "main": [
            [
              {
                "node": "Schedule For Later",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Schedule For Later": {
          "main": [
            [
              {
                "node": "Store In Queue",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Store In Queue": {
          "main": [
            [
              {
                "node": "Merge Scheduling Paths",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Scheduling Paths": {
          "main": [
            [
              {
                "node": "Log Scheduling Decision",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Classify Error": {
          "main": [
            [
              {
                "node": "Determine Recovery Strategy",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Determine Recovery Strategy": {
          "main": [
            [
              {
                "node": "Apply Recovery Strategy",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Apply Recovery Strategy": {
          "main": [
            [
              {
                "node": "Log Error Details",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Log Error Details": {
          "main": [
            [
              {
                "node": "Notify Administrators",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {},
      "active": false
    },
    "provider": "anthropic",
    "model": "claude-3-7-sonnet-20250219",
    "timestamp": "2025-07-23T04:37:35.349Z",
    "nodeCount": 45,
    "connectionCount": 36
  },
  {
    "id": "59762db0-7692-440f-926e-5d1b02fdd786",
    "prompt": "To create a comprehensive newsletter automation workflow in n8n that checks an RSS feed daily for new posts, collects posts from the past week, formats them into an email template, adds a featured image and excerpt, includes social sharing buttons, and sends the newsletter every Friday at 10 AM while tracking engagement metrics, you can follow the detailed plan below. This workflow will require nodes for scheduling, data transformation, email sending, and analytics tracking.\n\n### Workflow Overview:\n1. **Trigger Setup:**\n   - **Cron Node**: Schedule the RSS feed check daily.\n   \n2. **RSS Feed Check and Data Collection:**\n   - **HTTP Request Node**: Fetch the RSS feed.\n   - **Function Node**: Filter posts from the past week.\n\n3. **Data Formatting and Email Preparation:**\n   - **Set Node**: Prepare data structure for email content.\n   - **HTTP Request Node**: Retrieve featured images.\n   - **Function Node**: Format posts into an HTML email template.\n\n4. **Email Composition:**\n   - **Set Node**: Add social sharing buttons to the email template.\n\n5. **Email Scheduling and Sending:**\n   - **Cron Node**: Trigger email sending every Friday at 10 AM.\n   - **Email Send Node**: Send the formatted newsletter.\n\n6. **Engagement Metrics Tracking:**\n   - **Webhook Node**: Capture engagement data from email interactions.\n\n7. **Error Handling:**\n   - **Error Trigger Node**: Manage any errors throughout the workflow.\n\n### Detailed Node Structure:\n\n#### 1. Trigger Setup\n- **Cron Node**: \n  - Schedule: Daily at a specific time to check the RSS feed.\n  - Connection: Cron Node -> HTTP Request Node for RSS feed check.\n\n#### 2. RSS Feed Check and Data Collection\n- **HTTP Request Node**:\n  - Fetch the RSS feed.\n  - Connection: HTTP Request Node -> Function Node for filtering.\n\n- **Function Node**:\n  - Logic to filter posts within the past week.\n  - Connection: Function Node -> Set Node for data preparation.\n\n#### 3. Data Formatting and Email Preparation\n- **Set Node**:\n  - Prepare and structure the data for email content.\n  - Connection: Set Node -> HTTP Request Node for images.\n\n- **HTTP Request Node**:\n  - Fetch featured images for each post.\n  - Connection: HTTP Request Node -> Function Node for formatting.\n\n- **Function Node**:\n  - Format posts into an HTML email template including excerpts.\n  - Connection: Function Node -> Set Node for email composition.\n\n#### 4. Email Composition\n- **Set Node**:\n  - Add social sharing buttons (HTML links) to the email template.\n  - Connection: Set Node -> Merge Node for email scheduling.\n\n#### 5. Email Scheduling and Sending\n- **Cron Node**:\n  - Schedule: Every Friday at 10 AM.\n  - Connection: Merge Node -> Email Send Node.\n\n- **Email Send Node**:\n  - Send the formatted newsletter.\n  - Connection: Email Send Node -> Webhook Node for engagement tracking.\n\n#### 6. Engagement Metrics Tracking\n- **Webhook Node**:\n  - Capture engagement metrics such as opens and clicks.\n  - Connection: Webhook Node -> Set Node for data logging.\n\n#### 7. Error Handling\n- **Error Trigger Node**:\n  - Capture and manage errors.\n  - Connection: Error Trigger Node -> Email Send Node for error notifications.\n\n### Additional Considerations:\n- **Ensure no orphaned nodes**: All nodes must be connected to form a complete workflow.\n- **Data Transformation**: Use Function Nodes to handle any necessary data transformations.\n- **Error Handling**: Implement global error management and recovery paths.\n- **Merge Node Usage**: Ensure all branches merge back to the main flow before the final email send.\n\nBy following this structure, you can create a robust newsletter automation workflow that efficiently gathers content, formats it for email delivery, and tracks engagement metrics for continuous improvement.",
    "workflow": {
      "name": "Newsletter RSS to Email",
      "nodes": [
        {
          "id": "1",
          "name": "Daily RSS Check",
          "type": "n8n-nodes-base.cron",
          "typeVersion": 1,
          "position": [
            100,
            100
          ],
          "parameters": {
            "triggerTimes": {
              "item": [
                {
                  "mode": "everyDay"
                }
              ]
            }
          }
        },
        {
          "id": "2",
          "name": "Fetch RSS Feed",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            300,
            100
          ],
          "parameters": {
            "url": "https://example.com/feed.xml",
            "method": "GET",
            "authentication": "none",
            "responseFormat": "xml"
          }
        },
        {
          "id": "3",
          "name": "Filter Recent Posts",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            500,
            100
          ],
          "parameters": {
            "functionCode": "// Get current date and date from 7 days ago\nconst now = new Date();\nconst oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n\n// Get the RSS items\nconst items = $input.all()[0].json.rss.channel.item;\n\n// Filter items from the past week\nconst recentItems = Array.isArray(items) ? items.filter(item => {\n  const pubDate = new Date(item.pubDate);\n  return pubDate >= oneWeekAgo && pubDate <= now;\n}) : [];\n\n// Return the filtered items\nreturn recentItems.map(item => ({\n  json: {\n    title: item.title,\n    link: item.link,\n    description: item.description,\n    pubDate: item.pubDate,\n    guid: item.guid,\n    imageUrl: item['media:content'] ? item['media:content']['@_url'] : ''\n  }\n}));"
          }
        },
        {
          "id": "4",
          "name": "Format Email Template",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            700,
            100
          ],
          "parameters": {
            "functionCode": "// Get all posts\nconst posts = $input.all();\n\n// Create HTML email template\nlet htmlContent = `\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Weekly Newsletter</title>\n  <style>\n    body { font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; }\n    .post { margin-bottom: 30px; }\n    .post-title { color: #333; font-size: 20px; margin-bottom: 10px; }\n    .post-excerpt { color: #666; margin-bottom: 10px; }\n    .post-image { max-width: 100%; height: auto; margin-bottom: 10px; }\n    .read-more { background-color: #4CAF50; color: white; padding: 8px 15px; text-decoration: none; border-radius: 4px; }\n    .social-buttons { margin-top: 20px; }\n    .social-button { display: inline-block; margin-right: 10px; }\n  </style>\n</head>\n<body>\n  <h1>Weekly Newsletter</h1>\n  <p>Here are the latest posts from our blog:</p>\n`;\n\n// Add each post to the template\nposts.forEach(post => {\n  const data = post.json;\n  const excerpt = data.description.substring(0, 150) + '...';\n  \n  htmlContent += `\n  <div class=\"post\">\n    ${data.imageUrl ? `<img class=\"post-image\" src=\"${data.imageUrl}\" alt=\"${data.title}\">` : ''}\n    <h2 class=\"post-title\">${data.title}</h2>\n    <p class=\"post-excerpt\">${excerpt}</p>\n    <a class=\"read-more\" href=\"${data.link}\">Read More</a>\n  </div>\n  `;\n});\n\n// Add social sharing buttons\nhtmlContent += `\n  <div class=\"social-buttons\">\n    <a class=\"social-button\" href=\"https://twitter.com/intent/tweet?url=https://example.com/newsletter\">Share on Twitter</a>\n    <a class=\"social-button\" href=\"https://www.facebook.com/sharer/sharer.php?u=https://example.com/newsletter\">Share on Facebook</a>\n    <a class=\"social-button\" href=\"https://www.linkedin.com/shareArticle?mini=true&url=https://example.com/newsletter\">Share on LinkedIn</a>\n  </div>\n</body>\n</html>\n`;\n\n// Return the formatted email content\nreturn [{\n  json: {\n    emailSubject: 'Weekly Newsletter - ' + new Date().toLocaleDateString(),\n    emailContent: htmlContent,\n    postCount: posts.length\n  }\n}];"
          }
        },
        {
          "id": "5",
          "name": "Friday Email Schedule",
          "type": "n8n-nodes-base.cron",
          "typeVersion": 1,
          "position": [
            900,
            100
          ],
          "parameters": {
            "triggerTimes": {
              "item": [
                {
                  "mode": "everyWeek",
                  "weekDay": 5,
                  "hour": 10,
                  "minute": 0
                }
              ]
            }
          }
        },
        {
          "id": "6",
          "name": "Daily RSS Feed Check",
          "type": "n8n-nodes-base.cron",
          "typeVersion": 1,
          "position": [
            1100,
            100
          ],
          "parameters": {
            "triggerTimes": {
              "item": [
                {
                  "mode": "daily",
                  "hour": 8,
                  "minute": 0
                }
              ]
            }
          }
        },
        {
          "id": "7",
          "name": "Fetch RSS Feed",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            1300,
            100
          ],
          "parameters": {
            "url": "={{ $json.rssUrl || 'https://example.com/feed.xml' }}",
            "method": "GET",
            "authentication": "none",
            "options": {
              "redirect": {
                "redirect": true
              },
              "timeout": 10000
            }
          }
        },
        {
          "id": "8",
          "name": "Filter Recent Posts",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            100
          ],
          "parameters": {
            "functionCode": "// Get current date and date from 7 days ago\nconst now = new Date();\nconst oneWeekAgo = new Date(now);\noneWeekAgo.setDate(now.getDate() - 7);\n\n// Parse the RSS feed XML\nconst xml = $input.all()[0].json.data;\nconst DOMParser = require('xmldom').DOMParser;\nconst parser = new DOMParser();\nconst xmlDoc = parser.parseFromString(xml, 'text/xml');\n\n// Extract items and filter for last week\nconst items = xmlDoc.getElementsByTagName('item');\nconst recentItems = [];\n\nfor (let i = 0; i < items.length; i++) {\n  const item = items[i];\n  const pubDateStr = item.getElementsByTagName('pubDate')[0]?.textContent;\n  \n  if (pubDateStr) {\n    const pubDate = new Date(pubDateStr);\n    \n    // Only include items from the past week\n    if (pubDate >= oneWeekAgo) {\n      const title = item.getElementsByTagName('title')[0]?.textContent || 'No Title';\n      const link = item.getElementsByTagName('link')[0]?.textContent || '#';\n      const description = item.getElementsByTagName('description')[0]?.textContent || 'No Description';\n      const imageUrl = item.getElementsByTagName('enclosure')[0]?.getAttribute('url') || '';\n      \n      recentItems.push({\n        title,\n        link,\n        description,\n        pubDate,\n        imageUrl\n      });\n    }\n  }\n}\n\n// Return the filtered items\nreturn [{ json: { recentPosts: recentItems } }];"
          }
        },
        {
          "id": "9",
          "name": "Friday Newsletter Trigger",
          "type": "n8n-nodes-base.cron",
          "typeVersion": 1,
          "position": [
            100,
            250
          ],
          "parameters": {
            "triggerTimes": {
              "item": [
                {
                  "mode": "weekly",
                  "weekday": 5,
                  "hour": 10,
                  "minute": 0
                }
              ]
            }
          }
        },
        {
          "id": "10",
          "name": "Error Handler",
          "type": "n8n-nodes-base.errorTrigger",
          "typeVersion": 1,
          "position": [
            300,
            250
          ],
          "parameters": {}
        },
        {
          "id": "11",
          "name": "Daily RSS Feed Check",
          "type": "n8n-nodes-base.cron",
          "typeVersion": 1,
          "position": [
            500,
            250
          ],
          "parameters": {
            "triggerTimes": {
              "item": [
                {
                  "hour": 8,
                  "minute": 0
                }
              ]
            },
            "cronExpression": "0 8 * * *"
          }
        },
        {
          "id": "12",
          "name": "Fetch RSS Feed",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            700,
            250
          ],
          "parameters": {
            "url": "={{$json.rssUrl || 'https://example.com/feed.xml'}}",
            "method": "GET",
            "authentication": "none",
            "options": {}
          }
        },
        {
          "id": "13",
          "name": "Parse XML",
          "type": "n8n-nodes-base.xml",
          "typeVersion": 1,
          "position": [
            900,
            250
          ],
          "parameters": {
            "mode": "toJson",
            "sourceKey": "data",
            "options": {
              "compact": true
            }
          }
        },
        {
          "id": "14",
          "name": "Filter Past Week Posts",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1100,
            250
          ],
          "parameters": {
            "functionCode": "// Get current date\nconst currentDate = new Date();\n\n// Calculate date 7 days ago\nconst oneWeekAgo = new Date();\noneWeekAgo.setDate(currentDate.getDate() - 7);\n\n// Extract items from RSS feed\nlet items = [];\nconst rssData = $input.item[0].json;\n\n// Handle different RSS feed structures\ntry {\n  // Try to get items from standard RSS structure\n  if (rssData.rss && rssData.rss.channel && rssData.rss.channel.item) {\n    items = Array.isArray(rssData.rss.channel.item) \n      ? rssData.rss.channel.item \n      : [rssData.rss.channel.item];\n  } \n  // Try Atom format\n  else if (rssData.feed && rssData.feed.entry) {\n    items = Array.isArray(rssData.feed.entry) \n      ? rssData.feed.entry \n      : [rssData.feed.entry];\n  }\n} catch (error) {\n  // Return empty array if parsing fails\n  return [{json: {posts: [], error: \"Failed to parse RSS feed: \" + error.message}}];\n}\n\n// Filter posts from the past week\nconst recentPosts = items.filter(item => {\n  try {\n    // Try to get pubDate from standard RSS\n    let dateStr = item.pubDate?._text || item.pubDate;\n    \n    // Try Atom format if standard format not found\n    if (!dateStr && item.published) {\n      dateStr = item.published._text || item.published;\n    }\n    \n    // If still no date found, try other common date fields\n    if (!dateStr && item.updated) {\n      dateStr = item.updated._text || item.updated;\n    }\n    \n    if (!dateStr) return false;\n    \n    const postDate = new Date(dateStr);\n    return postDate >= oneWeekAgo && postDate <= currentDate;\n  } catch (e) {\n    // Skip items with invalid dates\n    return false;\n  }\n});\n\n// Transform posts to a consistent format\nconst formattedPosts = recentPosts.map(post => {\n  try {\n    return {\n      title: post.title?._text || post.title?.['#text'] || post.title || 'No Title',\n      link: post.link?._text || post.link?.href?._text || post.link?.href || post.link || '#',\n      description: post.description?._text || post.description || post.summary?._text || post.summary || post.content?._text || post.content || '',\n      pubDate: post.pubDate?._text || post.pubDate || post.published?._text || post.published || post.updated?._text || post.updated || '',\n      guid: post.guid?._text || post.guid || post.id?._text || post.id || '',\n      originalItem: post\n    };\n  } catch (e) {\n    // Return a minimal version if transformation fails\n    return { \n      title: 'Error Processing Item', \n      link: '#', \n      description: 'This item could not be processed correctly.',\n      error: e.message,\n      originalItem: post\n    };\n  }\n});\n\nreturn [{json: {posts: formattedPosts, count: formattedPosts.length}}];"
          }
        },
        {
          "id": "15",
          "name": "Format Posts for Email",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            250
          ],
          "parameters": {
            "functionCode": "// Format each post into HTML format\nconst formattedPosts = items.map(item => {\n  const post = item.json;\n  \n  // Create HTML structure for each post\n  const postHtml = `\n    <div class=\"post\">\n      <h2><a href=\"${post.link}\">${post.title}</a></h2>\n      <div class=\"post-meta\">Published on ${new Date(post.pubDate).toLocaleDateString()}</div>\n      <div class=\"post-content\">\n        <img src=\"${post.featuredImage || 'https://placeholder.com/300x200'}\" alt=\"${post.title}\" style=\"max-width: 100%; height: auto; margin-bottom: 15px;\">\n        <p>${post.excerpt || post.description?.substring(0, 150) + '...' || 'Read more...'}</p>\n        <a href=\"${post.link}\" class=\"read-more\">Read more</a>\n      </div>\n    </div>\n    <hr>\n  `;\n  \n  return {\n    json: {\n      ...post,\n      postHtml\n    }\n  };\n});\n\nreturn formattedPosts;"
          }
        },
        {
          "id": "16",
          "name": "Add Social Sharing Buttons",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1500,
            250
          ],
          "parameters": {
            "functionCode": "// Add social sharing buttons to each post\nconst postsWithSocialButtons = items.map(item => {\n  const post = item.json;\n  \n  // Encode URL for sharing\n  const encodedUrl = encodeURIComponent(post.link);\n  const encodedTitle = encodeURIComponent(post.title);\n  \n  // Create social sharing buttons HTML\n  const socialButtons = `\n    <div class=\"social-sharing\">\n      <p>Share this:</p>\n      <a href=\"https://www.facebook.com/sharer/sharer.php?u=${encodedUrl}\" target=\"_blank\" style=\"display: inline-block; margin-right: 10px; padding: 5px 10px; background-color: #3b5998; color: white; text-decoration: none; border-radius: 3px;\">Facebook</a>\n      <a href=\"https://twitter.com/intent/tweet?url=${encodedUrl}&text=${encodedTitle}\" target=\"_blank\" style=\"display: inline-block; margin-right: 10px; padding: 5px 10px; background-color: #1da1f2; color: white; text-decoration: none; border-radius: 3px;\">Twitter</a>\n      <a href=\"https://www.linkedin.com/shareArticle?mini=true&url=${encodedUrl}&title=${encodedTitle}\" target=\"_blank\" style=\"display: inline-block; margin-right: 10px; padding: 5px 10px; background-color: #0077b5; color: white; text-decoration: none; border-radius: 3px;\">LinkedIn</a>\n    </div>\n  `;\n  \n  // Add social buttons to post HTML\n  const updatedPostHtml = post.postHtml.replace('</div>\\n    <hr>', `${socialButtons}</div>\\n    <hr>`);\n  \n  return {\n    json: {\n      ...post,\n      postHtml: updatedPostHtml\n    }\n  };\n});\n\nreturn postsWithSocialButtons;"
          }
        },
        {
          "id": "17",
          "name": "Create Complete Email Template",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            100,
            400
          ],
          "parameters": {
            "functionCode": "// Create a complete email template with all posts\nlet allPosts = '';\n\n// Combine all formatted posts\nitems.forEach(item => {\n  allPosts += item.json.postHtml;\n});\n\n// Create the complete email template with header and footer\nconst emailTemplate = `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Weekly Newsletter</title>\n  <style>\n    body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }\n    h1 { color: #2c3e50; }\n    h2 { color: #3498db; }\n    a { color: #3498db; text-decoration: none; }\n    a:hover { text-decoration: underline; }\n    .post { margin-bottom: 30px; }\n    .post-meta { color: #7f8c8d; font-size: 0.9em; margin-bottom: 10px; }\n    .read-more { display: inline-block; margin-top: 10px; font-weight: bold; }\n    .footer { margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; font-size: 0.9em; color: #7f8c8d; }\n    .social-sharing { margin-top: 15px; }\n  </style>\n</head>\n<body>\n  <h1>Weekly Newsletter</h1>\n  <p>Here are the latest updates from our blog:</p>\n  \n  ${allPosts}\n  \n  <div class=\"footer\">\n    <p>Thank you for subscribing to our newsletter!</p>\n    <p>If you no longer wish to receive these emails, you can <a href=\"#unsubscribe\">unsubscribe here</a>.</p>\n  </div>\n</body>\n</html>\n`;\n\n// Return the complete email template\nreturn [{\n  json: {\n    emailTemplate,\n    subject: 'Weekly Newsletter: Latest Updates',\n    date: new Date().toISOString()\n  }\n}];"
          }
        },
        {
          "id": "18",
          "name": "Validate Email Template",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            300,
            400
          ],
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ !!$json.emailTemplate }}",
                  "operation": "equals",
                  "value2": "true"
                }
              ]
            }
          }
        },
        {
          "id": "19",
          "name": "Template Created Successfully",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            500,
            400
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": {
              "string": [
                {
                  "name": "status",
                  "value": "success"
                },
                {
                  "name": "message",
                  "value": "Email template created successfully"
                }
              ],
              "boolean": [
                {
                  "name": "templateReady",
                  "value": true
                }
              ]
            }
          }
        },
        {
          "id": "20",
          "name": "Template Creation Failed",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [
            700,
            400
          ],
          "parameters": {
            "keepOnlySet": true,
            "values": {
              "string": [
                {
                  "name": "status",
                  "value": "error"
                },
                {
                  "name": "message",
                  "value": "Failed to create email template"
                }
              ],
              "boolean": [
                {
                  "name": "templateReady",
                  "value": false
                }
              ]
            }
          }
        },
        {
          "id": "21",
          "name": "Handle Template Errors",
          "type": "n8n-nodes-base.errorTrigger",
          "typeVersion": 1,
          "position": [
            900,
            400
          ],
          "parameters": {
            "errors": [
              "Email template creation failed"
            ]
          }
        },
        {
          "id": "22",
          "name": "Schedule Newsletter",
          "type": "n8n-nodes-base.cron",
          "typeVersion": 1,
          "position": [
            1100,
            400
          ],
          "parameters": {
            "triggerTimes": {
              "item": [
                {
                  "mode": "everyWeek",
                  "hour": 10,
                  "minute": 0,
                  "dayOfWeek": 5
                }
              ]
            }
          }
        },
        {
          "id": "23",
          "name": "Format Newsletter Email",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            1300,
            400
          ],
          "parameters": {
            "functionCode": "// Get the newsletter content from previous nodes\nconst posts = $input.all()[0].json.posts || [];\n\n// Format the email with social sharing buttons\nconst emailHtml = `\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Weekly Newsletter</title>\n  <style>\n    body { font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; }\n    .post { margin-bottom: 30px; }\n    .post img { max-width: 100%; height: auto; }\n    .post-title { font-size: 22px; font-weight: bold; }\n    .post-excerpt { font-size: 16px; line-height: 1.5; }\n    .social-buttons { margin-top: 10px; }\n    .social-button { display: inline-block; margin-right: 10px; padding: 5px 10px; background-color: #f0f0f0; border-radius: 3px; text-decoration: none; color: #333; }\n  </style>\n</head>\n<body>\n  <h1>Weekly Newsletter - ${new Date().toLocaleDateString()}</h1>\n  \n  ${posts.map(post => `\n    <div class=\"post\">\n      ${post.featuredImage ? `<img src=\"${post.featuredImage}\" alt=\"${post.title}\">` : ''}\n      <h2 class=\"post-title\">${post.title}</h2>\n      <p class=\"post-excerpt\">${post.excerpt || post.description || ''}</p>\n      <p><a href=\"${post.link}\">Read more</a></p>\n      <div class=\"social-buttons\">\n        <a class=\"social-button\" href=\"https://twitter.com/intent/tweet?url=${encodeURIComponent(post.link)}&text=${encodeURIComponent(post.title)}\" target=\"_blank\">Share on Twitter</a>\n        <a class=\"social-button\" href=\"https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(post.link)}\" target=\"_blank\">Share on Facebook</a>\n        <a class=\"social-button\" href=\"https://www.linkedin.com/shareArticle?mini=true&url=${encodeURIComponent(post.link)}&title=${encodeURIComponent(post.title)}\" target=\"_blank\">Share on LinkedIn</a>\n      </div>\n    </div>\n  `).join('')}\n  \n  <p>Thank you for subscribing to our newsletter!</p>\n  <p>To unsubscribe, <a href=\"#\">click here</a>.</p>\n</body>\n</html>\n`;\n\n// Return the formatted email\nreturn [{\n  json: {\n    emailSubject: \"Weekly Newsletter - \" + new Date().toLocaleDateString(),\n    emailHtml: emailHtml,\n    emailTrackingEnabled: true,\n    posts: posts\n  }\n}];"
          }
        },
        {
          "id": "24",
          "name": "Send Newsletter Email",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            1500,
            400
          ],
          "parameters": {
            "fromEmail": "newsletter@example.com",
            "toEmail": "={{ $json.subscribers }}",
            "subject": "={{ $json.emailSubject }}",
            "html": "={{ $json.emailHtml }}",
            "options": {
              "trackOpens": true,
              "trackClicks": true
            }
          }
        },
        {
          "id": "25",
          "name": "Webhook Capture Engagement",
          "type": "n8n-nodes-base.webhook",
          "typeVersion": 1,
          "position": [
            100,
            550
          ],
          "parameters": {
            "path": "newsletter-engagement",
            "responseMode": "lastNode",
            "options": {
              "responseCode": 200,
              "responseData": "firstEntryJson"
            }
          }
        },
        {
          "id": "26",
          "name": "Process Engagement Metrics",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [
            300,
            550
          ],
          "parameters": {
            "functionCode": "// Track different engagement types (opens, clicks, etc)\nconst engagementData = $input.item.json;\nconst metrics = {\n  timestamp: new Date().toISOString(),\n  newsletterId: engagementData.newsletterId || 'unknown',\n  eventType: engagementData.eventType || 'open',\n  userId: engagementData.userId || 'anonymous',\n  linkClicked: engagementData.linkUrl || null,\n  deviceInfo: engagementData.deviceInfo || 'unknown',\n  location: engagementData.location || 'unknown',\n  timeSpent: engagementData.timeSpent || 0\n};\n\n// Add derived metrics\nmetrics.isFirstOpen = engagementData.isFirstOpen || false;\nmetrics.isUnsubscribe = engagementData.eventType === 'unsubscribe';\nmetrics.isSocialShare = engagementData.eventType === 'share';\n\nreturn [{json: metrics}];"
          }
        },
        {
          "id": "27",
          "name": "Save Engagement To Database",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [
            500,
            550
          ],
          "parameters": {
            "method": "POST",
            "url": "=https://api.example.com/analytics/newsletter-engagement",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "bodyParameters": {
              "parameters": [
                {
                  "name": "metrics",
                  "value": "={{ $json }}"
                }
              ]
            },
            "options": {
              "timeout": 5000,
              "retry": {
                "count": 3,
                "maxTimeout": 10000
              }
            }
          }
        },
        {
          "id": "28",
          "name": "Error Trigger",
          "type": "n8n-nodes-base.errorTrigger",
          "typeVersion": 1,
          "position": [
            700,
            550
          ],
          "parameters": {}
        },
        {
          "id": "29",
          "name": "Send Error Notification",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [
            900,
            550
          ],
          "parameters": {
            "fromEmail": "newsletter@example.com",
            "toEmail": "admin@example.com",
            "subject": "Newsletter Workflow Error",
            "text": "=An error occurred in the newsletter automation workflow:\n\nError: {{$node[\"Error Trigger\"].json[\"error\"].message}}\n\nWorkflow: {{$node[\"Error Trigger\"].json[\"workflow\"].name}}\nNode: {{$node[\"Error Trigger\"].json[\"node\"].name}}\n\nTimestamp: {{$now}}"
          }
        }
      ],
      "connections": {
        "Daily RSS Check": {
          "main": [
            [
              {
                "node": "Filter Recent Posts",
                "type": "main",
                "index": 0
              },
              {
                "node": "Fetch RSS Feed",
                "type": "main",
                "index": 0
              },
              {
                "node": "Fetch RSS Feed",
                "type": "main",
                "index": 0
              },
              {
                "node": "Fetch RSS Feed",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch RSS Feed": {
          "main": [
            [
              {
                "node": "Filter Recent Posts",
                "type": "main",
                "index": 0
              },
              {
                "node": "Filter Recent Posts",
                "type": "main",
                "index": 0
              },
              {
                "node": "Parse XML",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Filter Recent Posts": {
          "main": [
            [
              {
                "node": "Format Email Template",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Friday Email Schedule": {
          "main": [
            [
              {
                "node": "Filter Recent Posts",
                "type": "main",
                "index": 0
              },
              {
                "node": "Daily RSS Feed Check",
                "type": "main",
                "index": 0
              },
              {
                "node": "Daily RSS Feed Check",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Email Template": {
          "main": [
            [
              {
                "node": "Friday Email Schedule",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Daily RSS Feed Check": {
          "main": [
            [
              {
                "node": "Filter Recent Posts",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Friday Newsletter Trigger": {
          "main": [
            [
              {
                "node": "Filter Recent Posts",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Error Handler": {
          "main": [
            [
              {
                "node": "Send Error Notification",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Parse XML": {
          "main": [
            [
              {
                "node": "Filter Past Week Posts",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Filter Past Week Posts": {
          "main": [
            [
              {
                "node": "Format Posts for Email",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Posts for Email": {
          "main": [
            [
              {
                "node": "Add Social Sharing Buttons",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create Complete Email Template": {
          "main": [
            [
              {
                "node": "Validate Email Template",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate Email Template": {
          "main": [
            [
              {
                "node": "Template Created Successfully",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Template Created Successfully": {
          "main": [
            [
              {
                "node": "Template Creation Failed",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Handle Template Errors": {
          "main": [
            [
              {
                "node": "Send Error Notification",
                "type": "main",
                "index": 0
              },
              {
                "node": "Schedule Newsletter",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Schedule Newsletter": {
          "main": [
            [
              {
                "node": "Filter Recent Posts",
                "type": "main",
                "index": 0
              },
              {
                "node": "Format Newsletter Email",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Newsletter Email": {
          "main": [
            [
              {
                "node": "Send Newsletter Email",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Webhook Capture Engagement": {
          "main": [
            [
              {
                "node": "Filter Recent Posts",
                "type": "main",
                "index": 0
              },
              {
                "node": "Process Engagement Metrics",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process Engagement Metrics": {
          "main": [
            [
              {
                "node": "Save Engagement To Database",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Error Trigger": {
          "main": [
            [
              {
                "node": "Send Error Notification",
                "type": "main",
                "index": 0
              },
              {
                "node": "Send Error Notification",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {},
      "active": false
    },
    "provider": "anthropic",
    "model": "claude-3-7-sonnet-20250219",
    "timestamp": "2025-07-23T04:58:28.917Z",
    "nodeCount": 29,
    "connectionCount": 25
  }
]