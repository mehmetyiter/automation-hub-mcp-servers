name: CD Production Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Force deployment (skip health checks)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # 🏗️ Build and Push Docker Image
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ github.ref_name }}

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ steps.meta.outputs.tags }}
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

  # 🔍 Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: read
      security-events: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-push.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Snyk to check Docker image
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ${{ needs.build-and-push.outputs.image-tag }}
        args: --severity-threshold=high

  # 📋 Pre-deployment Checks
  pre-deployment:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
    outputs:
      deployment-approved: ${{ steps.approval.outputs.approved }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Check cluster health
      run: |
        kubectl cluster-info
        kubectl get nodes
        kubectl get pods -n n8n-mcp || true

    - name: Validate Kubernetes manifests
      run: |
        kubectl apply --dry-run=client -f kubernetes/
        helm template helm/n8n-mcp --validate

    - name: Check deployment readiness
      id: readiness
      run: |
        # Check if namespace exists
        if ! kubectl get namespace n8n-mcp; then
          echo "Creating namespace..."
          kubectl apply -f kubernetes/namespace.yaml
        fi
        
        # Check resource quotas and limits
        kubectl describe resourcequota -n n8n-mcp || true
        kubectl top nodes || true

    - name: Manual approval check
      id: approval
      run: |
        if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
          echo "approved=true" >> $GITHUB_OUTPUT
        else
          echo "approved=true" >> $GITHUB_OUTPUT
        fi

  # 🚀 Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push, pre-deployment]
    if: ${{ (github.event.inputs.environment == 'staging' || github.ref == 'refs/heads/develop') && needs.pre-deployment.outputs.deployment-approved == 'true' }}
    environment:
      name: staging
      url: https://staging-api.n8n-mcp.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl and Helm
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.STAGING_KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Deploy to staging
      run: |
        helm upgrade --install n8n-mcp helm/n8n-mcp \
          --namespace n8n-mcp \
          --create-namespace \
          --values helm/n8n-mcp/values.staging.yaml \
          --set image.tag=${{ github.sha }} \
          --set image.repository=${{ needs.build-and-push.outputs.image-tag }} \
          --wait \
          --timeout=600s

    - name: Run smoke tests
      run: |
        sleep 30
        kubectl wait --for=condition=ready pod -l app=n8n-mcp -n n8n-mcp --timeout=300s
        ./scripts/smoke-tests.sh staging

    - name: Notify staging deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'Staging deployment completed successfully'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # 🏭 Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, pre-deployment]
    if: ${{ (github.event.inputs.environment == 'production' || github.ref == 'refs/heads/main') && needs.pre-deployment.outputs.deployment-approved == 'true' }}
    environment:
      name: production
      url: https://api.n8n-mcp.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl and Helm
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.PROD_KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Create backup before deployment
      run: |
        echo "Creating pre-deployment backup..."
        kubectl exec -n n8n-mcp deployment/postgres -- pg_dump -U postgres n8n_mcp > backup-$(date +%Y%m%d-%H%M%S).sql
        
        # Upload backup to S3 or artifact storage
        aws s3 cp backup-*.sql s3://${{ secrets.BACKUP_BUCKET }}/pre-deployment/ || true

    - name: Deploy to production with blue-green strategy
      run: |
        # Get current deployment
        CURRENT_DEPLOYMENT=$(helm get values n8n-mcp -n n8n-mcp -o json | jq -r '.image.tag // "latest"')
        echo "Current deployment: $CURRENT_DEPLOYMENT"
        
        # Deploy new version
        helm upgrade n8n-mcp helm/n8n-mcp \
          --namespace n8n-mcp \
          --values helm/n8n-mcp/values.prod.yaml \
          --set image.tag=${{ github.sha }} \
          --set image.repository=${{ needs.build-and-push.outputs.image-tag }} \
          --set deployment.strategy=RollingUpdate \
          --set deployment.rollingUpdate.maxSurge=1 \
          --set deployment.rollingUpdate.maxUnavailable=0 \
          --wait \
          --timeout=600s

    - name: Run health checks
      run: |
        echo "Waiting for deployment to be ready..."
        kubectl wait --for=condition=ready pod -l app=n8n-mcp -n n8n-mcp --timeout=300s
        
        echo "Running health checks..."
        ./scripts/health-check.sh
        
        echo "Running smoke tests..."
        ./scripts/smoke-tests.sh production

    - name: Run post-deployment tests
      run: |
        echo "Running comprehensive post-deployment tests..."
        
        # Database connectivity test
        kubectl exec -n n8n-mcp deployment/postgres -- psql -U postgres -d n8n_mcp -c "SELECT 1;"
        
        # Redis connectivity test
        kubectl exec -n n8n-mcp deployment/redis -- redis-cli ping
        
        # API endpoint tests
        curl -f https://api.n8n-mcp.com/health
        curl -f https://api.n8n-mcp.com/metrics
        
        # Load test (light)
        echo "Running light load test..."
        docker run --rm \
          -v $(pwd)/scripts:/scripts \
          loadimpact/k6:latest run /scripts/load-test-light.js

    - name: Update deployment status
      run: |
        kubectl annotate deployment n8n-mcp-api -n n8n-mcp \
          deployment.kubernetes.io/change-cause="Deployed ${{ github.sha }} from ${{ github.ref }}"

    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          🚀 Production deployment completed successfully!
          
          Version: ${{ github.sha }}
          Environment: production
          URL: https://api.n8n-mcp.com
          
          Health: ✅ Passed
          Smoke Tests: ✅ Passed
          Load Test: ✅ Passed
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # 📊 Post-deployment Monitoring
  post-deployment-monitoring:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()
    steps:
    - name: Setup monitoring
      run: |
        echo "Setting up post-deployment monitoring..."
        
        # Wait for metrics to be available
        sleep 60
        
        # Check Prometheus targets
        curl -s "http://prometheus.n8n-mcp.com/api/v1/targets" | jq '.data.activeTargets[] | select(.labels.job=="n8n-mcp-api") | .health'
        
        # Check Grafana dashboards
        curl -s -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
          "http://grafana.n8n-mcp.com/api/dashboards/uid/n8n-mcp-overview"

    - name: Schedule rollback monitoring
      run: |
        echo "Scheduling rollback monitoring for next 30 minutes..."
        # This would typically integrate with your monitoring system
        # to automatically rollback if error rates exceed thresholds

  # 🔄 Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment-monitoring]
    if: always()
    steps:
    - name: Cleanup old images
      run: |
        echo "Cleaning up old container images..."
        # Keep last 5 images
        gh api repos/${{ github.repository }}/packages/container/n8n-mcp/versions \
          --jq '.[5:] | .[].id' | \
          xargs -I {} gh api --method DELETE repos/${{ github.repository }}/packages/container/n8n-mcp/versions/{}

    - name: Cleanup old deployments
      run: |
        kubectl delete replicasets -n n8n-mcp \
          $(kubectl get replicasets -n n8n-mcp -o jsonpath='{.items[?(@.spec.replicas==0)].metadata.name}') || true